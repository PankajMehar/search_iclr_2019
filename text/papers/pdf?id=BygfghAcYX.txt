Under review as a conference paper at ICLR 2019
THE ROLE OF OVER-PARAMETRIZATION
IN GENERALIZATION OF NEURAL NETWORKS
Anonymous authors Paper under double-blind review
ABSTRACT
Despite existing work on ensuring generalization of neural networks in terms of scale sensitive complexity measures, such as norms, margin and sharpness, these complexity measures do not offer an explanation of why neural networks generalize better with over-parametrization. In this work we suggest a novel complexity measure based on unit-wise capacities resulting in a tighter generalization bound for two layer ReLU networks. Our capacity bound correlates with the behavior of test error with increasing network sizes, and could potentially explain the improvement in generalization with over-parametrization. We further present a matching lower bound for the Rademacher complexity that improves over previous capacity lower bounds for neural networks.
1 INTRODUCTION
Deep neural networks have enjoyed great success in learning across a wide variety of tasks. They played a crucial role in the seminal work of Krizhevsky et al. (2012), starting an arms race of training larger networks with more hidden units, in pursuit of better test performance (He et al., 2016). In fact the networks used in practice are over-parametrized to the extent that they can easily fit random labels to the data (Zhang et al., 2017). Even though they have such a high capacity, when trained with real labels they achieve smaller generalization error.
Traditional wisdom in learning suggests that using models with increasing capacity will result in overfitting to the training data. Hence capacity of the models is generally controlled either by limiting the size of the model (number of parameters) or by adding an explicit regularization, to prevent from overfitting to the training data. Surprisingly, in the case of neural networks we notice that increasing the model size only helps in improving the generalization error, even when the networks are trained without any explicit regularization - weight decay or early stopping (Lawrence et al., 1998; Srivastava et al., 2014; Neyshabur et al., 2015c). In particular, Neyshabur et al. (2015c) observed that training on models with increasing number of hidden units lead to decrease in the test error for image classification on MNIST and CIFAR-10. Similar empirical observations have been made over a wide range of architectural and hyper-parameter choices (Liang et al., 2017; Novak et al., 2018; Lee et al., 2018). What explains this improvement in generalization with over-parametrization? What is the right measure of complexity of neural networks that captures this generalization phenomenon?
Complexity measures that depend on the total number of parameters of the network, such as VC bounds, do not capture this behavior as they increase with the size of the network. Existing works suggested different norm, margin and sharpness based measures, to measure the capacity of neural networks, in an attempt to explain the generalization behavior observed in practice (Neyshabur et al., 2015b; Keskar et al., 2016; Dziugaite & Roy, 2017; Neyshabur et al., 2017; Bartlett et al., 2017; Neyshabur et al., 2018; Golowich et al., 2017; Arora et al., 2018). In particular, Bartlett et al. (2017) showed a margin based generalization bound that depends on the spectral norm and 1,2 norm of the layers of a network. However, as shown in Neyshabur et al. (2017) and in Figure 5, these complexity measures fail to explain why over-parametrization helps, and in fact increase with the size of the network. Dziugaite & Roy (2017) numerically evaluated a generalization bound based on PAC-Bayes. Their reported numerical generalization bounds also increase with the increasing network size. These existing complexity measures increase with the size of the network, even for two layer networks, as they depend on the number of hidden units either explicitly, or the norms in their measures implicitly
1

Under review as a conference paper at ICLR 2019

error error measure

0.15 ResNet18 0.10

two layer ReLU net 0.6 0.4

7.5 5.0

unit capacity unit impact

0.05

training error

0.2

training error

2.5

0.00

test error 10#6param 108

0.0 test error 23 27 211 215 #hidden units

0.0 26 29 212 215 #hidden units

Figure 1: Over-parametrization phenomenon. Left panel: Training pre-activation ResNet18 architecture of different sizes on CIFAR-10 dataset. We observe that even when after network is large enough to completely fit the training data(reference line), the test error continues to decrease for larger networks. Middle panel: Training fully connected feedforward network with single hidden layer on CIFAR-10. We observe the same phenomena as the one observed in ResNet18 architecture. Right panel: Unit capacity captures the complexity of a hidden unit and unit impact captures the impact of a hidden unit on the output of the network, and are important factors in our capacity bound (Theorem 1). Weobserve empirically that both average unit capacity and average unit impact shrink with a rate faster than 1/ h where h is the number of hidden units. Please see Supplementary Section A for experiments settings.

depend on the number of hidden units for the networks used in practice (Neyshabur et al., 2017) (see Figures 3 and 5).
To study and analyze this phenomenon more carefully, we need to simplify the architecture making sure that the property of interest is preserved after the simplification. We therefore chose two layer ReLU networks since as shown in the left and middle panel of Figure 1, it exhibits the same behavior with over-parametrization as the more complex pre-activation ResNet18 architecture. In this paper we prove a tighter generalization bound (Theorem 2) for two layer ReLU networks. Our capacity bound, unlike existing bounds, correlates with the test error and decreases with the increasing number of hidden units, in the experimental range considered. Our key insight is to characterize complexity at a unit level, and as we see in the right panel in Figure 1 these unit level measures shrink at a rate faster than 1/ h for each hidden unit, decreasing the overall measure as the network size increases. When measured in terms of layer norms, our generalization bound depends on the Frobenius norm of the top layer and the Frobenius norm of the difference of the hidden layer weights with the initialization, which decreases with increasing network size (see Figure 2).
The closeness of learned weights to initialization in the over-parametrized setting can be understood by considering the limiting case as the number of hidden units go to infinity, as considered in Bengio et al. (2006) and Bach (2017). In this extreme setting, just training the top layer of the network, which is a convex optimization problem for convex losses, will result in minimizing the training error, as the randomly initialized hidden layer has all possible features. Intuitively, the large number of hidden units here represent all possible features and hence the optimization problem involves just picking the right features that will minimize the training loss. This suggests that as we over-parametrize the networks, the optimization algorithms need to do less work in tuning the weights of the hidden units to find the right solution. Dziugaite & Roy (2017) indeed have numerically evaluated a PAC-Bayes measure from the initialization used by the algorithms and state that the Euclidean distance to the initialization is smaller than the Frobenius norm of the parameters. Nagarajan & Kolter (2017) also make a similar empirical observation on the significant role of initialization, and in fact prove an initialization dependent generalization bound for linear networks. However they do not prove a similar generalization bound for neural networks. Alternatively, Liang et al. (2017) suggested a Fisher-Rao metric based complexity measure that correlates with generalization behavior in larger networks, but they also prove the capacity bound only for linear networks.
Contributions: Our contributions in this paper are as follows.
· We empirically investigate the role of over-parametrization in generalization of neural networks on 3 different datasets (MNIST, CIFAR10 and SVHN), and show that the existing complexity measures increase with the number of hidden units - hence do not explain the generalization behavior with over-parametrization.
2

Under review as a conference paper at ICLR 2019

measure probability density probability density

80 40

second layer Spectral Frobenius

20 Distance

10

5 26 29 212 215 #hidden units

first layer 80 40 20 10 5
26 29 212 215 #hidden units

15

10

5

0

0 angle

to

in4itial

weight

2

10.0 64

7.5

256 1K

5.0

4K 16K

2.5 32K

0.0 d0istance to 4initial weig8ht

Figure 2: Properties of two layer ReLU networks trained on CIFAR-10. We report different measures on the trained network. From left to right: measures on the second (output) layer, measures on the first (hidden) layer, distribution of angles of the trained weights to the initial weights in the first layer, and the distribution of unit capacities of the first layer. "Distance" in the first two plots is the distance from initialization in Frobenius norm.
· We prove tighter generalization bounds (Theorem 2) for two layer ReLU networks, improving over previous results. Our proposed complexity measure for neural networks decreases with the increasing number of hidden units, in the experimental range considered (see Section 2), and can potentially explain the effect of over-parametrization on generalization of neural networks.
· We provide a matching lower bound for the Rademacher complexity of two layer ReLU networks with a scalar output. Our lower bound considerably improves over the best known bound given in Bartlett et al. (2017), and to our knowledge is the first such lower bound that is bigger than the Lipschitz of the network class.

1.1 PRELIMINARIES

We consider two layer fully connected ReLU networks with input dimension d, output dimension c, and the number of hidden units h. Output of a network is fV,U(x) = V[Ux]+1 where x  Rd, U  Rh×d and V  Rc×h. We denote the incoming weights to the hidden unit i by ui and the
outgoing weights from hidden unit i by vi. Therefore ui corresponds to row i of matrix U and vi
corresponds to the column i of matrix V.

We consider the c-class classification task where the label with maximum output score will be selected as the prediction. Following Bartlett et al. (2017), we define the margin operator µ : Rc × [c]  R as a function that given the scores f (x)  Rc for each label and the correct label y  [c], it returns
the difference between the score of the correct label and the maximum score among other labels, i.e.
µ(f (x), y) = f (x)[y] - maxi=y f (x)[i]. We now define the ramp loss as follows:

0 µ(f (x), y) >   (f (x), y) = µ(f (x), y)/ µ(f (x), y)  [0, ]
1 µ(f (x), y) < 0.

(1)

For any distribution D and margin  > 0, we define the expected margin loss of a predictor f (.) as
L(f ) = P(x,y)D [ (f (x), y)]. The loss L(.) defined this way is bounded between 0 and 1. We use L^(f ) to denote the empirical estimate of the above expected margin loss. As setting  = 0 reduces the above to classification loss, we will use L0(f ) and L^0(f ) to refer to the expected risk and the training error respectively.

2 GENERALIZATION OF TWO LAYER RELU NETWORKS

Let   H denotes the function class corresponding to the composition of the loss function and functions from class H. With probability 1 -  over the choice of the training set of size m, the
following generalization bound holds for any function f  H (Mohri et al., 2012, Theorem 3.1):

L0(f )  L^(f ) + 2RS(   H) + 3

ln(2/) .
2m

(2)

1Since the number of bias parameters is negligible compare to the size of the network, we drop the bias parameters to simplify the analysis. Moreover, one can model the bias parameters in the first layer by adding an extra dimension with value 1.

3

Under review as a conference paper at ICLR 2019

where RS(H) is the Rademacher complexity of a class H of functions with respect to the training set S which is defined as:

RS (H)

=

1 m

E
{±1}m

m
sup if (xi)
f H i=1

.

(3)

Rademacher complexity is a capacity measure that captures the ability of functions in a function class to fit random labels which increases with the complexity of the class.

2.1 AN EMPIRICAL INVESTIGATION

We will bound the Rademacher complexity of neural networks to get a bound on the generalization error. Since the Rademacher complexity depends on the function class considered, we need to choose the right function class that only captures the real trained networks, which is potentially much smaller than networks with all possible weights, to get a complexity measure that explains the decrease in generalization error with increasing width. Choosing a bigger function class can result in weaker capacity bounds that do not capture this phenomenon. Towards that we first investigate the behavior of different measures of network layers with increasing number of hidden units. The experiments discussed below are done on the CIFAR-10 dataset. Please see Section A for similar observations on SVHN and MNIST datasets.
First layer: As we see in the second panel in Figure 2 even though the spectral and Frobenius norms of the learned layer decrease initially, they eventually increase with h, with Frobenius norm increasing at a faster rate. However the distance Frobenius norm, measured w.r.t. initialization ( U - U0 F ), decreases. This suggests that the increase in the Frobenius norm of the weights in larger networks is due to the increase in the Frobenius norm of the random initialization. To understand this behavior in more detail we also plot the distance to initialization per unit and the distribution of angles between learned weights and initial weights in the last two panels of Figure 2. We indeed observe that per unit distance to initialization decreases with increasing h, and a significant shift in the distribution of angles to initial points, from being almost orthogonal in small networks to almost aligned in large networks. This per unit distance to initialization is a key quantity that appears in our capacity bounds and we refer to it as unit capacity in the remainder of the paper.
Unit capacity. We define i = ui - u0i 2 as the unit capacity of the hidden unit i.
Second layer: Similar to first layer, we look at the behavior of different measures of the second layer of the trained networks with increasing h in the first panel of Figure 2. Here, unlike the first layer, we notice that Frobenius norm and distance to initialization both decrease and are quite close suggesting a limited role of initialization for this layer. Moreover, as the size grows, since the Frobenius norm V F of the second layer slightly decreases, we canargue that the norm of outgoing weights vi from a hidden unit i decreases with a rate faster than 1/ h. If we think of each hidden unit as a linear separator and the top layer as an ensemble over classifiers, this means the impact of each classifier on the final decision is shrinking with a rate faster than 1/ h. This per unit measure again plays an important role and we define it as unit impact for the remainder of this paper.
Unit impact. We define i = vi 2 as the unit impact, which is the magnitude of the outgoing weights from the unit i.
Motivated by our empirical observations we consider the following class of two layer neural networks that depend on the capacity and impact of the hidden units of a network. Let W be the following restricted set of parameters:

W = (V, U) | V  Rc×h, U  Rh×d, vi  i, ui - u0i 2  i ,

(4)

We now consider the hypothesis class of neural networks represented using parameters in the set W:

FW = f (x) = V [Ux]+ | (V, U)  W .

(5)

Our empirical observations indicate that networks we learn from real data have bounded unit capacity and unit impact and therefore studying the generalization behavior of the above function class can potentially provide us with a better understanding of these networks. Given the above function class, we will now study its generalization properties.

4

Under review as a conference paper at ICLR 2019

2.2 GENERALIZATION BOUND

In this section we prove a generalization bound for two layer ReLU networks. We first bound the Rademacher complexity of the class FW in terms of the sum over hidden units of the product of unit capacity and unit impact. Combining this with the equation (2) will give us the generalization bound.

Theorem 1. Given a training set S = {xi}im=1 and  > 0, Rademacher complexity of the composition of loss function  over the class FW defined in equations (4) and (5) is bounded as follows:



RS (   FW )  2

2c + 2 m

h

j

j

X F+

u0j X 2

j=1

(6)



 2 2c + 2 m

 2  2

1m m

xi

2 2

+

i=1



1m m

U0xi

2
2

.

i=1

(7)

The proof is given in the supplementary Section C. The main idea behind the proof is a new technique to decompose the complexity of the network into complexity of the hidden units. To our knowledge, all previous works decompose the complexity to that of layers and use Lipschitz property of the network to bound the generalization error. However, Lipschitzness of the layer is a rather weak property that ignores the linear structure of each individual layer. Instead, by decomposing the complexity across the hidden units, we get the above tighter bound on the Rademacher complexity of the two layer neural networks.

The generalization bound in Theorem 1 is for any function in the function class defined by a specific
choice of  and  fixed before the training procedure. To get a generalization bound that holds for
all networks, we need to cover the space of possible values for  and  and take a union bound over it. The following theorem states the generalization bound for any two layer ReLU network 2.

Theorem 2. For any h  2,  > 0,   (0, 1) and U0  Rh×d, with probability 1 -  over the choice of the training set S = {xi}mi=1  Rd, for any function f (x) = V[Ux]+ such that V  Rc×h and U  Rh×d, the generalization error is bounded as follows:



L0(f )  L^ (f ) + O~

c VF

U - U0 F

X F+

U0X F

+

m

h m

  L^ (f ) + O~  c V F

U - U0 + U0

F

2

m

1 m

m i=1

xi

2 2

+

 h .

m

The above generalization bound improves over the existing bounds, and empirically decreases with increasing width for networks learned in practice (see Section 2.3). We also show an explicit lower bound for the Rademacher complexity (Theorem 3), matching the first term in the above generalization bound, thereby showing its tightness. The additive factor O~( h/m) in the above bound is the result of taking the union bound over the cover of  and . As we see in Figure 5, in the regimes of interest this additive term is small and does not dominate the first term, resulting in an overall decrease in capacity with over-parametrization. In Appendix Section B, we further extend the generalization bound in Theorem 2 to p norms, presenting a finer tradeoff between the two terms.
2.3 COMPARISON WITH EXISTING RESULTS
In table 1 we compare our result with the existing generalization bounds, presented for the simpler setting of two layer networks. In comparison with the bound ~ U 2 V - V0 1,2 + U - U0 1,2 V 2 (Bartlett et al., 2017; Golowich et al., 2017): The first term in their bound U 2 V - V0 1,2 is of smaller magnitude and behaves roughly similar to the first term in our bound U0 2 V F (see Figure 3 last two panels). The key complexity term in their bound is U - U0 1,2 V 2, and in our bound is U - U0 F V F , for the range of h considered. V 2 and V F differ by number of classes, a small constant, and hence behave
2For the statement with exact constants see Lemma 13 in Supplementary Section C.

5

Under review as a conference paper at ICLR 2019

measure

# Reference (1) Harvey et al. (2017)

Measure ~ (dh)

(2) Bartlett & Mendelson (2002)

~ U ,1 V ,1

(3) Neyshabur et al. (2015b), Golowich et al. (2017)

~ U F V F

(4) Bartlett et al. (2017), Golowich et al. (2017) (5) Neyshabur et al. (2018) (6) Theorem 2

~

U2

V - V0

1,2

+ 

U - U0

1,2

V2

~ ~

U 2 V - V0 F +

h U - U0 F

V 

2

U0 2

V F+

U - U0 F

V F+

h

Table 1: Comparison with the existing generalization measures presented for the case of two layer ReLU networks with constant number of outputs and constant margin.

104
(2) ||U|| ,1 ||V|| ,1 (3) ||U||F ||V||F
103
26 #h2id9den 2u1n2its 215

10000 5000

||U||2 ||V V0||1,2 ||U U0||1,2 ||V||2 (4) sum

0 26 29 212 215 #hidden units

10000 5000

c||U||2 ||V V0||F h||U U0||F ||V||2 (5) sum

0 26 29 212 215 #hidden units

1000 500

||V||F ||U0||2 ||V||F ||U U0||F (6) sum

0 26 #h2id9den 2u1n2its 215

Figure 3: Behavior of terms presented in Table 1 with respect to the size of the network trained on CIFAR-10.
 similarly. However, U - U0 1,2 can be as big as h · U - U0 F when most hidden units have similar capacity. Infact their bound increases with h mainly because of this term U - U0 1,2 . As we see in the first and second panels of Figure 3, 1 norm terms appearing in Bartlett & Mendelson (2002); Bartlett et al. (2017); Golowich et al. (2017) over hidden units increase with the number of units as the hidden layers learned in practice are usually dense. Neyshabur et al. (2015b); Golowich et al. (2017) showed a bound depending on the product of Frobenius norms of layers, which increases with h, showing the important role of initialization in our bounds. In fact the proof technique of Neyshabur et al. (2015b) does not allow for getting a bound with norms measured from initialization, and our new decomposition approach is the key for the tighter bound.
Experimental comparison. We train two layer ReLU networks of size h on CIFAR-10 and SVHN datasets with values of h ranging from 26 to 215. The training and test error for CIFAR-10 are shown in the first panel of Figure 1, and for SVHN in the left panel of Figure 4. We observe for both datasets that even though a network of size 128 is enough to get to zero training error, networks with sizes well beyond 128 can still get better generalization, even when trained without any regularization. We further measure the unit-wise properties introduce in the paper, namely unit capacity and unit impact. These quantities decrease with increasing h, and are reported in the right panel of Figure 1 and second panel of Figure 4. Also notice that the number of epochs required for each network size to get 0.01 cross-entropy loss decreases for larger networks as shown in the third panel of Figure 4.
For the same experimental setup, Figure 5 compares the behavior of different capacity bounds
over networks of increasing sizes. Generalization bounds typically scale as C/m where C is the effective capacity of the function class. The left panel reports the effective capacity C based on different measures calculated with all the terms and constants. We can see that our bound is the only that decreases with h and is consistently lower that other norm-based data-independent bounds. Our bound even improves over VC-dimension for networks with size larger than 1024. While the actual numerical values are very loose, we believe they are useful tools to understand the relative generalization behavior with respect to different complexity measures, and in many cases applying a set of data-dependent techniques, one can improve the numerical values of these bounds significantly (Dziugaite & Roy, 2017; Arora et al., 2018). In the middle and right panel we presented each capacity bound normalized by its maximum in the range of the study for networks trained on CIFAR-10 and SVHN respectively. For both datasets, our capacity bound is the only one that decreases with the size even for networks with about 100 million parameters. All other existing norm-based bounds initially decrease for smaller networks but then increase significantly for larger networks. Our capacity bound therefore could potentially point to the right properties that allow the over-parametrized networks to generalize.

6

Under review as a conference paper at ICLR 2019

measure #epochs probability density

capacity error

0.4 training error test error
0.2

0.0

23

27 211 #hidden units

215

4

unit capacity unit impact

2

0 27 #hidd2e1n1 units 215

1000

SVHN CIFAR10

500

27 211 215 #hidden units

true 200 random 100
0 0.00normali0z.e0d2margin0.04

Figure 4: First panel: Training and test errors of fully connected networks trained on SVHN. Second panel: unit-wise properties measured on a two layer network trained on SVHN dataset. Third panel: number of epochs required to get 0.01 cross-entropy loss. Fourth panel: comparing the distribution of margin of data points normalized on networks trained on true labels vs a network trained on random labels.

1020 CIFAR-10 1017 1014 1011
26 29 212 215 #hidden units

normalized capacity normalized capacity

1.0 CIFAR-10 0.5 0.0
26 #h2id9den 2u1n2its 215

1.0 SVHN 0.5 0.0
27 #hidd2e1n1 units 215

(1) VC-dim (2) 1, (3) Fro (4) spec- 2,1 (5) spec-Fro (6) ours

Figure 5: Left panel: Comparing network capacity bounds on CIFAR10 (unnormalized). Middle panel: Comparing capacity bounds on CIFAR10 (normalized). Right panel: Comparing capacity bounds on SVHN (normalized).

Finally we check the behavior of our complexity measure under a different setting where we compare this measure between networks trained on real and random labels (Neyshabur et al., 2017; Bartlett et al., 2017). We plot the distribution of margin normalized by our measure, computed on networks trained with true and random labels in the last panel of Figure 4 - and as expected they correlate well with the generalization behavior.

3 LOWER BOUND

In this section we will prove a lower bound for the Rademacher complexity of neural networks, that matches the dominant term in the upper bound of Theorem 1. We will show our lower bound on a smaller function class than FW , with an additional constraint on spectral norm of the hidden layer. This allows for comparison with the existing results, and also extends the lower bound to the bigger class FW .
Theorem 3. Define the parameter set

W=

(V, U) | V  R1×h, U  Rh×d, vj

 j,

uj - u0j

2  j ,

U - U0

2  max j
jh

,

and let FW be the function class defined on W by equation (5). Then, for any d = h  m, {j, j}jh=1  R+ and U0 = 0, there exists S = {xi}mi=1  Rd, such that

RS (FW )  RS (FW ) = 

h j=1

j

j

X

F

m

.

Clearly, W  W, since it has an extra constraint. The complete proof is given in the supplementary Section C.3.

The above complexity lower bound matches the first term,

h i=1

i i

m

X

F , in the

upper

bound of

Theorem

1,

upto

1 

,

which

comes

from

the

1 

-Lipschitz

constant

of

the

ramp

loss

l .

7

Under review as a conference paper at ICLR 2019

To match the second term in the upper bound for Theorem 1, consider the setting with c = 1 and  = 0, resulting in,

h
RS (FW ) = R[U0S]+ (FV ) = 
j=1

j u0j X 2 m

=

h j=1

j

uj0X

2

,

m

where FV = {f (x) = Vx | V  R1×h, vj  j}. In other words, when  = 0, the function class FW on S = {xi}im=1 is equivalent to the linear function class FV on [U0  S]+ = {[U0xi]+}im=1, and therefore we have the above lower bound, showing that the upper bound provided in Theorem 1 is tight. It also indicates that even if we have more information, such as bounded spectral norm with respect to the reference matrix is small (which effectively bounds the Lipschitz of the network), we still cannot improve our upper bound.
To our knowledge, all the previous capacity lower bounds for spectral norm bounded classes of neural networks with a scalar output and element-wise activation functions correspond to the Lipschitz constant of the network. Our lower bound strictly improves over this, and shows a gap between the Lipschitz constant of the network (which can be achieved by even linear models), and the capacity of neural networks. This lower bound is non-trivial, in the sense that the smaller function class excludes the neural networks with all rank-1 matrices as weights, and thus shows a ( h)-capacity gap between the neural networks with ReLU activations and linear networks. The lower bound therefore does not hold for linear networks. Finally, one can extend the construction in this bound to more layers by setting all the weight matrices in the intermediate layers to be the Identity matrix.

Comparison with existing results. Bartlett et al. (2017) have proved a Rademacher complexity

lower bound of 

s1s2 X F m

for the function class defined by the parameter set:

Wspec = (V, U) | V  R1×h, U  Rh×d, V 2  s1, U 2  s2 .

(8)

Note that s1s2 is the Lipschitz bound of the function class FWspec . Given Wspec with bounds s1 and s2, choosing  and  such that  2 = s1 and maxi[h] i = s2 results in W  Wspec. Hence we get the following result from Theorem 3, showing a stronger lower bound for this function class as

well.



Corollary 4. h = d  m, s1, s2  0, S  Rd×m such that RS (FWspec ) = 

s1s2 h X F m

.

 Hence our result improves the lower bound inBartlett et al. (2017) by a factor of h. Theorem 7 in Golowich et al. (2017) also gives a (s1s2 c) lower bound, c is the number of outputs of the network, for the composition of 1-Lipschitz loss function and neural networks with bounded spectral norm, or -Schatten norm. Our above result even improves on this lower bound.

4 DISCUSSION
In this paper we present a new capacity bound for neural networks that empirically decreases with the increasing number of hidden units, and could potentially explain the better generalization performance of larger networks. In particular, we focused on understanding the role of width in the generalization behavior of two layer networks. More generally, understanding the role of depth and the interplay between depth and width in controlling capacity of networks, remain interesting directions for future study. We also provided a matching lower bound for the capacity improving on the current lower bounds for neural networks. While these bounds are useful for relative comparison between networks of different size, their absolute values still remain larger than the number of training samples, and it is of interest to get bounds with numerically smaller values.
In this paper we do not address the question of whether optimization algorithms converge to low complexity networks in the function class considered in this paper, or in general how does different hyper parameter choices affect the complexity of the recovered solutions. It is interesting to understand the implicit regularization effects of the optimization algorithms (Neyshabur et al., 2015a; Gunasekar et al., 2017; Soudry et al., 2017) for neural networks, which we leave for future work.

8

Under review as a conference paper at ICLR 2019
REFERENCES
Sanjeev Arora, Rong Ge, Behnam Neyshabur, and Yi Zhang. Stronger generalization bounds for deep nets via a compression approach. arXiv preprint arXiv:1802.05296, 2018.
Francis Bach. Breaking the curse of dimensionality with convex neural networks. Journal of Machine Learning Research, 18(19):1­53, 2017.
Peter L Bartlett and Shahar Mendelson. Rademacher and gaussian complexities: Risk bounds and structural results. Journal of Machine Learning Research, 3(Nov):463­482, 2002.
Peter L Bartlett, Dylan J Foster, and Matus J Telgarsky. Spectrally-normalized margin bounds for neural networks. In Advances in Neural Information Processing Systems, pp. 6241­6250, 2017.
Yoshua Bengio, Nicolas L Roux, Pascal Vincent, Olivier Delalleau, and Patrice Marcotte. Convex neural networks. In Advances in neural information processing systems, pp. 123­130, 2006.
Gintare Karolina Dziugaite and Daniel M Roy. Computing nonvacuous generalization bounds for deep (stochastic) neural networks with many more parameters than training data. arXiv preprint arXiv:1703.11008, 2017.
Noah Golowich, Alexander Rakhlin, and Ohad Shamir. Size-independent sample complexity of neural networks. arXiv preprint arXiv:1712.06541, 2017.
Suriya Gunasekar, Blake E Woodworth, Srinadh Bhojanapalli, Behnam Neyshabur, and Nati Srebro. Implicit regularization in matrix factorization. In Advances in Neural Information Processing Systems, pp. 6152­6160, 2017.
Nick Harvey, Chris Liaw, and Abbas Mehrabian. Nearly-tight vc-dimension bounds for piecewise linear neural networks. arXiv preprint arXiv:1703.02930, 2017.
Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recognition. In Proceedings of the IEEE conference on computer vision and pattern recognition, pp. 770­778, 2016.
Nitish Shirish Keskar, Dheevatsa Mudigere, Jorge Nocedal, Mikhail Smelyanskiy, and Ping Tak Peter Tang. On large-batch training for deep learning: Generalization gap and sharp minima. arXiv preprint arXiv:1609.04836, 2016.
Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton. ImageNet classification with deep convolutional neural networks. In Advances in neural information processing systems (NIPS), pp. 1097­1105, 2012.
Steve Lawrence, C Lee Giles, and Ah Chung Tsoi. What size neural network gives optimal generalization? convergence properties of backpropagation. Technical report, U. of Maryland, 1998.
Jaehoon Lee, Jascha Sohl-dickstein, Jeffrey Pennington, Roman Novak, Sam Schoenholz, and Yasaman Bahri. Deep neural networks as gaussian processes. In International Conference on Learning Representations, 2018.
Tengyuan Liang, Tomaso Poggio, Alexander Rakhlin, and James Stokes. Fisher-rao metric, geometry, and complexity of neural networks. arXiv preprint arXiv:1711.01530, 2017.
Andreas Maurer. A vector-contraction inequality for rademacher complexities. In International Conference on Algorithmic Learning Theory, pp. 3­17. Springer, 2016.
Mehryar Mohri, Afshin Rostamizadeh, and Ameet Talwalkar. Foundations of machine learning. MIT press, 2012.
Vaishnavh Nagarajan and J.Zico Kolter. Generalization in deep networks: The role of distance from initialization. NIPS workshop on Deep Learning: Bridging Theory and Practice, 2017.
Behnam Neyshabur, Ruslan Salakhutdinov, and Nathan Srebro. Path-SGD: Path-normalized optimization in deep neural networks. In Advances in Neural Information Processsing Systems (NIPS), 2015a.
9

Under review as a conference paper at ICLR 2019
Behnam Neyshabur, Ryota Tomioka, and Nathan Srebro. Norm-based capacity control in neural networks. In Proceeding of the 28th Conference on Learning Theory (COLT), 2015b.
Behnam Neyshabur, Ryota Tomioka, and Nathan Srebro. In search of the real inductive bias: On the role of implicit regularization in deep learning. Proceeding of the International Conference on Learning Representations workshop track, 2015c.
Behnam Neyshabur, Srinadh Bhojanapalli, David McAllester, and Nathan Srebro. Exploring generalization in deep learning. In to appear in Advances in Neural Information Processsing Systems (NIPS), 2017.
Behnam Neyshabur, Srinadh Bhojanapalli, and Nathan Srebro. A PAC-bayesian approach to spectrally-normalized margin bounds for neural networks. In International Conference on Learning Representations, 2018.
Roman Novak, Yasaman Bahri, Daniel A. Abolafia, Jeffrey Pennington, and Jascha Sohl-Dickstein. Sensitivity and generalization in neural networks: an empirical study. In International Conference on Learning Representations, 2018.
Daniel Soudry, Elad Hoffer, Mor Shpigel Nacson, Suriya Gunasekar, and Nathan Srebro. The implicit bias of gradient descent on separable data. arXiv preprint arXiv:1710.10345, 2017.
Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdinov. Dropout: a simple way to prevent neural networks from overfitting. Journal of machine learning research, 15(1):1929­1958, 2014.
Chiyuan Zhang, Samy Bengio, Moritz Hardt, Benjamin Recht, and Oriol Vinyals. Understanding deep learning requires rethinking generalization. In International Conference on Learning Representations, 2017.
10

Under review as a conference paper at ICLR 2019

A EXPERIMENTS

A.1 EXPERIMENTS SETTINGS Below we describe the setting for each reported experiment.

ResNet18 In this experiment, we trained a pre-activation ResNet18 architecture on CIFAR-10 dataset. The architecture consists of a convolution layer followed by 8 residual blocks (each of which consist of two convolution) and a linear layer on the top. Let k be the number of channels in the first convolution layer. The number of output channels and strides in residual blocks is then [k, k, 2k, 2k, 4k, 4k, 8k, 8k] and [1, 1, 1, 2, 1, 2, 1, 2] respectively. Finally, we use the kernel sizes 3 in all convolutional layers. We train 11 architectures where for architecture i we set k = 22+i/2 . In each experiment we train using SGD with mini-batch size 64, momentum 0.9 and initial learning rate 0.1 where we reduce the learning rate to 0.01 when the cross-entropy loss reaches 0.01 and stop when the loss reaches 0.001 or if the number of epochs reaches 1000. We use the reference line in the plots to differentiate the architectures that achieved 0.001 loss. We do not use weight decay or dropout but perform data augmentation by random horizontal flip of the image and random crop of size 28 × 28 followed by zero padding.

Two Layer ReLU Networks We trained fully connected feedforward networks on CIFAR-10, SVHN and MNIST datasets. For each data set, we trained 13 architectures with sizes from 23 to 215 each time increasing the number of hidden units by factor 2. For each experiment, we trained the network using SGD with mini-batch size 64, momentum 0.9 and fixed step size 0.01 for MNIST and 0.001 for CIFAR-10 and SVHN. We did not use weight decay, dropout or batch normalization. For experiment, we stopped the training when the cross-entropy reached 0.01 or when the number of epochs reached 1000. We use the reference line in the plots to differentiate the architectures that achieved 0.01 loss.

Evaluations For each generalization bound, we have calculated the exact bound including the logterms and constants. We set the margin to 5th percentile of the margin of data points. Since bounds in Bartlett & Mendelson (2002) and Neyshabur et al. (2015c) are given for binary classification, we multiplied Bartlett & Mendelson (2002) by factor c and Neyshabur et al. (2015c) by factor c to make sure that the bound increases linearly with the number of classes (assuming that all output units have the same norm). Furthermore, since the reference matrices can be used in the bounds given in Bartlett et al. (2017) and Neyshabur et al. (2018), we used random initialization as the reference matrix. When plotting distributions, we estimate the distribution using standard Gaussian kernel density estimation.

A.2 SUPPLEMENTARY FIGURES

Figures 6 and 7 show the behavior of several measures on networks with different sizes trained on SVHN and MNIST datasets respectively. The left panel of Figure 8 shows the over-parametrization phenomenon in MNSIT dataset and the middle and right panels compare our generalization bound to others.

80 40

second layer Spectral Frobenius

20 Distance

10

5 25 #hidd2e9n units 213

first layer 80 40 20 10 5
27 #hidd2e1n1 units 215

1.0

128 256

5

1K

0.5

4K 16K 32K

0

0 angle

to

in4itial

weight2

0.0 0

singula5r value 10

Figure 6: Different measures on fully connected networks with a single hidden layer trained on SVHN. From left to right: measure on the output layer, measures in the first layer, distribution of angle to initial weight in the first layer, and singular values of the first layer.

11

measure probability density

Under review as a conference paper at ICLR 2019

measure

error

80 40

second layer Spectral Frobenius

20 Distance

10

5 25 210 215 #hidden units

first layer 80 40 20 10 5
25 210 215 #hidden units

probability density

15 1.5 32

10

1.0

64 256 1K

5

0.5

4K 16K 32K

0 0angle to in4itial weight2

0.0 0

sing4ular value8

Figure 7: Different measures on fully connected networks with a single hidden layer trained on MNIST. From left to right: measure on the output layer, measures in the first layer, distribution of angle to initial weight in the first layer, and singular values of the first layer.

0.075 training error 0.050 test error 0.025 0.000
23 27 211 215 #hidden units

capacity normalized capacity

1016 1013 1010
25 210 215 #hidden units

1.0 0.5 0.0
25 210 215 #hidden units

(1) VC-dim (2) 1, (3) Fro (4) spec- 2,1 (5) spec-Fro (6) ours

Figure 8: Left panel: Training and test errors of fully connected networks trained on MNIST. Middle panel: Comparing capacity bounds on MNIST (normalized). Left panel: Comparing capacity bounds on MNIST (unnormalized).

B EXTENDING THE GENERALIZATION BOUND TO p NORM

In this section we generalize the Theorem 2 to p norm. The main new ingredient in the proof is the Lemma 10, in which we construct a cover for the p ball with entry-wise dominance.
Theorem 5. For any h, p  2,  > 0,   (0, 1) and U0  Rh×d, with probability 1 -  over the choice of the training set S = {xi}mi=1  Rd, for any function f (x) = V[Ux]+ such that V  Rc×h and U  Rh×d, the generalization error is bounded as follows:



 ch

1 2

-

1 p

L0(f )  L^ (f ) + O~ 

VT p,2

h1 2

-

1 p

U - U0 p,2 X F + m

U0X F

+

 e-ph
m ,

where . p,2 is the p norm of the row 2 norms.



For p of order ln h,

h e-p

 constant improves on the

h additive term in Theorem 2 and

h1 2

-

1 p

VT

 h1 2

-

1 ln h

p,2

VT ln h,2 which is a tight upper bound for

V F and is of the same

order if all rows of V have the same norm - hence giving a tighter bound that decreases with h for

larger values. In particular for p = ln h we get the following bound.

Corollary 6. Under the settings of Theorem 5, with probability 1 -  over the choice of the training set S = {xi}mi=1, for any function f (x) = V[Ux]+, the generalization error is bounded as follows:



 ch

1 2

-

1 ln h

L0(f )  L^ (f ) + O~ 

VT ln h,2

h1 2

-

1 ln h

U - U0 ln h,2 X F + U0X F

m

 



 ch

1 2

-

1 ln h



L^ (f )

+

O~

 

VT ln h,2

h1 2

-

1 ln h

U - U0 

+
ln h,2

U0 2

m



1 m

m i=1

xi

2 2

.



12

Under review as a conference paper at ICLR 2019

C PROOFS

C.1 PROOF OF THEOREM 1
We start by stating a simple lemma which is a vector-contraction inequality for Rademacher complexities and relates the norm of a vector to the expected magnitude of its inner product with a vector of Rademacher random variables. We use the following technical result from Maurer (2016) in our proof.
Lemma 7 (Propostion 6 of Maurer (2016)). Let i be the Rademacher random variables. For any vector v  Rd, the following holds:
 v 2  2 E [| , v |] .
i {±1},i[d]

The above lemma can be useful to get Rademacher complexities in multi-class settings. The below lemma bounds the Rademacher-like complexity term for linear operators with multiple output centered around a reference matrix. The proof is very simple and similar to that of linear separators. See Bartlett & Mendelson (2002) for similar arguments.
Lemma 8. For any positive integer c, positive scaler r > 0, reference matrix V0  Rc×d and set {xi}mi=1  Rd, the following inequality holds:

E
i {±1}c ,i[m]

m
sup i, Vxi
V-V0 F r i=1

 r c X F.

Proof.

m

E sup i, Vxi
i{±1}c,i[m] V-V0 F r i=1

m

=E

sup V, ixi

i{±1}c,i[m] V-V0 F r

i=1

m

=E

sup V - V0 + V0, ixi

i{±1}c,i[m] V-V0 F r

i=1

m

=E

sup V - V0, ixi

i{±1}c,i[m] V-V0 F r

i=1

+E
i {±1}c ,i[m]

m

=E

sup V - V0, ixi

i{±1}c,i[m] V-V0 F r

i=1

+E
i {±1}c ,i[m]

m

=E

sup V - V0, ixi

i{±1}c,i[m] V-V0 F r

i=1

m

r E
i {±1}c ,i[m]

ixi
i=1


(i) m
 r E  ixi
i{±1}c,i[m] i=1

F
2 1/2

F


c


m

2 1/2

= r

E  ixi

j=1 {±1}m i=1



=r c X F.


F

(i) follows from the Jensen's inequality.

m

sup V0, ixi

V0 F r

i=1

m

V0, ixi

i=1

13

Under review as a conference paper at ICLR 2019

We next show that the Rademacher complexity of the class of networks defined in (5) and (4) can be decomposed to that of hidden units.
Lemma 9 (Rademacher Decomposition). Given a training set S = {xi}mi=1 and  > 0, Rademacher complexity of the class FW defined in equations (5) and (4) is bounded as follows:

2h

RS (



 FW )



m

E
j=1 i{±1}c,i[m]

m
sup (ij + j xi 2) i, vj
vj 2j i=1



2h

m

+

m

j=1

E
{±1}m



sup ij
uj -uj0 2j i=1

uj, xi  .

Proof. Let ij = uj0, xi . We prove the lemma by showing the following statement by induction on t:

mRS (   FW )



2 t-1 h



E  sup
i{±1}c,i[m] (V,U)W



i=1

((ij
j=1

+ j

xi 2) i, vj

+ i1j

uj , xi )

m
+ i1  (V[Uxi]+, yi)
i=t

=E

sup t1  (V[Uxt]+, yt) + V,U ,

i{±1}c,i[m] (V,U)W

where for simplicity of the notation,

we let V,U

2 

t-1 i=1

h j=1

((ij

+

j

xi 2) i, vj

+ i1j

uj, xi ) +

m i=t+1

i1

 (V[Uxi]+, yi).

=

The above statement holds trivially for the base case of t = 1 by the definition of the Rademacher complexity (3). We now assume that it is true for any t  t and prove it is true for t = t + 1.

mRS (   FW ) 

E

sup t1  (V[Uxt]+, yt) + V,U

i{±1}c,i[m] (V,U)W

1

=

2

E
i {±1}c ,i[m]



1 2

E
i {±1}c ,i[m]

sup  (V[Uxt]+, yt) -  (V [U xt]+, yt) + V,U + V ,U

(V,U),(V ,U )W



sup
(V,U),(V ,U )W

2 

V[Uxt]+ - V [U xt]+ 2 + V,U + V ,U

.

(9)



The last inequality follows from the

2 

Lipschitzness

of

the

ramp

loss.

The ramp loss is 1/

Lipschitz with respect to each dimension but since the loss at each point only depends on score of the

correct labels and the maximum score among other labels, it is

2 

-Lipschitz.

Using the triangle inequality we can bound the first term in the above bound as follows.

V[Uxt]+ - V [U xt]+ 2  V[Uxt]+ - V [Uxt]+ + V [Uxt]+ - V [U xt]+ 2  V[Uxt]+ - V [Uxt]+ 2 + V [Uxt]+ - V [U xt]+ 2
h
 [ uj , xt ]+vj - [ uj , xt ]+vj 2 + [ uj , xt ]+vj - [ uj , xt ]+vj 2
j=1

h



|[ uj, xt ]+|

vj - vj

+
2

[ uj , xt ]+ - [ uj , xt

]+

vj

.
2

j=1

(10)

14

Under review as a conference paper at ICLR 2019

We will now add and subtract the initialization U0 terms.

V[Uxt]+ - V [U xt]+ 2
h
 uj + uj0 - u0j , xt
j=1

vj - vj

+
2

[ uj, xt ]+ - [

uj , xt

]+

h
 (j xt 2 + ij ) vj - vj 2 + j uj , xt - uj , xt .
j=1

From equations (9), (10), (11) and Lemma 7 we get,

vj 2 (11)

mRS (   FW )

E
i {±1}c ,i[m]

2h

sup
(V,U),(V ,U

)W



(j
j=1

xy 2 + tj ) t, vj

+ t1j uj , xt + V,U . (12)

This completes the induction proof.

Hence the induction step at t = m gives us:



mRS (   FW ) 

E

 

i{±1}c,i[m] 

sup
uk -u0k 2 k

2m h  (ij + j
i=1 j=1

vk 2k ,k[h]

2h

=



E
j=1 i{±1}c,i[m]

m
sup (ij + j xi 2) i, vj
vj 2j i=1



2h

m

+



j=1

E
{±1}m



sup ij
uj -u0j 2j i=1

uj, xi  .

xi 2) i, vj

+ i1j



uj , xi

 



Proof of Theorem 1. Using Lemma 8, we can bound the the right hand side of the upper bound on the Rademacher complexity given in Lemma 9:

mRS (



 FW )



2 

h
E
j=1 i{±1}c,i[m]

m
sup (ij + j xi 2) i, vj
vj 2j i=1



2h

+



E
j=1 {±1}m

m
sup ij
uj -u0j 2j i=1

 uj , xi 

  2 2c


h
j

j

X F+

u0j X 2

2 +


h
j j

j=1

j=1

  2 2c + 2


h

j

j

X F+

uj0X 2

.

j=1

XF

C.2 PROOF OF THEOREMS 2 AND 5
We start by the following covering lemma which allows us to prove the generalization bound in Theorem 5 without assuming the knowledge of the norms of the network parameters. The following lemma shows how to cover an p ball with a set that dominates the elements entry-wise, and bounds the size of a one such cover.
15

Under review as a conference paper at ICLR 2019

Lemma 10 ( p covering lemma). Given any , D,  > 0, p  2, consider the set SpD, = {x  RD |

x p  }. Then there exist N sets {Ti}Ni=1 of the form Ti = {x  RD | |xj|  ji , j  [D]}

such that SpD, 

N i=1

Ti

and

i 2  D1/p-1/2(1 + ), i  [N ] where N =

K +D-1 D-1

and

D K = (1 + )p - 1 .

Proof. We prove the lemma by construction.

Consider the set Q =

  RD | iip  {jp/K}Kj=1 ,



p p

=

p(1

+

D/K )

.

For any x  Sp,, consider 

such that for any i  [D], i =

|xpi |K
p

p K

1/p
. It is clear that |xi|  i. Moreover, we have:

D



p p

=

i=1

|xip|K p

p K

D


|xpi |K p

+1

i=1

=

x

p p

+

Dp K

 p

D 1+

K

p K

Therefore, we have   Q. Furthermore for any   Q, we have:  2  D1/2-1/p  p  D1/2-1/p (1 + (1 + )p - 1)1/p = D1/2-1/p(1 + )

Therefore, to complete the proof, we only need to bound the size of the set Q. The size of the set Q is

equal to the number of unique solutions for the problem

D i=1

zi

=

K

+

D

-

1

for

non-zero

integer

variables zi, which is

K +D-2 D-1

.

Lemma 11. For any h, p  2, d, c, , µ > 0,  (0, 1) and U0  Rh×d, with probability 1 - 

over the choice of the training set S = {xi}im=1  Rd, for any function f (x) = V[Ux]+, such that V  Rc×h,U  Rh×d, V p,2  C1, U - U0 p,2  C2, the generalization error is bounded as

follows:

 2( 2c

+

1)(µ

+

1)

2 p

h

1 2

-

1 p

C1

h

1 2

-

1 p

C2

L0(f )  L^ (f ) +

 m

X F+

U0X F

+ 3 2 ln Np,h + ln(2/) , 2m

where Np,h =

h/µ +h-2 h-1

and

. p,2 is the

p norm of the column

2 norms.

Proof. The proof of this lemma follows from using the result of Theorem 1 and taking a union bound to cover all the possible values of {V | V p,2  C1} and U = {U | U - U0 p,2  C2}.

Note that x  Rh and p  2, we have

x

2



h1 2

-

1 p

x p. Recall the result of Theorem 1, given

any fixed , , we have



2 2c + 2

RS (   FW )  m

2

2

2c

+

2

h

1 2

-

1 p

m

 2 X F + U0X F

p

h1 2

-

1 p

p

X F+

U0X F

,

(13)

16

Under review as a conference paper at ICLR 2019

By Lemma 10, picking

=

((1

+

µ)1/p

- 1),

we

can

find

a

set

of

vectors,

{i

}Np,h
i=1

,

where

K=

h µ

, Np,h =

K +h-2 h-1

such that x,

x p  C1, 1  i  Np,h, xj  ji , j  [h].

Similarly, picking

=

((1 + µ)1/p - 1), we can find a set of vectors,

{

i

}Np,h
i=1

,

where K

=

h µ

, Np,h =

K +h-2 h-1

such that x,

x p  C2, 1  i  Np,h, xj  ji, j  [h].

Lemma 12. For any h, p  2, c, d, , µ > 0,   (0, 1) and U0  Rh×d, with probability 1 - 

over the choice of the training set S = {xi}mi=1  Rd, for any function f (x) = V[Ux]+ such that V  Rc×h and U  Rh×d, the generalization error is bounded as follows:

L0(f )



L^ (f )

+

 4( 2c

+

1)(µ

+

2
1) p

(h

1 2

-

1 p

V

p,2

+

1)(h 

1 2

-

1 p

U - U0 p,2

X F+

U0X + 1) F

m



+3

ln Np,h + ln(

m/) ,

m

(14)

where Np,h =

h/µ +h-2 h-1

and

. p,2 is the

p norm of the column

2 norms.

Proof.

This

lemma

can


be

proved

by

directly

applying

union

bound

on

Lemma


11

with

for

every

C1



| i i
h1/2-1/p

m 4

and every C2 

| i i
h1/2-1/p X F

m 4

. For V p,2 

,1
h1/2-1/p

we

can

use

the

bound

where

C1

=

1,

and

the

additional

constant

1

in

Eq.

14

will

cover

that. The same is true for the case of

U p,2 


i h1/2-1/p

X

. When any of h1/2-1/p
F

V

p,2 and

h1/2-1/p X F

U p,2 is larger than

m 4

, the second term in Eq. 14 is larger than 1 thus holds

trivially.

For

the

rest

of

the

case,

there

exists

(C1,

C2)

such

that

h1/2-1/pC1

 h1/2-1/p


V

p,2 + 1

and h1/2-1/pC2  h1/2-1/p

XF

XF

U

p,2

+ 1.


Finally,


we have

m 4



1

otherwise the

second term in Eq. 14 is larger than 1. Therefore,

m 4





m 4

+1





m 2

.

We next use the general results in Lemma 12 to give specific results for the case p = 2.

Lemma 13. For any h  2, c, d,  > 0,   (0, 1) and U0  Rh×d, with probability 1 -  over the

choice of the training set S = {xi}im=1  Rd, for any function f (x) = V[Ux]+ such that V  Rc×h and U  Rh×d, the generalization error is bounded as follows:



L0(f )  L^ (f ) + 3 2( 2c + 1)( V

F

+ 1)(

U- 

U0

F

m

 + 3 5h + ln( m/) ,
m

X F+

U0X F + 1)

(15)

Proof. To prove the lemma, we directly upper bound the generalization bound given in Lemma 12

for

p

=

2

and

µ

=

32 4

-

1.

For

this

choice

of

µ

and

p,

we

have

4(µ

+

1)2/p



3

2 and ln Np,h is

bounded as follows:

ln Np,h = ln

h/µ + h - 2 h-1

 ln

h/µ + h - 2 h-1 e h-1

= (h - 1) ln

h/µ - 1 e+e h-1

 (h - 1) ln

h/µ e + eh - 1

 h ln(e + 2e/µ)  5h

Proof of Theorem 2. The proof directly follows from Lemma 13 and using O~ notation to hide the constants and logarithmic factors.
Next lemma states a generalization bound for any p  2, which is looser than 13 for p = 2 due to extra constants and logarithmic factors.
17

Under review as a conference paper at ICLR 2019

Lemma 14. For any h, p  2, c, d,  > 0,   (0, 1) and U0  Rh×d, with probability 1 -  over the choice of the training set S = {xi}mi=1  Rd, for any function f (x) = V[Ux]+ such that V  Rc×h and U  Rh×d, the generalization error is bounded as follows:

 4e2( 2c

+

1)(h

1 2

-

1 p

V

L0(f )  L^(f ) +

p,2 + 1)

h1 2

-

1 p



U - U0 p,2

X F+

U0X F + 1

m

e1-ph - 1

 ln (eh) + ln( m/)

+3 ,

m

(16)

. p,2 is the p norm of the column 2 norms.

Proof. To prove the lemma, we directly upper bound the generalization bound given in Lemma 12 for µ = ep - 1. For this choice of µ and p, we have (µ + 1)2/p = e2. Furthermore, if µ  h, Np,h = 0, otherwise ln Np,h is bounded as follows:

ln Np,h = ln

h/µ + h - 2

h-1

= ln

h/µ + h - 2 h/µ - 1

 ln

h/µ + h - 2 h/µ -1 e
h/µ - 1

= ( h/(ep - 1) - 1) ln

h-1 e + e h/(ep - 1) - 1

 ( e1-ph - 1) ln (eh)

Since the right hand side of the above inequality is greater than zero for µ  h, it is true for every µ > 0.

Proof of Theorem 5. The proof directly follows from Lemma 14 and using O~ notation to hide the constants and logarithmic factors.

C.3 PROOF OF THE LOWER BOUND

Proof of Theorem 3. We will start with the case h = d = 2k, m = n2k for some k, n  N.

We will pick V = 

= [1 . . . 2k ] for every , and S = {xi}im=1, where xi := e

i n

. That is, the

whole dataset are divides into 2k groups, while each group has n copies of a different element in

standard orthonormal basis.

We further define j() =

jn
i, j  [2k] and F = (f1, f2, . . . , f2k ) 

(j-1)n+1

{-2-k/2, 2-k/2}2k×2k be the Hadamard matrix which satisfies fi, fj = ij. Note that for

s  Rd, sj = jj, j  [d], it holds that

i  [d],

max{ s, fi

,

s, -fi

}



1 2

(

s, [fi]+

+

s, [-fi]+ ) =

2k j=1

sj

|fji|

=

2-

k 2

-1



.

2

Thus without loss of generality, we can assume i  [2k],

s, fi



2

k 2

-1

 by flipping the signs

of fi.

For any   {-1, 1}n, let Diag() be the square diagonal matrix with its diagonal equal to  and

F() be the following:

F() := [f1, f2, . . . , f2k ] such that if i()  0, fi = fi, and if i() < 0, fi = 0,
and we will choose U() as Diag() × F(). Since F is orthogonal, by the definition of F(), we have F() 2  1 and the 2-norm of each row of F is upper bounded by 1. Therefore, we have U() 2  Diag() 2 F() 2  maxi i, and

18

Under review as a conference paper at ICLR 2019

ui - u0i 2 = ui 2  i ei F(~) 2  i. In other words, f (x) = V[U()x]+  FW . We will omit the index when it's clear.

Now we have

n 2k jn

2k

iV[Uxi]+ =

iV[Uxi]+ =

j ()V[Uej ]+ .

i=1 j=1 i=(j-1)n+1 j=1

Note that

j V[Uej ]+ = j

Diag(), [fj]+

=

j

s, [fj]+

1

j >0



2-

k 2

-1



[ j ]+.

The last inequality uses the previous assumption, that i  [2k],

s, fi



2-

k 2

-1

.

Thus,

m

mRS (FW2 )  E

iV[U()xi]+

{±1}m i=1

 2k







2-

k 2

-1

E

 [ j()]+

{±1}m j=1

=



2

k 2

-1

E

[[ 1()]+]

{±1}n

=



2

k 2

-2

E

[| 1()|]

{±1}n





2

k-1 2

-2

 n



  2d m =
8 d

  2m =
8

where the last inequality is by Lemma 7.

For arbitrary d = h  m, d, h, m  Z+, let k =

log2 d , d = h = 2k, m =

m 2k

 2k. Then we

have h



h 2

,

m



m 2

.

Thus

there

exists

S



[h],

such

that

iS ii 

h i=1

ii.

Therefore

we

can pick h hidden units out of h hidden units, d samples out of m to construct a lower bound of

input dimensions

iS i i
8

2m



out of



 16

m.

d

dimensions,

m

input

19

