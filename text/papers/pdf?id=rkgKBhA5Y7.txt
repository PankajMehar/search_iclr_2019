Under review as a conference paper at ICLR 2019
THERE ARE MANY CONSISTENT EXPLANATIONS OF UNLABELED DATA: WHY YOU SHOULD AVERAGE
Anonymous authors Paper under double-blind review
Abstract
Presently the most successful approaches to semi-supervised learning are based on consistency regularization, whereby a model is trained to be robust to small perturbations of its inputs and parameters. The consistency loss dramatically improves generalization performance over supervised-only training; however, we show that SGD struggles to converge on the consistency loss and continues to make large steps that lead to changes in predictions on the test data. We show that averaging weights can significantly improve their generalization performance. Motivated by these observations, we propose to train consistency-based methods with Stochastic Weight Averaging (SWA), a recent approach which averages weights along the trajectory of SGD with a modified learning rate schedule. We also propose fast-SWA, which further accelerates convergence by averaging multiple points within each cycle of a cyclical learning rate schedule. With weight averaging, we achieve the best known semi-supervised results on CIFAR-10 and CIFAR-100 over many different settings of training labels. For example, we achieve 5.0% error on CIFAR-10 with only 4000 labels, compared to the previous best result in the literature of 6.3%.
1 INTRODUCTION
Recent advances in deep unsupervised learning, such as generative adversarial networks (GANs) (Goodfellow et al., 2014), have led to an explosion of interest in semi-supervised learning. Semisupervised methods make use of both unlabeled and labeled training data to improve performance over purely supervised methods. Semi-supervised learning is particularly valuable in applications such as medical imaging, where labeled data may be scarce and expensive (Oliver et al., 2018). Currently the best semi-supervised results are obtained by consistency-enforcing approaches (Bachman et al., 2014; Laine and Aila, 2017; Tarvainen and Valpola, 2017; Miyato et al., 2017; Park et al., 2017). These methods use unlabeled data to stabilize their predictions under input or weight perturbations. Consistency-enforcing methods can be used at scale with state-of-the-art architectures. For example, the recent Mean Teacher (Tarvainen and Valpola, 2017) model has been used with the Shake-Shake (Gastaldi, 2017) architecture and has achieved the best semi-supervised performance on the consequential CIFAR benchmarks. This paper is dedicated to the understanding consistency-based semi-supervised learning methods. We provide several novel observations about the training objective and optimization trajectories of the popular  (Laine and Aila, 2017) and Mean Teacher (Tarvainen and Valpola, 2017) consistency-based models. Inspired by these findings, we propose to improve SGD solutions via stochastic weight averaging (SWA) (Izmailov et al., 2018), a recent method that averages weights of the networks corresponding to different training epochs to obtain a single model with improved generalization. On a thorough empirical study we show that this procedure achieves the best known semi-supervised results on consequential benchmarks. In particular, our contributions are the following:
· We show in Section 3.1 that a simplified  model implicitly regularizes the norm of the Jacobian of the network outputs with respect to both its inputs and its weights, which in turn encourages flatter solutions. Both the reduced Jacobian norm and flatness of solutions have been related to generalization in the literature (Sokolic´ et al., 2017; Novak et al., 2018; Chaudhari et al., 2016; Schmidhuber and Hochreiter, 1997; Keskar et al., 2017; Izmailov et al., 2018). Interpolating between the weights corresponding to different epochs of training
1

Under review as a conference paper at ICLR 2019
we demonstrate that the solutions of  and Mean Teacher models are indeed flatter along these directions (Figure 1b). · In Section 3.2, we compare the training trajectories of the , Mean Teacher, and supervised models and find that the distances between the weights corresponding to different epochs are much larger for the consistency based models. The error curves of consistency models are also more wider (Figure 1b), which can be explained by flatness of the solutions discussed in section 3.1. Further we observe that the predictions of the SGD iterates can differ significantly between different iterations of SGD. · The observation that SGD struggles to converge to an isolated solution for consistency-based methods motivates us to apply ensembling to the predictions of SGD iterates or average their weights. Averaging weights of SGD iterates allows to compensate for larger steps, stabilize SGD trajectories and obtain a solution that is centered in a vast flat region of the loss in the weight space. Further, both ensembling and weight averaging allow us to make use of the improved diversity of the SGD iterates and obtain a solution that is centered in the prediction space. In Section 3.3 we demonstrate that both ensembling predictions and averaging weights of the networks corresponding to different training epochs significantly improve generalization performance and find that the improvement is much larger for the  and Mean Teacher models compared to supervised training. We find that averaging weights provides similar or larger benefits compared to ensembling, while being more practical. Thus, we focus on weight averaging for the remaining of the paper. · Motivated by our observations in Section 3 we propose to apply Stochastic Weight Averaging (SWA) (Izmailov et al., 2018) to the  and Mean Teacher models. Based on our results in Section 3.3 we propose several modifications to SWA in Section 4 and refer to the modified procedure as fast-SWA: we use a learning rate schedule with longer cycles to increase the distance between the weights that are averaged and the diversity of the corresponding predictions; we also average weights of multiple networks within each cycle while SWA only averages the weights corresponding to the lowest values of the learning rate within each cycle. In Section 5, we show that fast-SWA improves the performance substantially faster than SWA. · Applying weight averaging to the  and Mean Teacher models we improve the best reported results on CIFAR-10 for 1k, 2k, 4k and 10k labeled examples, as well as on CIFAR-100 with 10k labeled examples. For example, we obtain 5.0% error on CIFAR-10 with only 4k labels, improving the best result reported in the literature (Tarvainen and Valpola, 2017) by 1.3%. We also apply weight averaging to a state-of-the-art domain adaptation technique (French et al., 2018) closely related to the Mean Teacher model and improve the best reported results on domain adaptation from CIFAR-10 to STL from 19.9% to 16.8% error. · We will release our code to replicate the experiments upon publication.
2 BACKGROUND
2.1 CONSISTENCY BASED MODELS We briefly review semi-supervised learning with consistency-based models. This class of models encourages predictions to stay similar under small perturbations of inputs or network parameters. For instance, two different translations of the same image should result in similar predicted probabilities. The consistency of a model (student) can be measured against its own predictions (e.g.  model) or predictions of a different teacher network (e.g. Mean Teacher model). In both cases we will say a student network measures consistency against a teacher network
Consistency Loss In the semi-supervised setting, we have access to labeled data DL = {(xLi , yiL)}Ni=L1, and unlabeled data DU = {xUi }Ni=U1. Given two perturbed inputs x0, x00 of x and the perturbed weights wf0 and wg0 , the consistency loss penalizes the difference between the student's predicted probablities f (x0; wf0 ) and the teacher's
2

Under review as a conference paper at ICLR 2019

g(x00; wg0 ). This loss is typically the Mean Squared Error or KL divergence:

`cMoSnsE(wf , x) = kf (x0; wf0 ) g(x00, wg0 )k2 or `cKoLns(wf , x) = KL(f (x0; wf0 )||g(x00, wg0 )) . (1)

The total loss used to train the model can be written as

X

L(wf ) =

`CE(wf , x, y) +

X `cons(wf , x),

(2)

|(x,y)2DL {z
LCE

} |x2DL[DU {z
Lcons

}

where for classification LCE is the cross entropy between the model predictions and supervised training labels. The parameter > 0 controls the relative importance of the consistency term in the overall loss.

 Model The  model, introduced in Laine and Aila (2017) and Sajjadi et al. (2016), uses the student model f as its own teacher. The data (input) perturbations include random translations, crops, flips and additive Gaussian noise. Binary dropout (Srivastava et al., 2014) is used for weight perturbation.

Mean Teacher Model The Mean Teacher model (MT) proposed in Tarvainen and Valpola (2017)

uses the same data and weight perturbations as the  model; however, the teacher weights wg are

the exponential moving average (EMA) of The decay rate  is usually set between 0.9

the student and 0.999.

TwheeigMhtesawn fT:eawcgkhe=r

mo·dwelgkha1s+the(1bestk)n·owwfkn.

results on the CIFAR-10 semi-supervised learning benchmark.

Other Consistency-Based Models Temporal Ensembling (TE) (Laine and Aila, 2017) uses an exponential moving average of the student outputs as the teacher outputs in the consistency term for training. Another approach, Virtual Adversarial Training (VAT) (Miyato et al., 2017), enforces the consistency between predictions on the original data inputs and the data perturbed in an adversarial direction x0 = x + radv, where radv = arg maxr:krk=1 KL[f (x, w)kf (x + r, w)].

3 UNDERSTANDING CONSISTENCY-ENFORCING MODELS

In Section 3.1, we study a simplified version of the  model theoretically and show that it penalizes the norm of the Jacobian of the outputs with respect to inputs as well as the eigenvalues of the Hessian both of which have been related to generalization in the literature (Sokolic´ et al., 2017; Novak et al., 2018; Dinh et al., 2017; Chaudhari et al., 2016). In Section 3.2 we empirically study the training trajectories of the  and MT models and compare them to the training trajectories in supervised learning. We show that even late in training consistency-based methods make large training steps leading to significant changes in predictions on test. In section 3.3 we show that averaging weights or ensembling predictions of the models proposed by SGD at different training epochs can lead to substantial gains in accuracy and that these gains are much larger for  and MT than for supervised training.

3.1 SIMPLIFIED  MODEL PENALIZES LOCAL SHARPNESS

Penalization of the input-output Jacobian norm Consider a simple version of the  model,

where we only apply small additive perturbations to the student inputs: x0 = x + z, z  N (0, I)

with   1, and the teacher input is unchanged: x00 = x.1 Then the consistency loss `cons

(liEmq.!10 )12bme1coPmime=s1

`cons(w, `cons(w,

x, xi

) = kf (w, , ), we show

x in

+ z) f (w, x)k2 Section A.5 that


.

Consider the estimator Q^ = 

E[Q^] = Ex[kJxk2F ]

and

Var[Q^]

=

1 m

Var[kJxk2F ] + 2E[kJxT Jxk2F ] ,

where Jx is the Jacobian of the network's outputs with respect to its inputs evaluated at x, k · kF represents Frobenius norm and the expectation Ex is taken over the distribution of labeled and

1This assumption can be relaxed to x00 = x + z2 z2  N (0, I) without changing the results of the analysis since (z1 z2) = 2z¯ with z¯  N (0, I)

3

Under review as a conference paper at ICLR 2019

unlabeled minibatch

data. That is, Q^ is size m. Therefore,

tahneucnobnisaissetednecsytilmosastoimr oplficEitxl[ykJpexnka2Fli]zwesitEhxv[akrJiaxnkc2Fe].controlled

by

the

The quantity ||Jx||F has been related to generalization both theoretically (Sokolic´ et al., 2017)

and empirically (Novak et al., 2018). For linear models f (x) = W x, penalizing ||Jx||F exactly

corresponds to weight decay, also known as L2 regularization, since for linear models Jx = W , and

rkeWgukla2Fri=zatkivoenci(nW(Z)kh22u.

ePteanla.,li2z0in0g3)Ewx[hkiJchxku2Fse] sisthaelsgorcalpohseLlyaprlealcaitaend

to to

the graph based (manifold) approximate Ex[krMf k2]

for nonlinear models, making use of the manifold structure of unlabeled data. While isotropic

perturbations investigated in this simplified model  will not in general lie along the data manifold,

more targeted perturbations like image translations can be used to penalize gradients along the

manifold.

Penalization of the Hessian's eigenvalues Now, instead of the input perturbation, consider the

weight perturbation w0 = w + z. Similarly, the consistency loss is an unbiased estimator for

sEexc[tkioJnwAk2F.6],wwehsehroewJwthaist

the Jacobian of the network outputs with for the MSE loss, the expected trace of the

respect Hessian

to of

the the

weights w. In loss Ex[tr(H)]

coeatfnaalb.sei(m2d0pe1cli7ofi)meadpnodseCmdhoiandutedolhtpaweroineatetlirazmle.ss(,2Eo0xn1[ek6oJ),fwtwhkF2ehi]ec,ihgiteiasnlvEsaoxlu[pkeeJsnwaolkfi2FzHe].seAEnsxco[mtdri(enHitmh)e]i.zliAoncgsaptlhoieninfcotoerndmsoiasuttietoninncyaDblioonushst

sharpness of the loss for a given solution w. Consequently, the quantity tr(H) which is the sum of

the Hessian eigenvalues is related to the notion of sharp and flat optima, which has recently gained

attention as a proxy for generalization performance (see e.g. Schmidhuber and Hochreiter, 1997;

Keskar et al., 2017; Izmailov et al., 2018). Thus, based on our analysis, the consistency loss in the

simplified  model encourages flatter solutions.

3.2 ANALYSIS OF SOLUTIONS ALONG SGD TRAJECTORIES In the previous section we have seen that in a simplified  model, the consistency loss encourages several desirable properties that have been related to generalization. In this section we analyze the properties of minimizing the consistency loss in a practical setting. Specifically, we explore the trajectories followed by SGD for the consistency-based models and compare them to the trajectories in supervised training.

MT CE

101

MT Cons Sup

100

CE Cons

10 1
0 50 100 150 Epoch
(a) Gradient Norm

60 Sup
50
40 MT

Train Test

30

20

10

0
30 20 10 0 10 20 30 Ray distance

(b) SGD-SGD Rays

50
40
30
20
10
0 0 5 10 15 20 25 30 Ray distance
(c)  model

50 SGD ! SGD
40 Random Adversarial
30
20 Train
10 Test
0 0 5 10 15 20 25 30 Ray distance
(d) Supervised model

Figure 1: (a): The evolution of the gradient norm for the consistency regularization term (Cons) and the cross-entropy term (CE) in the , MT, and supervised models during training. (b): Train and test errors along rays connecting two SGD solutions for each respective model. (c) and (d): Comparison of errors along rays connecting two SGD solutions, random rays, and adversarial rays. See Section A.1 for the analogous plot for the Mean Teacher model.

We train our models on CIFAR-10 using 4k labeled data for 180 epochs. The  and Mean Teacher models use 46k data points as unlabeled data (see Sections A.8 and A.9 for details). First, in Figure 1a we visualize the evolution of norms of the gradients of the cross-entropy term krLCEk and consistency term krLconsk along the trajectories of the , MT, and supervised models. We observe that krLConsk remains high until the end of training and dominates the gradient krLCEk of the cross-entropy term for the  and MT models. Further, for both the  and MT models, krLConsk is much larger than in supervised training, implying that the  and MT models are making substantially larger steps until the end of training. These larger steps suggest that rather than converging to a single

4

Gradient Norm Error Rate Error Rate Error Rate

Under review as a conference paper at ICLR 2019

minimizer, SGD continues to actively explore a large set of solutions in a flat region of loss when applied to consistency-based methods.

To get more insight into the observed phenomenon we analyze the behavior of train and test errors in the region of weight space around the solutions of the  and Mean Teacher models. First, we consider the one-dimensional rays (t) = t · w180 + (1 t)w170, t 0, connecting the weight vectors w170 and w180 corresponding to epochs 170 and 180 of training. We visualize the train (measured on the labeled data) and test errors as functions of the distance from the weights w170 in Figure 1b. We observe that the distance between the weight vectors w170 and w180 is much larger for the semi-supervised methods compared to supervised training, which is consistent with our observation that optimization takes larger steps in  and MT models. Further, we observe that the train and test error surfaces are much wider along the directions connecting w170 and w180 for the consistency-based methods compared to supervised training. One possible explanation for the increased width is the effect of the consistency loss on the Jacobian of the network and the eigenvalues of the Hessian of the loss discussed in section 3.1. We also observe that the test errors of interpolated weights can be lower than errors of the two SGD solutions between which we interpolate. This error reduction is larger in the consistency models (Figure 1b).

We also analyze the error surfaces along random and adversarial rays starting at the SGD solution

w180 for each model. For the random rays we sample 5 random vectors d from the unit sphere

and calculate the With adversarial

average rays we

train and test errors of the network with evaluate the error along the directions of

wtheeigfhaststewstt1as+cesndt

for s 2 [0, 30]. of test or train

loss dadv are much

=wi|d|rrerLLCCthEEa|n| .

Interestingly, we observe that supervised training solutions

while along

the the

solutions of the  and SGD-SGD directions

MT models (Figure 1b),

their widths along random and adversarial rays are comparable (Figure 1c, 1d) which seemingly

contradicts our results in section 3.1. Observe however, that the total number of optimization steps and

correspondingly the number of weight perturbations applied in training is several orders of magnitude

smaller than the dimensionality of the weight space. Thus, a random direction in the weight space

would with very high probability be orthogonal to all the weight perturbations considered during

training and the width along this direction would not be penalized.

Additionally, we analyze whether the larger optimization steps for the  and MT models translate into hmN1igoPhdeeNirl=sd1divifef[reysri(i.twyW1i)ne=6 pforyeudi(nwidc2t)tih]o,anttsh.feoWrfretahcdeteifionnaeondfdivtMeesrTtsistmaymoodpfelaelsps,awtihrheoefDremivtoehdreseipltsyrew(wd1i1,c7wt0e2,dwalsa1b8D0ei)lvsiesbrse7it.tw1y%e(ewna1n,tdhwe62.t)1w%=o of the test data points respectively, which is much higher than 3.9% in supervised learning. The increased diversity in the predictions of the networks traversed by SGD supports our conjecture that for the  and MT models SGD struggles to converge to a single solution and continues to actively explore the set of plausible solutions until the end of training.

3.3 ENSEMBLING AND WEIGHT AVERAGING In Section 3.2, we observed that the  and MT models continue taking large steps in the weight space at the end of training. Not only are the distances between weights larger, we observe these models to have higher diversity. In this setting, using the last SGD iterate to perform prediction is not ideal since many solutions explored by SGD are equally accurate but produce different predictions.

Ensembling As mentioned in Section 3.2, the diversity in predictions is significantly larger for the

 and Mean Teacher models compared to purely supervised learning. The diversity of these iterates

suggests that we can achieve greater benefits from ensembling. We use the same CNN architecture

and hyper-parameters as in Section 3.2 but extend the training time by doing 5 learning rate cycles

of 30 epochs after the normal training ends at epoch 180 (see A.8 and A.9 for details). We sample

random pairs of weights w1, w2 from epochs 180, 183, . . . , 330 and measure the error reduction

Ffriogmureen2scemwbelivnigsuthaeliszeepCaiernss,oafgmaiondsetltsh,eCdenivs ersi12tyErorf(wth1e)c+or21reEsrpro(wnd2i)ng

Err (Ensemble(w1, pair of models. We

w2)). In observe

a strong correlation between the diversity in predictions of the constituent models and ensemble

performance, and therefore Cens is substantially larger for  and Mean Teacher models. As shown in (Izmailov et al., 2018), ensembling can be well approximated by weight averaging if the weights are

close by.

5

Under review as a conference paper at ICLR 2019

Weight Averaging First, we experiment on averaging random pairs of weights at the end of

training and analyze the performance with respect to the weight distances. Using the the same pairs

from above, we evaluate the performance of the model formed by averaging the pairs of weights,

Cavg(w1, w2)  if Cavg(w1, w2)

1 2

Err(w1) + 0 for any

21pEairrr(owf 2p)oinEtsrrw121,ww12+, th12ewn2by.

Note that Jensen's

Cavg is a proxy for convexity: inequality the error function

is convex (see Figure 2 left). While the error surfaces for neural networks are known to be highly

non-convex, they may be approximately convex in the region traversed by SGD late into the training

(Goodfellow et al., 2015). In fact, in Figure 2b, we find that the error surface of the SGD trajectory

is approximately convex due to Cavg(w1, w2) being mostly positive. Here we also observe that the distances between pairs of weights are much larger for the  and MT models than for the supervised

training; and as a result, weight averaging achieves a larger gain for these models.

In section 3.2 we observed that for the  and Mean Teacher models SGD traverses a large flat region of the weight space late in training. Being very high-dimensional, this set has most of its volume concentrated near its boundary. Thus, we find SGD iterates at the periphery of this flat region (see Figure 2d). Averaging the SGD iterates (shown in red in Figure 2d) we can move towards the center (shown in blue) of the flat region, stabilizing the SGD trajectory and improving the width of the resulting solution and consequently generalization.

w1 w2

C

(a) Convex vs. non-convex (b) Cavg vs. ||w1 w2||

(c) Cens vs. diversity

(d) Gain from flatness

Figure 2: (a): Illustration of a convex and non-convex function and Jensen's inequality. (b): Scatter plot of the decrease in error Cavg for weight averaging versus distance. (c): Scatter plot of the decrease in error Cens for prediction ensembling versus diversity. (d): Train error surface (orange) and Test error surface (blue). The SGD solutions (red dots) around a locally flat minimum are far apart due to the flatness of the train surface (see Figure 1b) which leads to large error reduction of the SWA solution (blue dot).

Somewhat surprisingly, we observe that the improvement Cavg from weight averaging (with mean 1.18 ± 0.03% over MT and  pairs) is on par or larger than the benefit Cens of prediction ensembling (0.94 ± 0.02%). For the rest of the paper, we focus attention on weight averaging because of its lower costs at test time and slightly higher performance compared to ensembling.

4 SWA AND FAST-SWA
In Section 3 we analyzed the training trajectories of the , MT, and supervised models. We observed that the  and MT models continue to actively explore the set of plausible solutions, producing diverse predictions on the test set even in the late stages of training. Further, in section 3.3 we have seen that averaging weights lead to significant gains in performance for the  and MT models. In particular these gains are much larger than in supervised setting. Stochastic Weight Averaging (SWA) (Izmailov et al., 2018) is a recent approach that is based on averaging weights traversed by SGD with a modified learning rate schedule. In Section 3 we analyzed averaging pairs of weights corresponding to different epochs of training and showed that it improves the test accuracy. Averaging multiple weights reinforces this effect, and SWA was shown to significantly improve generalization performance in supervised learning. Based on our results in section 3.3, we can expect even larger improvements in generalization when applying SWA to the  and MT models.

6

Under review as a conference paper at ICLR 2019

Learning Rate

0
fast-SWA

cc

SWA

0

` `0

Epoch

wSWA wfast-SWA

Figure 3: Left: Cyclical cosine learning rate schedule and SWA and fast-SWA averaging strategies. Middle: Illustration of the solutions explored by the cyclical cosine annealing schedule on an error surface. Right: Illustration of SWA and fast-SWA averaging strategies. fast-SWA averages more points but the errors of the averaged points, as indicated by the heat color, are higher.

SWA typically starts from a pre-trained model, and then averages points in weight space traversed by SGD with a constant or cyclical learning rate. We illustrate the cyclical cosine learning rate schedule in Figure 3 (left) and the SGD solutions explored in Figure 3 (middle). For the first `  `0 epochs the network is pre-trained using the cosine annealing schedule where the learning rate at epoch i is set equal to (i) = 0.5 · 0(1 + cos ( · i/`0)). After ` epochs, we use a cyclical schedule, repeating the learning rates from epochs [` c, `], where c is the cycle length. SWA collects the networks corresponding to the minimum values of the learning rate (shown in green in Figure 3, left) and averages their weights. The model with the averaged weights wSWA is then used to make predictions. We propose to apply SWA to the student network both for the  and Mean Teacher models. Note that the SWA weights do not interfere with training. Originally, Izmailov et al. (2018) proposed using cyclical learning rates with small cycle length for SWA. However, as we have seen in Section 3.3 (Figure 2, left) the benefits of averaging are the most prominent when the distance between the averaged points is large. Motivated by this observation, we instead use longer learning rate cycles c. Moreover, SWA updates the average weights only once per cycle, which means that many additional training epochs are needed in order to collect enough weights for averaging. To overcome this limitation, we propose fast-SWA, a modification of SWA that averages networks corresponding to every k < c epochs starting from epoch ` c. We can also average multiple weights within a single epoch setting k < 1. Notice that most of the models included in the fast-SWA average (shown in red in Figure 3, left) have higher errors than those included in the SWA average (shown in green in Figure 3, right) since they are obtained when the learning rate is high. It is our contention that including more models in the fast-SWA weight average can more than compensate for the larger errors of the individual models (see Section A.7). Indeed, our experiments in Section 5 show that fast-SWA converges substantially faster than SWA and has lower performance variance.

5 EXPERIMENTS
In this section, we evaluate the  and MT models (Section 4) on CIFAR-10 and CIFAR-100 with varying numbers of labeled examples.We show that fast-SWA and SWA improve the performance of the  and MT models, as we expect from our observations in Section 3. In fact, in many cases fast-SWA improves on the best results reported in the semi-supervised literature. We also demonstrate that the preposed fast-SWA obtains high performance much faster than SWA. We also evaluate SWA applied to a consistency-based domain adaptation model (French et al., 2018), closely related to the MT model, for adapting CIFAR-10 to STL. We improve the best reported test error rate for this task from 19.9% to 16.8%. We discuss the experimental setup in Section 5.1. We provide the results for CIFAR-10 and CIFAR100 datasets in Section 5.2 and 5.3. We summarize our results in comparison to the best previous results in Section 5.4. We show several additional results and detailed comparisons in Appendix A.2. We provide analysis of train and test error surfaces of fast-SWA solutions along the directions connecting fast-SWA and SGD in Section A.1.
7

Under review as a conference paper at ICLR 2019

5.1 SETUP We evaluate the weight averaging methods SWA and fast-SWA on different network architectures and learning rate schedules. We are able to improve on the base models in all settings. In particular, we consider a 13-layer CNN and a 12-block (26-layer) Residual Network (He et al., 2015) with Shake-Shake regularization (Gastaldi, 2017), which we refer to simply as CNN and Shake-Shake respectively (see Section A.8 for details on the architectures). For training all methods we use the stochastic gradient descent (SGD) optimizer with the cosine annealing learning rate described in Section 4. We use two learning rate schedules, the short schedule with ` = 180, `0 = 210, c = 30 similar to the experiments in Tarvainen and Valpola (2017) and the long schedule with ` = 1500, `0 = 1800, c = 200 similar to the experiments in Gastaldi (2017). We note that the long schedule improves the performance of the base models compared to the short schedule; however, SWA can still further improve the results. See Section A.9 of the Appendix for more details on other hyperparameters. We repeat each CNN experiment 3 times with different random seeds to estimate the standard deviations for the results in the Appendix.
5.2 CIFAR-10

Test Error (%) Test Error (%) Test Error (%) Test Error (%)

25
21.9

20 18.8

15 17.2 15.6

16.1 14.4

12.6

12.6 11.4

10 11.0 9.1 10.1 8.7 9.1

5 6.9 7.3

6.0 6.8 4.7 4.7

0 1k

2k 4k 10k 50k # of labels
(a)

40 38.1
36.0
35 33.6 34.2
30

25 23.4 24.1 23.2 24.3 23.2 24.1 20 21.5 21.8 21.0 21.2 21.0 21.0

15 10k

50k 50k+ 50k+* # of labels
(b)

14

12 12.3

10 10.2

9.1

8 8.0 7.5 8.0
6 6.3 6.5

4

2

7.1 7.5 5.8 5.5

5.8 6.4 4.5 4.0

3.9 3.8 3.1 3.1

0 1k

2k 4k 10k 50k # of labels
(c)

14 MT

12 MT+fast-SWA

+fast-SWA

10 Previous SOTA

8.5

8 7.5 7.4
64 6.6

6.5 7.0 5.7 6.0

6.0 6.3 5.1 5.0

5.0 5.0 3.9 3.8

3.5 3.4

2 3.1 3.0

0 1k

2k 4k 10k # of labels
(d)

50k

Figure 4: Prediction errors of  and MT models with and without fast-SWA. (a) CIFAR-10 with CNN (b) CIFAR-100 with CNN. 50k+ and 50k+ correspond to 50k+500k and 50k+237k settings (c) CIFAR-10 with ResNet + Shake-Shake using the short schedule (d) CIFAR-10 with ResNet + Shake-Shake using the long schedule.

We evaluate the proposed fast-SWA method using the  and MT models on the CIFAR-10 dataset (Krizhevsky). We use 50k images for training with 1k, 2k, 4k, 10k and 50k labels and report the errors on the test set (10k images). We visualize the results for the CNN and Shake-Shake architectures in Figures 4a, 4c, and 4d. For all quantities of labeled data, fast-SWA substantially improves test accuracy in both architectures. Additionally, in Tables 2, 4 of the Appendix we provide a thorough comparison of different averaging strategies as well as results for VAT (Miyato et al., 2017), TE (Laine and Aila, 2016), and other baselines. Note that we applied fast-SWA for VAT as well which is another popular approach for semi-supervised learning. We found that the improvement on VAT is not drastic ­ our base implementation obtains 11.26% error where fast-SWA reduces it to 10.97% (see Table 2 in Section A.2). Throughout the experiments, we focus on the  and MT models as they have been shown to scale to powerful networks such as Shake-Shake and obtained previous state-of-the-art performance. In Figure 5 (left), we visualize the test error as a function of iteration using the CNN. We observe that when the cyclical learning rate starts after epoch ` = 180, the base models drop in performance due to the sudden increase in learning rate (see Figure 3 left). However, fast-SWA continues to improve while collecting the weights corresponding to high learning rates for averaging. In general, we also find that the cyclical learning rate improves the base models beyond the usual cosine annealing schedule and increases the performance of fast-SWA as training progresses. Compared to SWA, we also observe that fast-SWA converges substantially faster, for instance, reducing the error to 10.5% at epoch 200 while SWA attains similar error at epoch 350 for CIFAR-10 4k labels (Figure 5 left). We provide additional plots in Section A.2 showing the convergence of the  and MT models in all label settings, where we observe similar trends that fast-SWA results in faster error reduction. We also find that the performance gains of fast-SWA over base models are higher for the  model compared to the MT model, which is consistent with the convexity observation in Section 3.3 and

8

Under review as a conference paper at ICLR 2019 Figure 2. In the previous evaluations (see e.g. Oliver et al., 2018; Tarvainen and Valpola, 2017), the  model was shown to be inferior to the MT model. However, with weight averaging, fast-SWA reduces the gap between  and MT performance. Surprisingly, we find that the  model can outperform MT after applying fast-SWA with moderate to large numbers of labeled points. In particular, the +fast-SWA model outperforms MT+fast-SWA on CIFAR-10 with 4k, 10k, and 50k labeled data points for the Shake-Shake architecture.
Figure 5: Prediction errors of base models and their weight averages (fast-SWA and SWA) for CNN on (left) CIFAR-10 with 4k labels, (middle) CIFAR-100 with 10k labels, and (right) CIFAR-100 50k labels and extra 500k unlabeled data from Tiny Images (Torralba et al., 2008). 5.3 CIFAR-100 AND EXTRA UNLABELED DATA We evaluate the  and MT models with fast-SWA on CIFAR-100. We train our models using 50000 images with 10k and 50k labels using the 13-layer CNN. We also analyze the effect of using the Tiny Images dataset (Torralba et al., 2008) as an additional source of unlabeled data. The Tiny Images dataset consists of 80 million images, mostly unlabeled, and contains CIFAR-100 as a subset. Following Laine and Aila (2016), we use two settings of unlabeled data, 50k+500k and 50k+237k where the 50k images corresponds to CIFAR-100 images from the training set and the +500k or +237k images corresponds to additional 500k or 237k images from the Tiny Images dataset. For the 237k setting, we select only the images that belong to the classes in CIFAR-100, corresponding to 237203 images. For the 500k setting, we use a random set of 500k images whose classes can be different from CIFAR-100's. We visualize the results in Figure 4b, where we again observe that fast-SWA substantially improves performance for every configuration of the number of labeled and unlabeled data. In Figure 5 (middle, right) we show the errors of MT, SWA and fast-SWA as a function of iteration on CIFAR-100 for the 10k and 50k+500k label settings. Similar to the CIFAR-10 experiments, we observe that fast-SWA reduces the errors substantially faster than SWA. We provide detailed experimental results in Table 3 of the Appendix and include preliminary results using the Shake-Shake architecture in Table 5, Section A.2. 5.4 ADVANCING STATE-OF-THE-ART We have shown that fast-SWA can significantly improve the performance of both the  and MT models. We provide a summary comparing our results with the previous best results in the literature in Table 1, using the 13-layer CNN and the Shake-Shake architecture that had been applied previously. We also provide detailed results the Appendix A.2. 5.5 PRELIMINARY RESULTS ON DOMAIN ADAPTATION Domain adaptation problems involve learning using a source domain Xs equipped with labels Ys and performing classification on the target domain Xt while having no access to the target labels at training time. A recent model by French et al. (2018) applies the consistency enforcing principle for domain adaptation and achieves state-of-the-art results on many datasets. Applying fast-SWA to this model on domain adaptation from CIFAR-10 to STL we were able to improve the best results reported in the literature from 19.9% to 16.8%. Interestingly, we found that for this task averaging the weights in the end of every iteration in fast-SWA converges significantly faster than averaging once per epoch and results in better performance. See Section A.10 for more details on the domain adaptation experiments.
9

Under review as a conference paper at ICLR 2019

Table 1: Test errors against current state-of-the-art semi-supervised results. The previous best numbers are obtained from (Tarvainen and Valpola, 2017)1, (Park et al., 2017)2, (Laine and Aila, 2016)3. CNN denotes performance on the benchmark 13-layer CNN (see A.8). Rows marked  use the Shake-Shake architecture. The result marked  are from  + fast-SWA, where the rest are based on MT + fast-SWA. The settings 50k+500k and 50k+237k use additional 500k and 237k unlabeled data from the Tiny Images dataset (Torralba et al., 2008) where  denotes that we use only the images that correspond to CIFAR-100 classes.

Dataset No. of Images No. of Labels Previous Best CNN
Ours CNN Previous Best
Ours

CIFAR-10 50k 50k 50k 1k 2k 4k 21.551 15.731 9.222 15.58 11.02 9.05
6.281 6.6 5.7 5.0

50k 10k 38.653 33.62
28.0

CIFAR-100

50k+500k 50k+237k 50k 50k

23.623 21.04

23.793 20.98

19.3 17.7

6 DISCUSSION
Semi-supervised learning is crucial for reducing the dependency of deep learning on large labeled datasets. Recently, there have been great advances in semi-supervised learning, with consistency regularization models achieving the best known results. By analyzing solutions along the training trajectories for two of the most successful models in this class, the  and Mean Teacher models, we have seen that rather than converging to a single solution SGD continues to explore a diverse set of plausible solutions late into training. As a result, we can expect that averaging predictions or weights will lead to much larger gains in performance than for supervised training. Indeed we find this to be the case, applying a variant of the recently proposed stochastic weight averaging (SWA) we advance the best known semi-supervised results on classification benchmarks. While not the focus of our paper, we have also shown that weight averaging has great promise in domain adaptation (French et al., 2018). Although the domain adaptation model we use is closely related to the Mean Teacher model, we observe qualitative differences in their behavior: the test error surface is flatter, requiring much higher frequency of averaging to obtain significant improvement. We believe that application-specific analysis of the geometric properties of the training objective and optimization trajectories will further improve results in domain adaptation. We also expect that other application areas such as reinforcement learning with sparse rewards, semi-supervised natural language processing, or generative adversarial networks (Yazici et al., 2018) to have large benefits from averaging, which we see as exciting directions for future research.
REFERENCES
H. Avron and S. Toledo. Randomized algorithms for estimating the trace of an implicit symmetric positive semi-definite matrix. Journal of the ACM, 58(2):1­34, Apr. 2011. ISSN 00045411. doi: 10.1145/1944345.1944349.
P. Bachman, O. Alsharif, and D. Precup. Learning with pseudo-ensembles. In Advances in Neural Information Processing Systems, pages 3365­3373, 2014.
P. Chaudhari, A. Choromanska, S. Soatto, Y. LeCun, C. Baldassi, C. Borgs, J. Chayes, L. Sagun, and R. Zecchina. Entropy-SGD: Biasing Gradient Descent Into Wide Valleys. arXiv:1611.01838 [cs, stat], Nov. 2016. arXiv: 1611.01838.
L. Dinh, R. Pascanu, S. Bengio, and Y. Bengio. Sharp Minima Can Generalize For Deep Nets. arXiv:1703.04933 [cs], Mar. 2017.
G. French, M. Mackiewicz, and M. Fisher. Self-ensembling for visual domain adaptation. In International Conference on Learning Representations, 2018.
X. Gastaldi. Shake-shake regularization. CoRR, abs/1705.07485, 2017.
10

Under review as a conference paper at ICLR 2019
I. Goodfellow, J. Pouget-Abadie, M. Mirza, B. Xu, D. Warde-Farley, S. Ozair, A. Courville, and Y. Bengio. Generative adversarial nets. In Advances in neural information processing systems, pages 2672­2680, 2014.
I. Goodfellow, O. Vinyals, and A. Saxe. Qualitatively characterizing neural network optimization problems. International Conference on Learning Representations, 2015.
K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning for image recognition. CoRR, abs/1512.03385, 2015.
P. Izmailov, D. Podoprikhin, T. Garipov, D. Vetrov, and A. G. Wilson. Averaging weights leads to wider optima and better generalization. arXiv preprint arXiv:1803.05407, 2018.
N. S. Keskar, D. Mudigere, J. Nocedal, M. Smelyanskiy, and P. T. P. Tang. On large-batch training for deep learning: Generalization gap and sharp minima. ICLR, 2017.
D. P. Kingma and J. Ba. Adam: A method for stochastic optimization. ICLR, 2015. A. Krizhevsky. Learning Multiple Layers of Features from Tiny Images. page 60. S. Laine and T. Aila. Temporal Ensembling for Semi-Supervised Learning. arXiv:1610.02242 [cs],
Oct. 2016. S. Laine and T. Aila. Temporal ensembling for semi-supervised learning. International Conference
on Learning Representations, 2017. I. Loshchilov and F. Hutter. SGDR: stochastic gradient descent with restarts. CoRR, abs/1608.03983,
2016. S. Mandt, M. D. Hoffman, and D. M. Blei. Stochastic gradient descent as approximate bayesian
inference. arXiv preprint arXiv:1704.04289, 2017. T. Miyato, S. Maeda, M. Koyama, and S. Ishii. Virtual adversarial training: a regularization method
for supervised and semi-supervised learning. CoRR, abs/1704.03976, 2017. R. Novak, Y. Bahri, D. A. Abolafia, J. Pennington, and J. Sohl-Dickstein. Sensitivity and generaliza-
tion in neural networks: an empirical study. ICLR, 2018. A. Oliver, A. Odena, C. Raffel, E. D. Cubuk, and I. J. Goodfellow. Realistic evaluation of deep
semi-supervised learning algorithms. ICLR Workshop, 2018. S. Park, J.-K. Park, S.-J. Shin, and I.-C. Moon. Adversarial Dropout for Supervised and Semi-
supervised Learning. arXiv:1707.03631 [cs], July 2017. arXiv: 1707.03631. M. Sajjadi, M. Javanmardi, and T. Tasdizen. Regularization With Stochastic Transformations and
Perturbations for Deep Semi-Supervised Learning. arXiv:1606.04586 [cs], June 2016. arXiv: 1606.04586. J. Schmidhuber and S. Hochreiter. Flat minima. Neural Computation, 1997. R. Shu, H. Bui, H. Narui, and S. Ermon. A DIRT-t approach to unsupervised domain adaptation. In International Conference on Learning Representations, 2018. J. Sokolic´, R. Giryes, G. Sapiro, and M. R. Rodrigues. Robust large margin deep neural networks. IEEE Transactions on Signal Processing, 65(16):4265­4280, 2017. N. Srivastava, G. Hinton, A. Krizhevsky, I. Sutskever, and R. Salakhutdinov. Dropout: A simple way to prevent neural networks from overfitting. The Journal of Machine Learning Research, 15(1): 1929­1958, 2014. A. Tarvainen and H. Valpola. Mean teachers are better role models: Weight-averaged consistency targets improve semi-supervised deep learning results. In Advances in Neural Information Processing Systems 30: Annual Conference on Neural Information Processing Systems 2017, 4-9 December 2017, Long Beach, CA, USA, pages 1195­1204, 2017.
11

Under review as a conference paper at ICLR 2019 A. Torralba, R. Fergus, and W. T. Freeman. 80 million tiny images: A large data set for nonparametric
object and scene recognition. IEEE Trans. Pattern Anal. Mach. Intell., 30(11):1958­1970, 2008. Y. Yazici, C.-S. Foo, S. Winkler, K.-H. Yap, G. Piliouras, and V. Chandrasekhar. The Unusual
Effectiveness of Averaging in GAN Training. ArXiv, 2018. X. Zhu, Z. Ghahramani, and J. Lafferty. Semi-Supervised Learning Using Gaussian Fields and
Harmonic Functions. ICML, 2003.
12

Under review as a conference paper at ICLR 2019

A APPENDIX
A.1 ADDITIONAL PLOTS

Error Rate(%) Error Rate Error Rate

60 Sup 0
50 4k 10k
40 20k 30 46k
20
0 10 20 30 40 50 60 70 80 Ray distance

60 Sup
50
40 MT

Train Test

30

20

10

0
60 40 20 0 20 40 60 80 100 Ray distance

50 SGD ! SGD
40 Random Adversarial
30 Train
20 Test
10
0 0 5 10 15 20 25 30 Ray distance

Figure 6: All plots are a obtained using the 13-layer CNN on CIFAR-10 with 4k labeled and 46k unlabeled data points unless specified otherwise. Left: Test error as a function of distance along random rays for the  model with 0, 4k, 10k, 20k or 46k unlabeled data points, and standard fully supervised training which uses only the cross entropy loss. All methods use 4k labeled examples. Middle: Train and test errors along rays connecting SGD solutions (showed with circles) to SWA solutions (showed with squares) for each respective model. Right: Comparison of train and test errors along rays connecting two SGD solutions, random rays, and adversarial rays for the Mean Teacher model.

In this section we provide several additional plots visualizing the train and test error along different types of rays in the weight space. The left panel of Figure 6 shows how the behavior of test error changes as we add more unlabeled data points for the  model. We observe that the test accuracy improves monotonically, but also the solutions become narrower along random rays. The middle panel of Figure 6 visualizes the train and test error behavior along the directions connecting the fast-SWA solution (shown with squares) to one of the SGD iterates used to compute the average (shown with circles) for , MT and supervised training. Similarly to Izmailov et al. (2018) we observe that for all three methods fast-SWA finds a centered solution, while the SGD solution lies near the boundary of a wide flat region. Agreeing with our results in section 3.2 we observe that for  and Mean Teacher models the train and test error surfaces are much wider along the directions connecting the fast-SWA and SGD solutions than for supervised training. In the right panel of Figure 6 we show the behavior of train and test error surfaces along random rays, adversarial rays and directions connecting the SGD solutions from epochs 170 and 180 for the Mean Teacher model (see section 3.2).

tr cov(rL)

3.
1 Sup
0.5 MT 0 50 100 150 Epoch
Figure 7: (Left): The evolution of the gradient covariance trace in the , MT, and supervised models during training. (Middle): Scatter plot of the decrease in error Cavg for weight averaging versus diversity. (Right): Scatter plot of the distance between pairs of weights versus diversity in their predictions. In the left panel of Figure 7 we show the evolution of the trace of the gradient of the covariance of the loss
tr cov(rwL(w)) = EkrwL(w) ErwL(w)k2
13

Under review as a conference paper at ICLR 2019

for the , MT and supevised training. We observe that the variance of the gradient is much larger for the  and Mean Teacher models compared to supervised training. In the middle and right panels of figure 7 we provide scatter plots of the improvement C obtained from averaging weights against diversity and diversity against distance. We observe that diversity is highly correlated with the improvement C coming from weight averaging. The correlation between distance and diversity is less prominent.

A.2 DETAILED RESULTS

In this section we report detailed results for the  and Mean Teacher models and various baselines on CIFAR-10 and CIFAR-100 using the 13-layer CNN and Shake-Shake. The results using the 13-layer CNN are summarized in Tables 2 and 3 for CIFAR-10 and CIFAR-100 respectively. Tables 4 and 5 summarize the results using Shake-Shake on CIFAR-10 and CIFAR100. In the tables  EMA is the same method as , where instead of SWA we apply Exponential Moving Averaging (EMA) for the student weights. We show that simply performing EMA for the student network in the  model without using it as a teacher (as in MT) typically results in a small improvement in the test error. Figures 8 and 9 show the performance of the  and Mean Teacher models as a function of the training epoch for CIFAR-10 and CIFAR-100 respectively for SWA and fast-SWA.

Table 2: CIFAR-10 semi-supervised errors on test set with a 13-layer CNN. The epoch numbers are reported in parenthesis. The previous results shown in the first section of the table are obtained from Tarvainen and Valpola (2017)1, Park et al. (2017)2, Laine and Aila (2016)3, Miyato et al. (2017)4.

Number of labels TE3 Supervised-only1 1 MT1 VAdD3 VAT + EntMin4 MT MT + fast-SWA (180) MT + fast-SWA (240) MT + SWA (240) MT + fast-SWA (480) MT + SWA (480) MT + fast-SWA (1200) MT + SWA (1200)
  EMA  + fast-SWA (180)  + fast-SWA (240)  + SWA (240)  + fast-SWA (480)  + SWA (480)  + fast-SWA (1200)  + SWA (1200) VAT VAT + SWA VAT+ EntMin VAT + EntMin + SWA

1000 46.43 ± 1.21 27.36 ± 1.20 21.55 ± 1.48
18.78 ± 0.31 18.19 ± 0.38 17.81 ± 0.37 18.38 ± 0.29 16.84 ± 0.62 17.48 ± 0.13 15.58 ± 0.12 15.59 ± 0.77 21.85 ± 0.69 21.70 ± 0.57 20.79 ± 0.38 20.04 ± 0.41 21.37 ± 0.64 19.11 ± 0.29 20.06 ± 0.64 17.23 ± 0.34 17.70 ± 0.25

2000 33.94 ± 0.73 18.02 ± 0.60 15.73 ± 0.31
14.43 ± 0.20 13.46 ± 0.30 13.00 ± 0.31 13.86 ± 0.64 12.24 ± 0.31 13.09 ± 0.80 11.02 ± 0.23 11.42 ± 0.33 16.10 ± 0.51 15.83 ± 0.55 15.12 ± 0.44 14.77 ± 0.15 15.38 ± 0.85 13.88 ± 0.30 14.53 ± 0.81 12.61 ± 0.18 12.59 ± 0.29

4000 12.16 ± 0.31 20.66 ± 0.57 13.20 ± 0.27 12.31 ± 0.28 9.22 ± 0.10 10.55 11.41 ± 0.27 10.67 ± 0.18 10.34 ± 0.14 10.95 ± 0.21 9.86 ± 0.27 10.30 ± 0.21 9.05 ± 0.21 9.38 ± 0.28 12.64 ± 0.11 12.52 ± 0.16 11.91 ± 0.06 11.61 ± 0.06 12.05 ± 0.40 10.91 ± 0.15 11.35 ± 0.42 10.07 ± 0.27 10.73 ± 0.39 11.99 11.16 11.26 10.97

10000
8.74 ± 0.30 8.06 ± 0.12 7.73 ± 0.10 8.36 ± 0.50 7.39 ± 0.14 7.78 ± 0.49 6.92 ± 0.07 7.04 ± 0.11 9.11 ± 0.21 9.06 ± 0.15 8.83 ± 0.32 8.45 ± 0.28 8.58 ± 0.41 7.91 ± 0.21 8.04 ± 0.37 7.28 ± 0.23 7.13 ± 0.23

50000 5.60 ± 0.15 5.82 ± 0.15 6.06 ± 0.15 5.94 ± 0.15 4.40 ± 0.12
5.98 ± 0.21 5.90 ± 0.03 5.55 ± 0.03 5.75 ± 0.29 5.14 ± 0.07 5.31 ± 0.43 4.73 ± 0.18 5.11 ± 0.35 6.79 ± 0.22 6.66 ± 0.20 6.42 ± 0.09 6.14 ± 0.11 6.36 ± 0.55 5.53 ± 0.07 5.77 ± 0.51 4.72 ± 0.04 4.99 ± 0.41

14

Under review as a conference paper at ICLR 2019

Table 3: CIFAR-100 semi-supervised errors on test set. All models are trained on a 13-layer CNN. The epoch numbers are reported in parenthesis. The previous results shown in the first section of the table are obtained from (Laine and Aila, 2016)3.

Number of labels Supervised-only3  model3 Temporal Ensembling3 MT (180) MT + fast-SWA (180) MT + SWA (240) MT + fast-SWA (240) MT + SWA (1200) MT + fast-SWA (1200)  (180)  + fast-SWA (180)  + SWA (240)  + fast-SWA (240)  + SWA (1200)  + fast-SWA (1200)

10k 44.56 ± 0.30 39.19 ± 0.54 38.65 ± 0.51 35.96 ± 0.77 34.54 ± 0.48 35.59 ± 1.45 34.10 ± 0.31 34.90 ± 1.51 33.62 ± 0.54 38.13 ± 0.52 35.59 ± 0.62 36.89 ± 1.51 35.14 ± 0.71 35.35 ± 1.15 34.25 ± 0.16

50k 26.42 ± 0.17 26.32 ± 0.04 26.30 ± 0.15 23.37 ± 0.16 21.93 ± 0.16 23.17 ± 0.86 21.84 ± 0.12 22.58 ± 0.79 21.52 ± 0.12 24.13 ± 0.20 22.08 ± 0.21 23.23 ± 0.70 22.00 ± 0.21 22.53 ± 0.64 21.78 ± 0.05

50k + 500k
25.79 ± 0.17 23.62 ± 0.17 23.18 ± 0.06 21.04 ± 0.16 22.00 ± 0.23 21.16 ± 0.21 21.47 ± 0.29 21.04 ± 0.04 24.26 ± 0.15 21.40 ± 0.19 22.17 ± 0.19 21.29 ± 0.27 21.53 ± 0.13 21.19 ± 0.05

50k + 237k
25.43 ± 0.17 23.79 ± 0.17 23.18 ± 0.24 21.09 ± 0.12 21.59 ± 0.22 21.07 ± 0.21 21.27 ± 0.09 20.98 ± 0.36 24.10 ± 0.07 21.28 ± 0.20 21.65 ± 0.13 21.22 ± 0.04 21.26 ± 0.34 20.97 ± 0.08

Table 4: CIFAR-10 semi-supervised errors on test set. All models use Shake-Shake Regularization (Gastaldi, 2017) + ResNet-26 (He et al., 2015).

Number of labels Short Schedule (` = 180) MT (Tarvainen and Valpola, 2017) MT (180) MT + SWA (240) MT + fast-SWA (240) MT + SWA (1200) MT + fast-SWA (1200)  (180)  + SWA (240)  + fast-SWA (240)  + SWA (1200)  + fast-SWA (1200) Long Schedule (` = 1500) Supervised-only (Gastaldi, 2017) MT (1500) MT + fast-SWA (1700) MT + SWA (1700) MT + fast-SWA (3500) MT + SWA (3500)  (1500)  + fast-SWA (1700)  + SWA (1700)  + fast-SWA (3500)  + SWA (3500)

1000
10.2 9.7 9.6 7.6 7.5 12.3 11.0 11.2 8.2 8.0
7.5 6.4 6.9 6.6 6.7 8.5 7.5 7.8 7.4 7.9

2000
8.0 7.7 7.4 6.4 6.3 9.1 8.3 8.2 6.7 6.5
6.5 5.8 5.9 5.7 5.8 7.0 6.2 6.4 6.0 6.2

4000
6.28 7.1 6.2 6.2 5.8 5.8 7.5 6.7 6.7 5.7 5.5
6.0 5.2 5.5 5.1 5.2 6.3 5.2 5.6 5.0 5.1

10000
5.8 4.9 4.9 4.6 4.5 6.4 5.5 5.5 4.2 4.0
5.0 3.8 4.2 3.9 3.9 5.0 4.0 4.4 3.8 4.0

50000
3.9 3.4 3.2 3.1 3.1 3.8 3.3 3.3 3.1 3.1 2.86 3.5 3.4 3.2 3.1 3.1 3.4 3.1 3.2 3.0 3.0

15

Under review as a conference paper at ICLR 2019

Table 5: CIFAR-100 semi-supervised errors on test set. Our models use Shake-Shake Regularization (Gastaldi, 2017) + ResNet-26 (He et al., 2015).

Number of labels
TE (CNN) (Laine and Aila, 2016)
Short Schedule (` = 180) MT (180) MT + fast-SWA (180) MT + SWA (240) MT + fast-SWA (240) MT + SWA (300) MT + fast-SWA (300)

10k 38.65 ± 0.51
29.4 28.9 28.4 28.1 28.1 28.0

50k 26.30 ± 0.15
19.5 19.3 18.8 18.8 18.5 18.4

50k + 500k 23.62 ± 0.17
21.9 19.7 19.9 19.5 18.9 19.3

50k + 237k 23.79 ± 0.17
19.0 18.3 17.9 17.9 17.5 17.7

Figure 8: Test errors as a function of training epoch for baseline models, SWA and fast-SWA on CIFAR-10 trained using 1k, 2k, 4k, and 10k labels for (top) the MT model (bottom) the  model. All models are trained using the 13-layer CNN.

Figure 9: Test errors versus training epoch for baseline models, SWA and fast-SWA on CIFAR-100 trained using 10k, 50k, 50k+500k, and 50k+237k labels for (top) the MT model (bottom) the  model. All models are trained using the 13-layer CNN.
A.3 EFFECT OF LEARNING RATE SCHEDULES The only hyperparameter for the fast-SWA setting is the cycle length c. We demonstrate in Figure 10a that fast-SWA's performance is not sensitive to c over a wide range of c values. We also demonstrate the performance for constant learning schedule. fast-SWA with cyclical learning rates generally converges faster due to higher variety in the collected weights.
16

Under review as a conference paper at ICLR 2019
(a) (b) Figure 10: The plots are generated using the MT model with CNN trained on CIFAR-10. We randomly select 5k of the 50k train images as a validation set. The remaining 45k images are splitted into 4k labeled and 41k unlabeled data points. (a) Validation accuracy as a function of training epoch for different cycle lengths c (b) fast-SWA with constant learning rate. The "learning rate epoch" corresponds to the epoch in the unmodified cosine annealing schedule (Figure 3, left) at which the learning rate is evaluated. We use this fixed learning rate for all epochs i `. A.4 EMA VERSUS SWA AS A TEACHER The MT model uses an exponential moving average (EMA) of the student weights as a teacher in the consistency regularization term. We consider two potential effects of using EMA as a teacher: first, averaging weights improves performance of the teacher for the reasons discussed in Sections 3.2, 3.3; second, having a better teacher model leads to better student performance which in turn further improves the teacher. In this section we try to separate these two effects. We apply EMA to the  model in the same way in which we apply fast-SWA instead of using EMA as a teacher and compare the resulting performance to the Mean Teacher. Figure 11 shows the improvement in error-rate obtained by applying EMA to the  model in different label settings. As we can see while EMA improves the results over the baseline  model, the performance of -EMA is still inferior to that of the Mean Teacher method, especially when the labeled data is scarce. This observation suggests that the improvement of the Mean Teacher over the  model can not be simply attributed to EMA improving the student performance and we should take the second effect discussed above into account. Like SWA, EMA is a way to average weights of the networks, but it puts more emphasis on very recent models compared to SWA. Early in training when the student model changes rapidly EMA significantly improves performance and helps a lot when used as a teacher. However once the student model converges to the vicinity of the optimum, EMA offers little gain. In this regime SWA is a much better way to average weights. We show the performance of SWA applied to  model in Figure 11 (left).
Figure 11: (left) Comparison of different averaging methods. The y axis corresponds to the increased error with respect to the MT model with fast-SWA solution (which has y = 0). All numbers are taken from epoch 180. (right) The effects of using SWA as a teacher. W-T model corresponds to the performance of a model with weight W using a model with a teacher being T.
17

Under review as a conference paper at ICLR 2019

Since SWA performs better than EMA, we also experiment with using SWA as a teacher instead of EMA. We start with the usual MT model pretrained until epoch 150. Then we switch to using SWA as a teacher at epoch 150. In Figure 11 (right), our results suggest that using SWA as a teacher performs on par with using EMA as a teacher. We conjecture that once we are at a convex region of test error close to the optimum (epoch 150), having a better teacher doesn't lead to substantially improved performance. It is possible to start using SWA as a teacher earlier in training; however, during early epochs where the model undergoes rapid improvement EMA is more sensible than SWA as we discussed above.

A.5 CONSISTENCY LOSS APPROXIMATES JACOBIAN NORM

In the simplified  model with small additive data perturbations that are normally distributed, z  N (0, I),

Xm Xm

Q^

=

lim
!0

1 2

1 m

`cons(w, xi, )

=

1 m

lim
!0

1 2

kf (w,

xi

+

zi)

i=1 i=1

f (w, xi)k2

Taylor expanding `cons Jacobian of the network

in , we outputs f

obtain `cons(w, x, with respect to the

) = input

at2azTpJarxTtiJcuxlzar+vaOlu(e4o)f,

where Jx is x. Therefore,

the
2

Q^i

=

lim
!0

1 2

`cons

(w,

xi,

)

=

ziT

J (xi)T J (xi)zi.

We can now recognize this term as a one sample stochastic trace estimator for tr(J(xi)T J(xi)) with a Gaussian probe variable zi; see Avron and Toledo (2011) for derivations and guarantees on stochastic trace estimators.
Ez[Q^i] = tr (J (xi)T J (xi)E[ziziT ]) = kJ (xi)kF2 .

Taking an expectation over the m samples of x, we get E[Q^] = Ex[kJxk2F .

In general if we have m samples of x and n sampled perturbations for each x, then for a symmetric matrix A with zik iid N (0, I) and independent xi iid p(x),

the estimator

Q^

=

1 m

Xm

1 n

Xn ziTk A(xi )zik

has variance

i k



Var[Q^]

=

1 m

Var[tr(A)]

+

2 n

E[tr(A2)]

.

Proof: Let tr(n1AP(xkn1)q)i2k,

q(iskeee.gz.iTkAAv(rxoin)zainkd.

m i=1

are

i.i.d

random

It is well known that for Toledo, 2011). Note that variables,

fixed Ez1 ,z2

x, Ez[q11|x1] [qi1qi2|xi] =

= 2tr(A(x1)2) + tr(A(xi))2. Since

Var

1 m

Xm

1 n

Xn  qik

=

1 m

Var

1 n

Xn  q1k ,

ik

k

whereas this does not hold for the opposite ordering of the sum.

E

1 n

Xn

q1k

2

=



Ex1 E{z}

1 n2

Xn Xn qilqik

{x}

k  lk

= Ex1 E{z}

n n2

q121

+

n(n n2

1) q11q12

{x}



= Ex

1 n

2tr(A2) + tr(A)2

+

1

1 n

tr(A)2



=

Ex[tr(A)2]

+

2 n

Ex[tr(A2

)]

2One can extend this to perturabations along the image manifold by replacing z  N (0, I) with z  P (x)N (0, I) where P (x) = P (x)2 is a projection matrix that projects down from Rp to Tx(M), the tangent space of the image manifold at x. In this case, the consistency regularization penalizes the laplacian norm on the manifold Ex[kJxP (x)k2F ] = Ex[kJMk2F ]

18

Under review as a conference paper at ICLR 2019

Plugging in A = JT J and n = 1, we get



Var[Q^]

=

1 m

Var[kJxkF2 ] + 2E[kJxT Jxk2F ]

.

A.6 RELATIONSHIP BETWEEN Ex[kJwk2F ] AND RANDOM RAY SHARPNESS

In the following analysis we review an argument for To keep things simple, we focus on the MSE loss,

why smaller Ex but in principle

[aksJiwmkiF2la]r,

implies broader optima. argument should apply

for the Cross Entropy and the Error rate. For a single data point x and one hot vector y with k classes,

the hessian of `MSE(w) = kf (x, w) yk2 can be decomposed into two terms, the Gauss-Newton matrix G = JwT Jw and a term which depends on the labels.

Xk H(w, x, y) = r2`MSE(w) = JwT Jw + (r2fi)(fi(x)
i=1

yi),

Xk tr(H) = kJwk2F + tr(r2fi)(fi(x)
|i=1 {z
(x,y)

yi) }

Thus tr(H) is size of  goes

also the sum of down. In terms

otwf roantedromms,rakyJwshka2Frpannedss, .coAnssidtheer

solution improves, the the expected MSE loss,

relative or risk,

RMSE(w) = E(x,y)kf (x, w) yk2 along random rays. Let d be a random vector sampled from the unit sphere and s is the distance along the random ray. Evaluating the risk on a random ray, and

Taylor expanding in s we have

RMSE(w + sd) = RMSE(w) + sdT E(x,y)[JwT (f y)] + (1/2)s2dT E(x,y)[H]d + O(s3)

Since d is from the unit sphere, E[d] = 0 and E[ddT ] = I/p where p is the dimension. Averaging over the rays, d  Unif(Sp 1), we have

Ed[RMSE(w+sd)]

RMSE(w)

=

s2 2p

Ex

[tr(H

)]+O(s4)

=

s2 2p

Ex

[kJw

k2F

]+

s2 2p

E(x,y)[(x,

y)]+O(s4)

All of the odd terms vanish because of the reflection symmetry of the unit sphere. This means that locally, the sharpness of the optima (as measured by random rays) can be lowered by decreasing Ex[kJwk2F ].

A.7 INCLUDING HIGH LEARNING RATE ITERATES INTO SWA

As discussed in Mandt et al. (2017), under certain assumptions SGD samples from a Gaussian

distribution centered at the optimum of the loss w0 with covariance proportional to the learning

rate. Suppose then that we have n weights sampled at learning rate 1, wi(1) iid N (w0, 1)

and m weights sampled with

estimator

w^SWA

=

1 n

P
i

wi(1)

,

the high variance points in the

the higher
E[kw^SWA average, as

learning rate 2, wj(2) iid N (w0, 2). For the SWA

w0k2] = tr(Cov(w^SWA)) =

in

fast-SWA,

w^fSWA

=

1 n+m

Pn1 tir(wi()1.)

But if we include

+

P
j

wj(2)

, then

E[kw^fSWA

w0k2] =

n1 +m2 (n+m)2

tr().

If

n1 +m2 (n+m)2

<

1 n

then including the high learning rate points

decreases the MSE of the estimator for m > n improve the estimate.

2 1

2 . If we include enough points, we will still

A.8 NETWORK ARCHITECTURES In the experiments we use two DNN architectures ­ 13 layer CNN and Shake-Shake. The architecture of 13-layer CNN is described in Table 6. It closely follows the architecture used in (Laine and Aila, 2017; Miyato et al., 2017; Tarvainen and Valpola, 2017). We re-implement it in PyTorch and

19

Under review as a conference paper at ICLR 2019

removed the Gaussian input noise, since we found having no such noise improves generalization. For Shake-Shake we use 26-2x96d Shake-Shake regularized architecture of Gastaldi (2017) with 12 residual blocks.

Table 6: A 13-layer convolutional neural networks for the CNN experiments (CIFAR-10 and CIFAR-100) in Section 5.2 and 5.3. Note that the difference from the architecture used in Tarvainen and Valpola (2017) is that we removed a Gaussian noise layer after the horizontal flip.

Layer Input Translation Horizontal flip Convolutional Convolutional Convolutional Pooling Dropout Convolutional Convolutional Convolutional Pooling Dropout Convolutional Convolutional Convolutional Pooling Softmax

Hyperparameters
32  32 RGB image Randomly { x, y}  [ 2, 2] Randomly p = 0.5 128 filters, 3  3, same padding 128 filters, 3  3, same padding 128 filters, 3  3, same padding Maxpool 2  2 p = 0.5 256 filters, 3  3, same padding 256 filters, 3  3, same padding 256 filters, 3  3, same padding Maxpool 2  2 p = 0.5 512 filters, 3  3, valid padding 256 filters, 1  1, same padding 128 filters, 1  1, same padding Average pool (6  6 ! 11 pixels) Fully connected 128 ! 10

A.9 HYPERPARAMETERS We consider two different schedules. In the short schedule we set the cosine half-period `0 = 210 and training length ` = 180, following the schedule used in Tarvainen and Valpola (2017) in Shake-Shake experiments. For our Shake-Shake experiments we also report results with long schedule where we set ` = 1800, `0 = 1500 following Gastaldi (2017). To determine the initial learning rate 0 and the cycle length c we used a separate validation set of size 5000 taken from the unlabeled data. After determining these values, we added the validation set to the unlabeled data and trained again. We reuse the same values of 0 and c for all experiments with different numbers of labeled data for both  model and Mean Teacher for a fixed architecture (13-layer CNN or Shake-Shake). For the short schedule we use cycle length c = 30 and average models once every k = 3 epochs. For long schedule we use c = 200, k = 20. In all experiments we use stochastic gradient descent optimizer with Nesterov momentum (Loshchilov and Hutter, 2016). In fast-SWA we average every the weights of the models corresponding to every third epoch. In the  model, we back-propagate the gradients through the student side only (as opposed to both sides in (Laine and Aila, 2016)). For Mean Teacher we use  = 0.97 decay rate in the Exponential Moving Average (EMA) of the student's weights. For all other hyper-parameters we reuse the values from Tarvainen and Valpola (2017) unless mentioned otherwise. Like in Tarvainen and Valpola (2017), we use k · k2 for divergence in the consistency loss. Similarly, we ramp up the consistency cost over the first 5 epochs from 0 up to it's maximum value of 100 as done in Tarvainen and Valpola (2017). We use cosine annealing learning rates with no learning rate ramp up, unlike in the original MT implementation (Tarvainen and Valpola, 2017). Note that this is similar to the same hyperparameter settings as in Tarvainen and Valpola (2017) for ResNet3. We note
3We use the public Pytorch code https://github.com/CuriousAI/mean-teacher as our base model for the MT model and modified it for the  model.
20

Under review as a conference paper at ICLR 2019

that we use the exact same hyperparameters for the  and MT models in each experiment setting. In contrast to the original implementation in Tarvainen and Valpola (2017) of CNN experiments, we use SGD instead of Adam.

Understanding Experiments in Sections 3.2, 3.3 We use the 13-layer CNN with the short learning rate schedule. We use a total batch size of 100 for CNN experiments with a labeled batch size of 50 for the  and Mean Teacher models. We use the maximum learning rate 0 = 0.1. For Section 3.2 we run SGD only for 180 epochs, so 0 learning rate cycles are done. For Section 3.3 we additionally run 5 learning rate cycles and sample pairs of SGD iterates from epochs 180-330 corresponding to these cycles.

CIFAR-10 CNN Experiments We use a total batch size of 100 for CNN experiments with a labeled batch size of 50. We use the maximum learning rate 0 = 0.1. CIFAR-10 ResNet + Shake-Shake We use a total batch size of 128 for ResNet experiments with a labeled batch size of 31. We use the maximum learning rate 0 = 0.05 for CIFAR-10. This applies for both the short and long schedules.

CIFAR-100 CNN Experiments We use a total batch size of 128 with a labeled batch size of 31 for 10k and 50k label settings. For the settings 50k+500k and 50k+237k, we use a labeled batch size of 64. We also limit the number of unlabeled images used in each epoch to 100k images. We use the maximum learning rate 0 = 0.1. CIFAR-100 ResNet + Shake-Shake We use a total batch size of 128 for ResNet experiments with a labeled batch size of 31 in all label settings. For the settings 50k+500k and 50k+237k, we also limit the number of unlabeled images used in each epoch to 100k images. We use the maximum learning rate 0 = 0.1. This applies for both the short and long schedules.

A.10 DOMAIN ADAPTATION We apply fast-SWA to the best experiment setting MT+CT+TFA for CIFAR-10 to STL according to French et al. (2018). This setting involves using confidence thresholding (CT) and also an augmentation scheme with translation, flipping, and affine transformation (TFA). We modify the optimizer to use SGD instead of Adam (Kingma and Ba, 2015) and use cosine annealing schedule with `0 = 600, ` = 550, c = 50. We experimented with two fast-SWA methods: averaging weights once per epoch and averaging once every iteration. We report the results in Table 7. We observe that averaging every iteration converges much faster (600 epochs instead of 3000) and results in better test accuracy. In our experiments with semi-supervised learning averaging more often than once per epoch didn't improve convergence or final results. We hypothesize that the improvement from more frequent averaging is a result of specific geometry of the loss surfaces and training trajectories in domain adaptation. We leave further analysis of applying fast-SWA to domain adaptation for future work.

Table 7: Domain Adaptation from CIFAR-10 to STL. VADA results are from (Shu et al., 2018) and the original SE is from French et al. (2018). SE is the score with our implementation without fast-SWA. fast-SWA 1 performs averaging every epoch and the final result is obtained at epoch 3000. fast-SWA 2 performs the averaging every iteration and the final result is obtained at epoch 600.

Method VADA SE SE SE + fast-SWA 1 SE + fast-SWA 2

Test Error 20.0 19.9 18.1

17.1

16.8

Implementation Details We use the public code4 of French et al. (2018) to train the model and apply fast-SWA. While the original implementation uses Adam (Kingma and Ba, 2015), we use
4https://github.com/Britefury/self-ensemble-visual-domain-adapt.git

21

Under review as a conference paper at ICLR 2019 stochastic gradient descent with Nesterov momentum and cosine annealing learning rate with `0 = 600, ` = 550, c = 100 and k = 100. We use the maximum learning rate 0 = 0.1 and momentum 0.9 with weight decay of scale 2  10 4. We use the data augmentation setting MT+CF+TFA in Table 1 of French et al. (2018) and apply fast-SWA. The result reported is from epoch 4000.
22

