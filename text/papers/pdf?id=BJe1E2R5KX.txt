Under review as a conference paper at ICLR 2019
ALGORITHMIC FRAMEWORK FOR MODEL-BASED DEEP REINFORCEMENT LEARNING WITH THEORETICAL GUARANTEES
Anonymous authors Paper under double-blind review
ABSTRACT
Model-based reinforcement learning (RL) is considered to be a promising approach to reduce the sample complexity that hinders model-free RL. However, the theoretical understanding of such methods has been rather limited. This paper introduces a novel algorithmic framework for designing and analyzing model-based RL algorithms with theoretical guarantees. We design a meta-algorithm with a theoretical guarantee of monotone improvement to a local maximum of the expected reward. The meta-algorithm iteratively builds a lower bound of the expected reward based on the estimated dynamical model and sample trajectories, and then maximizes the lower bound jointly over the policy and the model. The framework extends the optimism-in-face-of-uncertainty principle to non-linear dynamical models in a way that requires no explicit uncertainty quantification. Instantiating our framework with simplification gives a variant of model-based RL algorithms Stochastic Lower Bounds Optimization (SLBO). Experiments demonstrate that SLBO achieves stateof-the-art performance when only one million or fewer samples are permitted on a range of continuous control benchmark tasks.
1 INTRODUCTION
In recent years deep reinforcement learning has achieved strong empirical success, including superhuman performances on Atari games and Go (Mnih et al., 2015; Silver et al., 2017) and learning locomotion and manipulation skills in robotics (Levine et al., 2016; Schulman et al., 2015b; Lillicrap et al., 2015). Many of these results are achieved by model-free RL algorithms that often require a massive number of samples, and therefore their applications are mostly limited to simulated environments. Model-based deep reinforcement learning, in contrast, exploits the information from state observations explicitly -- by planning with an estimated dynamical model -- and is considered to be a promising approach to reduce the sample complexity. Indeed, empirical results (Deisenroth & Rasmussen, 2011b; Deisenroth et al., 2013; Levine et al., 2016; Nagabandi et al., 2017; Kurutach et al., 2018; Pong et al., 2018a) have shown strong improvements in sample efficiency.
Despite promising empirical findings, many of theoretical properties of model-based deep reinforcement learning are not well-understood. For example, how does the error of the estimated model affect the estimation of the value function and the planning? Can model-based RL algorithms be guaranteed to improve the policy monotonically and converge to a local maximum of the value function? How do we quantify the uncertainty in the dynamical models?
It's challenging to address these questions theoretically in the context of deep RL with continuous state and action space and non-linear dynamical models. Due to the high-dimensionality, learning models from observations in one part of the state space and extrapolating to another part sometimes involves a leap of faith. The uncertainty quantification of the non-linear parameterized dynamical models is difficult -- even without the RL components, it is an active but widely-open research area. Prior work in model-based RL mostly quantifies uncertainty with either heuristics or simpler models (Moldovan et al., 2015; Xie et al., 2016; Deisenroth & Rasmussen, 2011a).
Previous theoretical work on model-based RL mostly focuses on either the finite-state MDPs (Jaksch et al., 2010; Bartlett & Tewari, 2009; Fruit et al., 2018; Lakshmanan et al., 2015; Hinderer, 2005; Pirotta et al., 2015; 2013), or the linear parametrization of the dynamics, policy, or value func-
1

Under review as a conference paper at ICLR 2019

tion (Abbasi-Yadkori & Szepesvári, 2011; Simchowitz et al., 2018; Dean et al., 2017; Sutton et al.,
2012; Tamar et al., 2012), but not much on non-linear models. Even with an oracle prediction intervals1 or posterior estimation, to the best of our knowledge, there was no previous algorithm with
convergence guarantees for model-based deep RL.

Towards addressing these challenges, the main contribution of this paper is to propose a novel algorithmic framework for model-based deep RL with theoretical guarantees. Our meta-algorithm (Algorithm 1) extends the optimism-in-face-of-uncertainty principle to non-linear dynamical models in a way that requires no explicit uncertainty quantification of the dynamical models.

Let V  be the value function V  of a policy  on the true environment, and let V  be the value
function of the policy  on the estimated model M . We design provable upper bounds, denoted by
D,M , on how much the error can compound and divert the expected value V  of the imaginary rollouts from their real value V , in a neighborhood of some reference policy. Such upper bounds capture the intrinsic difference between the estimated and real dynamical model with respect to the particular reward function under consideration.

The discrepancy bounds D,M naturally leads to a lower bound for the true value function:

V   V  - D,M .

(1.1)

Our algorithm iteratively collects batches of samples from the interactions with environments, builds
the lower bound above, and then maximizes it over both the dynamical model M and the policy . We can use any RL algorithms to optimize the lower bounds, because it will be designed to only depend on the sample trajectories from a fixed reference policy (as opposed to requiring new interactions with the policy iterate.)
We show that the performance of the policy is guaranteed to monotonically increase, assuming the optimization within each iteration succeeds (see Theorem 3.1.) To the best of our knowledge, this is the first theoretical guarantee of monotone improvement for model-based deep RL.
Readers may have realized that optimizing a robust lower bound is reminiscent of robust control and robust optimization. The distinction is that we optimistically and iteratively maximize the RHS of (1.1) jointly over the model and the policy. The iterative approach allows the algorithms to collect higher quality trajectory adaptively, and the optimism in model optimization encourages explorations of the parts of space that are not covered by the current discrepancy bounds.
To instantiate the meta-algorithm, we design a few valid discrepancy bounds in Section 4. In Section 4.1, we recover the norm-based model loss by imposing the additional assumption of a Lipschitz value function. The result suggests a norm is preferred compared to the square of the norm. Indeed in Section 6.2, we show that experimentally learning with 2 loss significantly outperforms the mean-squared error loss ( 22).
In Section 4.2, we design a discrepancy bound that is invariant to the representation of the state space. Here we measure the loss of the model by the difference between the value of the predicted next state and the value of the true next state. Such a loss function is shown to be invariant to one-to-one transformation of the state space. Thus we argue that the loss is an intrinsic measure for the model error without any information beyond observing the rewards. We also refine our bounds in Section A by utilizing some mathematical tools of measuring the difference between policies in 2-divergence (instead of KL divergence or TV distance).
Our analysis also sheds light on the comparison between model-based RL and on-policy model-free RL algorithms such as policy gradient or TRPO (Schulman et al., 2015a). The RHS of equation (1.1) is likely to be a good approximator of V  in a larger neighborhood than the linear approximation of V  used in policy gradient is (see Remark 4.5.)
Finally, inspired by our framework and analysis, we design a variant of model-based RL algorithms Stochastic Lower Bounds Optimization (SLBO). Experiments demonstrate that SLBO achieves state-of-the-art performance when only 1M samples are permitted on a range of continuous control benchmark tasks.
1We note that the confidence interval of parameters are likely meaningless for over-parameterized neural networks models.

2

Under review as a conference paper at ICLR 2019

2 NOTATIONS AND PRELIMINARIES

We denote the state space by S, the action space by A. A policy (·|s) specifies the conditional distribution over the action space given a state s. A dynamical model M (·|s, a) specifies the conditional distribution of the next state given the current state s and action a. We will use M
globally to denote the unknown true dynamical model. Our target applications are problems with the
continuous state and action space, although the results apply to discrete state or action space as well. When the model is deterministic, M (·|s, a) is a dirac measure. In this case, we use M (s, a) to denote the unique value of s and view M as a function from S × A to S. Let M denote a (parameterized) family of models that we are interested in, and  denote a (parameterized) family of policies.

Unless otherwise stated, for random variable X, we will use pX to denote its density function.
Let S0 be the random variable for the initial state. Let St,M to denote the random variable of the states at steps t when we execute the policy  on the dynamic model M stating with S0. Note that S0,M = S0 unless otherwise stated. We will omit the subscript when it's clear from the context. We use At to denote the actions at step t similarly. We often use  to denote the random variable for the trajectory (S0, A1, . . . , St, At, . . . ). Let R(s, a) be the reward function at each step. We assume R is known throughout the paper, although R can be also considered as part of the model if unknown.
Let  be the discount factor.

Let V ,M be the value function on the model M and policy  defined as:

V ,M (s) =

E

t0,At  (·|St )

St+1M (·|St,At)


tR(St, At) | S0 = s
t=0

(2.1)

We define V ,M = E V ,M (S0) as the expected reward-to-go at Step 0 (averaged over the random initial states). Our goal is to maximize the reward-to-go on the true dynamical model, that is, V ,M , over the policy . For simplicity, throughout the paper, we set  = (1 - )-1 since it occurs frequently in our equations. Every policy  induces a distribution of states visited by policy :

Definition 2.1. For a policy , define ,M as the discounted distribution of the states visited by

 on M . Let  be a shorthand for ,M and we omit the superscript M throughout the paper.

Concretely,we have  = (1 - )

 t=0

t

·

pSt

3 ALGORITHMIC FRAMEWORK

As mentioned in the introduction, towards optimizing V ,M ,2 our plan is to build a lower bound for V ,M of the following type and optimize it iteratively:

V ,M  V ,M - D(M , )

(3.1)

where D(M , )  R0 bounds from above the discrepancy between V ,M and V ,M . Building
such an optimizable discrepancy bound globally that holds for all M and  turns out to be rather difficult, if not impossible. Instead, we shoot for establishing such a bound over the neighborhood of a reference policy ref.

V ,M  V ,M - Dref,(M , ),

 s.t. d(, ref)  

(R1)

Here d(·, ·) is a function that measures the closeness of two policies, which will be chosen later in

alignment with the choice of D. We will mostly omit the subscript  in D for simplicity in the rest of

the paper. We will require our discrepancy bound to vanish when M is an accurate model:

M = M = Dref (M , ) = 0, , ref

(R2)

The third requirement for the discrepancy bound D is that it can be estimated and optimized in the sense that

Dref (M , ) is of the form

E
 ref,M

[f (M , ,  )]

(R3)

2Note that in the introduction we used V  for simplicity, and in the rest of the paper we will make the dependency on M explicit.

3

Under review as a conference paper at ICLR 2019

where f is a known differentiable function. We can estimate such discrepancy bounds for every  in the neighborhood of ref by sampling empirical trajectories  (1), . . . ,  (n) from executing policy ref on the real environment M and compute the average of f (M , ,  (i))'s. We would have to insist that the expectation cannot be over the randomness of trajectories from  on M , because then we would have to re-sample trajectories for every possible  encountered.

For example, assuming the dynamical models are all deterministic, one of the valid discrepancy bounds (under some strong assumptions) that will prove in Section 4 is a multiple of the error of the
prediction of M on the trajectories from ref:

Dref (M ,

)

=

L

·

E
S0 ,...,St ,ref ,M

M (St) - St+1

(3.2)

Suppose we can establish such an discrepancy bound D (and the distance function d) with properties (R1), (R2), and (R3), -- which will be the main focus of Section 4 --, then we can devise the following meta-algorithm (Algorithm 1). We iteratively optimize the lower bound over the policy k+1 and the model Mk+1, subject to the constraint that the policy is not very far from the reference policy k obtained in the previous iteration. For simplicity, we only state the population version with
the exact computation of Dref (M , ), though empirically it is estimated by sampling trajectories.

Algorithm 1 Meta-Algorithm for Model-based RL
Inputs: Initial policy 0. Discrepancy bound D and distance function d that satisfy equation (R1) and (R2). For k = 0 to T :

k+1, Mk+1 = argmax V ,M - Dk,(M, )
, M M
s.t. d(, k)  

(3.3) (3.4)

We first remark that the discrepancy bound Dk (M, ) in the objective plays the role of learning the dynamical model by ensuring the model to fit to the sampled trajectories. For example, using the discrepancy bound in the form of equation (3.2), we roughly recover the standard objective for model learning, with the caveat that we only have the norm instead of the square of the norm in MSE. Such distinction turns out to be empirically important for better performance (see Section 6.2).

Second, our algorithm can be viewed as an extension of the optimism-in-face-of-uncertainty (OFU) principle to non-linear parameterized setting: jointly optimizing M and  encourages the algorithm to choose the most optimistic model among those that can be used to accurately estimate the value function. (See (Jaksch et al., 2010; Bartlett & Tewari, 2009; Fruit et al., 2018; Lakshmanan et al., 2015; Pirotta et al., 2015; 2013) and references therein for the OFU principle in finite-state MDPs.) The main novelty here is to optimize the lower bound directly, without explicitly building any confidence intervals, which turns out to be challenging in deep learning. In other words, the uncertainty is measured straightforwardly by how the error would affect the estimation of the value function.
Thirdly, the maximization of V ,M , when M is fixed, can be solved by any model-free RL algorithms with M as the environment without querying any real samples. Optimizing V ,M jointly over , M can be also viewed as another RL problem with an extended actions space using the known "extended MDP technique". See (Jaksch et al., 2010, section 3.1) for details.

Our main theorem shows formally that the policy performance in the real environment is nondecreasing under the assumption that the real dynamics belongs to our parameterized family M.3

Theorem 3.1. Suppose that M  M, that D and d satisfy equation (R1) and (R2), and the optimization problem in equation (3.3) is solvable at each iteration. Then, Algorithm 1 produces a sequence of policies 0, . . . , T with monotonically increasing values:

V 0,M  V 1,M  · · ·  V T ,M

(3.5)

3We note that such an assumption, though restricted, may not be very far from reality: optimistically speaking, we only need to approximate the dynamical model accurately on the trajectories of the optimal policy. This might be much easier than approximating the dynamical model globally.

4

Under review as a conference paper at ICLR 2019

Moreover, as k  , the value V k,M converges to some V ¯,M , where ¯ is a local maximum of V ,M in domain .

Proof of Theorem 3.1. Since D and d satisfy equation (R1), we have that

V k+1,M  V k+1,Mk+1 - Dk (Mk+1, k+1) By the definition that k+1 and Mk+1 are the optimizers of equation (3.3), we have that

V k+1,Mk+1 - Dk (Mk+1, k+1)  V k,M - Dk (M , k) = V k,M Combing the two equations above we complete the proof of equation (3.5).

(by equation R2)

For the second part of the theorem, by compactness, we have that a subsequence of k converges to some ¯. By the monotonicity we have V k,M  V ¯,M for every k  0. For the sake of
contradiction, we assume ¯ is a not a local maximum, then in the neighborhood of ¯ there exists 
such that V  ,M > V ¯,M and d(¯,  ) < /2. Let t be such that t is in the /2-neighborhood of ¯. Then we see that ( , M ) is a better solution than (t+1, Mt+1) for the optimization problem (3.3)
in iteration t because V  ,M > V ¯,M  V t+1,M  V t+1,Mt+1 - Dt (Mt+1, t+1). (Here the last inequality uses equation (R1) with t as ref.) The fact ( , M ) is a strictly better solution than (t+1, Mt+1) contradicts the fact that (t+1, Mt+1) is defined to be the optimal solution of (3.3) . Therefore ¯ is a local maximum and we complete the proof.

4 DISCREPANCY BOUNDS DESIGN

In this section, we design discrepancy bounds that can provably satisfy the requirements (R1), (R2), and (R3). We design increasingly stronger discrepancy bounds from Section 4.1 to Section A.

4.1 NORM-BASED PREDICTION ERROR BOUNDS

In this subsection, we assume the dynamical model M is deterministic and we also learn with a
deterministic model M . Under assumptions defined below, we derive a discrepancy bound D of the form M (S, A) - M (S, A) averaged over the observed state-action pair (S, A) on the dynamical
model M . This suggests that the norm is a better metric than the mean-squared error for learning the model, which is empirically shown in Section 6.2. Through the derivation, we will also introduce a telescoping lemma, which serves as the main building block towards other finer discrepancy bounds.

We make the (strong) assumption that the value function V ,M on the estimated dynamical model is L-Lipschitz w.r.t to some norm · in the sense that

s, s  S, V ,M (s) - V ,M (s )  L · s - s

(4.1)

In other words, nearby starting points should give reward-to-go under the same policy . We note that not every real environment M has this property, let alone the estimated dynamical models. However, once the real dynamical model induces a Lipschitz value function, we may penalize the Lipschitz-ness of the value function of the estimated model during the training.

We start off with a lemma showing that the expected prediction error is an upper bound of the discrepancy between the real and imaginary values.

Lemma 4.1. Suppose V ,M is L-Lipschitz (in the sense of (4.1)). Recall  = (1 - )-1.

V ,M - V ,M  L SE

M (S, A) - M (S, A)

A(·|S)

(4.2)

However, in RHS in equation 4.2 cannot serve as a discrepancy bound because it does not satisfy the requirement (R3) -- to optimize it over  we need to collect samples from  for every iterate  --
the state distribution of the policy  on the real model M . The main proposition of this subsection
stated next shows that for every  in the neighborhood of a reference policy ref, we can replace the distribution  be a fixed distribution ref with incurring only a higher order approximation. We use
the expected KL divergence between two  and ref to define the neighborhood:

dKL(, ref) = E KL((·|S), ref(·|S))1/2 S

(4.3)

5

Under review as a conference paper at ICLR 2019

Proposition 4.2. In the same setting of Lemma 4.1, assume in addition that  is close to a reference policy ref in the sense that dKL(, ref)  , and that the states in S are uniformly bounded in the sense that s  B, s  S. Then,

V ,M - V ,M  L E

M (S, A) - M (S, A) + 22B

Sref

A(·|S)

(4.4)

In a benign scenario, the second term in the RHS of equation (4.4) should be dominated by the first term when the neighborhood size  is sufficiently small. Moreover, the term B can also be replaced
by maxS,A M (S, A) - M (S, A) (see the proof that is deferred to Section C.). The dependency on  may not be tight for real-life instances, but we note that most analysis of similar nature loses the additional  factor Schulman et al. (2015a); Achiam et al. (2017), and it's inevitable in the worst-case.

A telescoping lemma. Towards proving Propositions 4.2 and deriving stronger discrepancy bound,
we define the following quantity that captures the discrepancy between M and M on a single state-action pair (s, a).

G,M (s, a) = E V ,M (s^ ) - E V ,M (s )

s^ M (·|s,a)

s M (·|s,a)

(4.5)

Note that if M, M are deterministic, then G,M (s, a) = V ,M (M (s, a)) - V ,M (M (s, a)). We give a telescoping lemma that decompose the discrepancy between V ,M and V ,M into the expected single-step discrepancy G.
Lemma 4.3. [Telescoping Lemma] Recall that  := (1 - )-1. For any policy  and dynamical
models M, M , we have that

V ,M - V ,M =  E

G,M (S, A)

S,M

A(·|S)

(4.6)

The proof is reminiscent of the telescoping expansion in Kakade & Langford (2002) (c.f. Schulman
et al. (2015a)) for characterizing the value difference of two policies, but we apply it to deal
with the discrepancy between models. The detail is deferred to Section B. With the telescoping
Lemma 4.3, Proposition 4.1 follows straightforwardly from Lipschitzness of the imaginary value function. Proposition 4.2 follows from that  and ref are close. We defer the proof to Appendix C.

4.2 REPRESENTATION-INVARIANT DISCREPANCY BOUNDS
The main limitation of the norm-based discrepancy bounds in previous subsection is that it depends on the state representation. Let T be a one-to-one map from the state space S to some other space S , and for simplicity of this discussion let's assume a model M is deterministic. Then if we represent every state s by its transformed representation T s, then the transformed model M T defined as M T (s, a) T M (T -1s, a) together with the transformed reward RT (s, a) R(T -1s, a) and transformed policy T (s) (T -1s) is equivalent to the original set of the model, reward, and policy in terms of the performance (Lemma C.1). Thus such transformation T is not identifiable from only observing the reward. However, the norm in the state space is a notion that depends on the hidden choice of the transformation T . 4
Another limitation is that the loss for the model learning should also depend on the state itself instead of only on the difference M (S, A) - M (S, A). It is possible that when S is at a critical position, the prediction error needs to be highly accurate so that the model M can be useful for planning. On the other hand, at other states, the dynamical model is allowed to make bigger mistakes because they are not essential to the reward.
We propose the following discrepancy bound towards addressing the limitations above. Recall the definition of G,M (s, a) = V ,M (M (s, a)) - V ,M (M (s, a)) which measures the difference
4That said, in many cases the reward function itself is known, and the states have physical meanings, and therefore we may be able to use the domain knowledge to figure out the best norm.

6

Under review as a conference paper at ICLR 2019

between M (s, a)) and M (s, a) according to their imaginary rewards. We construct a discrepancy bound using the absolute value of G. Let's define 1 and max as the average of |G,M^ | and
its maximum: 1 = ESref G,M (S, A) and max = maxS G,M (S) where G,M (S) =

EA

G,M (S, A)

.

We

will

show

that

the

following

discrepancy

bound

DG
ref

(M

,

)

satisfies

the

property (R1), (R2).

DG
ref

(M

,

)

=



·

1

+

2max

(4.7)

Proposition 4.4. Let dKL and DG be defined as in equation (4.3) and (4.7). Then the choice d = dKL and D = DG satisfies the basic requirements (equation (R1) and (R2)). Moreover, G is invariant
w.r.t any one-to-one transformation of the state space (in the sense of equation C.3 in the proof).

The proof follows from the telescoping lemma (Lemma 4.3) and is deferred to Section C. We remark that the first term 1 can in principle be estimated and optimized approximately: the expectation be replaced by empirical samples from ref , and G,M^ is an analytical function of  and
M when they are both deterministic, and therefore can be optimized by back-propagation through
time (BPTT). (When  and M and are stochastic with a re-parameterizable noise such as Gaussian distribution Kingma & Welling (2013), we can also use back-propagation to estimate the gradient.) The second term in equation (4.7) is difficult to optimize because it involves the maximum. However, it can be in theory considered as a second-order term because  can be chosen to be a fairly small number. (In the refined bound in Section A, the dependency on  is even milder.)
Remark 4.5. Proposition 4.4 intuitively suggests a technical reason of why model-based approach can be more sample-efficient than policy gradient based algorithms such as TRPO or PPO (Schulman
et al., 2015a; 2017). The approximation error of V ,M in model-based approach decreases as the model error 1, max decrease or the neighborhood size  decreases, whereas the approximation error in policy gradient only linearly depends on the the neighborhood size Schulman et al. (2015a). In other words, model-based algorithms can trade model accuracy for a larger neighborhood size, and therefore the convergence can be faster (in terms of outer iterations.) This is consistent with our empirical observation that the model can be accurate in a descent neighborhood of the current policy so that the constraint (3.4) can be empirically dropped. We also refine our bonds in Section A, where the discrepancy bounds is proved to decay faster in .

5 ADDITIONAL RELATED WORK
Model-based reinforcement learning is expected to require fewer samples than model-free algorithms (Deisenroth et al., 2013) and has been successfully applied to robotics in both simulation and in the real world (Deisenroth & Rasmussen, 2011b; Morimoto & Atkeson, 2003; Deisenroth et al., 2011) using dynamical models ranging from Gaussian process (Deisenroth & Rasmussen, 2011b; Ko & Fox, 2009), time-varying linear models (Levine & Koltun, 2013; Lioutikov et al., 2014; Levine & Abbeel, 2014; Yip & Camarillo, 2014), mixture of Gaussians (Khansari-Zadeh & Billard, 2011), to neural networks (Hunt et al., 1992; Nagabandi et al., 2017; Kurutach et al., 2018; Tangkaratt et al., 2014; Sanchez-Gonzalez et al., 2018; Pascanu et al., 2017). In particular, the work of Kurutach et al. (2018) uses an ensemble of neural networks to learn the dynamical model, and significantly reduces the sample complexity compared to model-free approaches. The work of Chua et al. (2018) makes further improvement by using a probabilistic model ensemble. Clavera et al. (Clavera et al., 2018) extended this method with meta-policy optimization and improve the robustness to model error. In contrast, we focus on theoretical understanding of model-based RL and the design of new algorithms, and our experiments use a single neural network to estimate the dynamical model.
Our discrepancy bound in Section 4 is closely related to the work (Farahmand et al., 2017) on the value-aware model loss. Our approach differs from it in three details: a) we use the absolute value of the value difference instead of the squared difference; b) we use the imaginary value function from the estimated dynamical model to define the loss, which makes the loss purely a function of the estimated model and the policy; c) we show that the iterative algorithm, using the loss function as a building block, can converge to a local maximum, partly by cause of the particular choices made in a) and b). Asadi et al. (2018) also study the discrepancy bounds under Lipschitz condition of the MDP.

7

Under review as a conference paper at ICLR 2019

Prior work explores a variety of ways of combining model-free and model-based ideas to achieve the best of the two methods (Sutton, 1991; 1990; Racanière et al., 2017; Mordatch et al., 2016). For example, estimated models (Levine & Koltun, 2013; Gu et al., 2016; Kalweit & Boedecker, 2017) are used to enrich the replay buffer in the model-free off-policy RL. Pong et al. (2018b) proposes goalconditioned value functions trained by model-free algorithms and uses it for model-based controls. Feinberg et al. (2018); Buckman et al. (2018) use dynamical models to improve the estimation of the value functions in the model-free algorithms.
On the control theory side, Dean et al. (2018; 2017) provide strong finite sample complexity bounds for solving linear quadratic regulator using model-based approach. Boczar et al. (2018) provide finitedata guarantees for the "coarse-ID control" pipeline, which is composed of a system identification step followed by a robust controller synthesis procedure. Our method is inspired by the general idea of maximizing a low bound of the reward in (Dean et al., 2017). By contrast, our work applies to non-linear dynamical systems. Our algorithms also estimate the models iteratively based on trajectory samples from the learned policies.
Strong model-based and model-free sample complexity bounds have been achieved in the tabular case (finite state space). We refer the readers to (Kakade et al., 2018; Dann et al., 2017; Szita & Szepesvári, 2010; Kearns & Singh, 2002; Jaksch et al., 2010) and the reference therein. Our work focus on continuous and high-dimensional state space (though the results also apply to tabular case).
Another line of work of model-based reinforcement learning is to learn a dynamic model in a hidden representation space, which is especially necessary for pixel state spaces (Kakade et al., 2018; Dann et al., 2017; Szita & Szepesvári, 2010; Kearns & Singh, 2002; Jaksch et al., 2010). Srinivas et al. (2018) shows the possibility to learn an abstract transition model to imitate expert policy. Oh et al. (2017) learns the hidden state of a dynamical model to predict the value of the future states and applies RL or planning on top of it. Serban et al. (2018); Ha & Schmidhuber (2018) learns a bottleneck representation of the states. Our framework can be potentially combined with this line of research.

6 PRACTICAL IMPLEMENTATION AND EXPERIMENTS

6.1 PRACTICAL IMPLEMENTATION

We design with simplification of our framework a variant of model-based RL algorithms, Stochastic
Lower Bound Optimization (SLBO). First, we removed the constraints (3.4). Second, we stop the gradient w.r.t M (but not ) from the occurrence of M in V ,M in equation (3.3) (and thus our
practical implementation is not optimism-driven.)

Extending the discrepancy bound in Section 4.1, we use a multi-step prediction loss for learning the models with 2 norm. For a state st and action sequence at:t+h, we define the h-step prediction s^t+h
as s^t = st, and for h  0, s^t+h+1 = M(s^t+h, at+h), The H-step loss is then defined as

L(H)((st:t+h, at:t+h); )

=

1 H

H

s^t+i - st+i 2.

i=1

(6.1)

A similar loss is also used in Nagabandi et al. (2017) for validation. We note that we use 2-norm instead of the square of 2 norm. The loss function we attempt to optimize at iteration k is thus5

max V ,sg(M) - 

E

, (st:t+h,at:t+h)k ,M

L(H)((st:t+h, at:t+h); )

(6.2)

where  is a tunable parameter and sg denotes the stop gradient operation.

We note that the term V ,sg(M) depends on both the parameter  and the parameter  but there is no gradient passed through , whereas L(H) only depends on the . We optimize equation (6.2) by alternatively maximizing V ,sg(M) and minimizing L(H): for the former, we use TRPO with
samples from the estimated dynamical model M (by treating M as a fixed simulator), and for

5This is technically not a well-defined mathematical objective. The sg operation means to identity when the function is evaluated, whereas when computing the update, sg(M) is considered fixed.

8

Under review as a conference paper at ICLR 2019

the latter we use standard stochastic gradient methods. Algorithm 2 gives a pseudo-code for the
algorithm. The nmodel and npolicy iterations are used to balance the number of steps of TRPO and Adam updates within the loop indexed by ninner.6

Algorithm 2 Stochastic Lower Bound Optimization (SLBO)

1: Initialize model network parameters  and policy network parameters 

2: Initialize dataset D  

3: for nouter iterations do 4: D  D  { collect ncollect samples from real environment using  with noises }

5: for ninner iterations do

optimize (6.2) with stochastic alternating updates

6: for nmodel iterations do 7: optimize (6.1) over  with sampled data from D by one step of Adam

8: for npolicy iterations do

9: D  { collect ntrpo samples using M as dynamics } 10: optimize  by running TRPO on D

Power of stochasticity and connection to standard MB RL: We identify the main advantage of our algorithms over standard model-based RL algorithms is that we alternate the updates of the model and the policy within an outer iteration. By contrast, most of the existing model-based RL methods only optimize the models once (for a lot of steps) after collecting a batch of samples (see Algorithm 3 for an example). The stochasticity introduced from the alternation with stochastic samples seems to dramatically reduce the overfitting (of the policy to the estimated dynamical model) in a way similar to that SGD regularizes ordinary supervised training. 7 Another way to view the algorithm is that the model obtained from line 7 of Algorithm 2 at different inner iteration serves as an ensemble of models. We do believe that a cleaner and easier instantiation of our framework (with optimism) exists, and the current version, though performing very well, is not necessarily the best implementation.
Entropy regularization: An additional component we apply to SLBO is the commonly-adopted entropy regularization in policy gradient method (Williams & Peng, 1991; Mnih et al., 2016), which was found to significantly boost the performance in our experiments (ablation study in Appendix F.5). Specifically, an additional entropy term is added to the objective function in TRPO. We hypothesize that entropy bonus helps exploration, diversifies the collected data, and thus prevents overfitting.

6.2 EXPERIMENTAL RESULTS
We evaluate our algorithm SLBO (Algorithm 2) on five continuous control tasks from rllab (Duan et al., 2016), including Swimmer, Half Cheetah, Humanoid, Ant, Walker. All environments we test have a maximum horizon of 500, which is longer than most of the existing model-based RL work (Nagabandi et al., 2017; Kurutach et al., 2018). (Environments with longer horizons are commonly harder to train.) More details can be found in Appendix F.1.
Baselines. We compare our algorithm with 3 other algorithms including: (1) Soft Actor-Critic (SAC) (Haarnoja et al., 2018), the state-of-the-art model-free off-policy algorithm in sample efficiency; (2) Trust-Region Policy Optimization (TRPO) (Schulman et al., 2015a), a policy-gradient based algorithm; and (3) Model-Based TRPO, a standard model-based algorithm described in Algorithm 3. Details of these algorithms can be found in Appendix F.4.8
The result is shown in Figure 1. In Fig 1, our algorithm shows superior convergence rate (in number of samples) than all the baseline algorithms while achieving better final performance with 1M samples.
6In principle, to balance the number of steps, it suffices to take one of nmodel and npolicy to be 1. However, empirically we found the optimal balance is achieved with larger nmodel and npolicy, possibly due to complicated interactions between the two optimization problem.
7Similar stochasticity can potentially be obtained by an extreme hyperparameter choice of the standard MB RL algorithm: in each outer iteration of Algorithm 3, we only sample a very small number of trajectories and take a few model updates and policy updates. We argue our interpretation of stochastic optimization of the lower bound (6.2) is more natural in that it reveals the regularization from stochastic optimization.
8We did not have the chance to implement the competitive random search algorithms in (Mania et al., 2018) yet, although our test performance with 500 episode length is higher than theirs with 1000 episode on Half Cheetach (3950 by ours vs 2345 by theirs) and Walker (3650 by ours vs 894 by theirs).

9

Under review as a conference paper at ICLR 2019

Specifically, we mark model-free TRPO performance after 8 million steps by the dotted line in Fig 1 and find out that our algorithm can achieve comparable or better final performance in one million steps. For ablation study, we also add the performance of SLBO-MSE, which corresponds to running SLBO with squared 2 model loss instead of 2. SLBO-MSE performs significantly worse than SLBO on four environments, which is consistent with our derived model loss in Section 4.1. Ablation study of multi-step model training can be found in Appendix F.5. Our code will be released soon.

Average Return Average Return Average Return

120 100 80 60 40 20
0 0.0

0.2 # sa0m.4ples (m0.i6llion) 0.8

1.0

4000 3000 2000 1000
0 0.0

0.2 # sa0m.4ples (m0.i6llion) 0.8

1.0

3500 3000 2500 2000 1500 1000 500
0 0.0

0.2 # sa0m.4ples (m0.i6llion) 0.8

1.0

Average Return Average Return

(a) Swimmer
4000 3500 3000 2500 2000 1500 1000 500
0 0.0

(b) Half Cheetah
1000

800

600

400

200

0.2 # sa0m.4ples (m0.i6llion) 0.8 1.0

0 0.0

0.2 # sa0m.4ples (m0.i6llion) 0.8

(c) Ant
1.0

(d) Walker
SLBO SLBO-MSE

(e) Humanoid

MB-TRPO

SAC

MF-TRPO

Figure 1: Comparison between SLBO (ours), SLBO with squared 2 model loss (SLBO-MSE), vanilla model-based TRPO (MB-TRPO), model-free TRPO (MF-TRPO), and Soft Actor-Critic (SAC). We average the results over 10 different random seeds, where the solid lines indicate the mean and shaded areas indicate one standard deviation. The dotted reference lines are the total rewards of MF-TRPO after 8 million steps.

7 CONCLUSIONS
We devise a novel algorithmic framework for designing and analyzing model-based RL algorithms with the guarantee to convergence monotonically to a local maximum of the reward. Experimental results show that our proposed algorithm (SLBO) achieves new state-of-the-art performance on several mujoco benchmark tasks when one million or fewer samples are permitted.
A compelling (but obvious) empirical open question then given rise to is whether model-based RL can achieve near-optimal reward on other more complicated tasks or real-world robotic tasks with fewer samples. We believe that understanding the trade-off between optimism and robustness is essential to design more sample-efficient algorithms. Currently, we observed empirically that the optimism-driven part of our proposed meta-algorithm (optimizing V ,M over M ) may lead to instability in the optimization, and therefore don't in general help the performance. It's left for future work to find practical implementation of the optimism-driven approach.
In our theory, we assume that the parameterized model class contains the true dynamical model. Removing this assumption is also another interesting open question. It would be also very interesting if the theoretical analysis can be applied other settings involving model-based approaches (e.g., model-based imitation learning).
10

Under review as a conference paper at ICLR 2019
REFERENCES
Yasin Abbasi-Yadkori and Csaba Szepesvári. Regret bounds for the adaptive control of linear quadratic systems. In Proceedings of the 24th Annual Conference on Learning Theory, pp. 1­26, 2011.
Joshua Achiam, David Held, Aviv Tamar, and Pieter Abbeel. Constrained policy optimization. arXiv preprint arXiv:1705.10528, 2017.
Kavosh Asadi, Dipendra Misra, and Michael L Littman. Lipschitz continuity in model-based reinforcement learning. arXiv preprint arXiv:1804.07193, 2018.
Peter L Bartlett and Ambuj Tewari. Regal: A regularization based algorithm for reinforcement learning in weakly communicating mdps. In Proceedings of the Twenty-Fifth Conference on Uncertainty in Artificial Intelligence, pp. 35­42. AUAI Press, 2009.
Ross Boczar, Nikolai Matni, and Benjamin Recht. Finite-data performance guarantees for the output-feedback control of an unknown system. arXiv preprint arXiv:1803.09186, 2018.
J. Buckman, D. Hafner, G. Tucker, E. Brevdo, and H. Lee. Sample-Efficient Reinforcement Learning with Stochastic Ensemble Value Expansion. ArXive-prints, July 2018.
Kurtland Chua, Roberto Calandra, Rowan McAllister, and Sergey Levine. Deep reinforcement learning in a handful of trials using probabilistic dynamics models. arXiv preprint arXiv:1805.12114, 2018.
Ignasi Clavera, Jonas Rothfuss, John Schulman, Yasuhiro Fujita, Tamim Asfour, and Pieter Abbeel. Model-based reinforcement learning via meta-policy optimization. arXiv preprint arXiv:1809.05214, 2018.
Thomas M Cover and Joy A Thomas. Elements of information theory. John Wiley & Sons, 2012.
Christoph Dann, Tor Lattimore, and Emma Brunskill. Unifying pac and regret: Uniform pac bounds for episodic reinforcement learning. In Advances in Neural Information Processing Systems, pp. 5713­5723, 2017.
Sarah Dean, Horia Mania, Nikolai Matni, Benjamin Recht, and Stephen Tu. On the sample complexity of the linear quadratic regulator. arXiv preprint arXiv:1710.01688, 2017.
Sarah Dean, Horia Mania, Nikolai Matni, Benjamin Recht, and Stephen Tu. Regret bounds for robust adaptive control of the linear quadratic regulator. arXiv preprint arXiv:1805.09388, 2018.
Marc Deisenroth and Carl E Rasmussen. Pilco: A model-based and data-efficient approach to policy search. In Proceedings of the 28th International Conference on machine learning (ICML-11), pp. 465­472, 2011a.
Marc Deisenroth and Carl E Rasmussen. Pilco: A model-based and data-efficient approach to policy search. In Proceedings of the 28th International Conference on machine learning (ICML-11), pp. 465­472, 2011b.
Marc Peter Deisenroth, Carl Edward Rasmussen, and Dieter Fox. Learning to control a low-cost manipulator using data-efficient reinforcement learning. 2011.
Marc Peter Deisenroth, Gerhard Neumann, Jan Peters, et al. A survey on policy search for robotics. Foundations and Trends R in Robotics, 2(1­2):1­142, 2013.
Yan Duan, Xi Chen, Rein Houthooft, John Schulman, and Pieter Abbeel. Benchmarking deep reinforcement learning for continuous control. In International Conference on Machine Learning, pp. 1329­1338, 2016.
Amir-massoud Farahmand, Andre Barreto, and Daniel Nikovski. Value-aware loss function for model-based reinforcement learning. In Artificial Intelligence and Statistics, pp. 1486­1494, 2017.
Vladimir Feinberg, Alvin Wan, Ion Stoica, Michael I Jordan, Joseph E Gonzalez, and Sergey Levine. Modelbased value estimation for efficient model-free reinforcement learning. arXiv preprint arXiv:1803.00101, 2018.
Ronan Fruit, Matteo Pirotta, Alessandro Lazaric, and Ronald Ortner. Efficient bias-span-constrained explorationexploitation in reinforcement learning. arXiv preprint arXiv:1802.04020, 2018.
Shixiang Gu, Timothy Lillicrap, Ilya Sutskever, and Sergey Levine. Continuous deep q-learning with modelbased acceleration. In International Conference on Machine Learning, pp. 2829­2838, 2016.
David Ha and Jürgen Schmidhuber. World models. arXiv preprint arXiv:1803.10122, 2018.
Tuomas Haarnoja, Aurick Zhou, Pieter Abbeel, and Sergey Levine. Soft actor-critic: Off-policy maximum entropy deep reinforcement learning with a stochastic actor. arXiv preprint arXiv:1801.01290, 2018.
11

Under review as a conference paper at ICLR 2019
Karl Hinderer. Lipschitz continuity of value functions in markovian decision processes. Mathematical Methods of Operations Research, 62(1):3­22, 2005.
K Jetal Hunt, D Sbarbaro, R Z bikowski, and Peter J Gawthrop. Neural networks for control systems--a survey. Automatica, 28(6):1083­1112, 1992.
Thomas Jaksch, Ronald Ortner, and Peter Auer. Near-optimal regret bounds for reinforcement learning. Journal of Machine Learning Research, 11(Apr):1563­1600, 2010.
S. Kakade, M. Wang, and L. F. Yang. Variance Reduction Methods for Sublinear Reinforcement Learning. ArXiv e-prints, February 2018.
Sham Kakade and John Langford. Approximately optimal approximate reinforcement learning. In ICML, volume 2, pp. 267­274, 2002.
Gabriel Kalweit and Joschka Boedecker. Uncertainty-driven imagination for continuous deep reinforcement learning. In Conference on Robot Learning, pp. 195­206, 2017.
Michael Kearns and Satinder Singh. Near-optimal reinforcement learning in polynomial time. Machine learning, 49(2-3):209­232, 2002.
S Mohammad Khansari-Zadeh and Aude Billard. Learning stable nonlinear dynamical systems with gaussian mixture models. IEEE Transactions on Robotics, 27(5):943­957, 2011.
Diederik P Kingma and Max Welling. Auto-encoding variational bayes. arXiv preprint arXiv:1312.6114, 2013.
Jonathan Ko and Dieter Fox. Gp-bayesfilters: Bayesian filtering using gaussian process prediction and observation models. Autonomous Robots, 27(1):75­90, 2009.
Thanard Kurutach, Ignasi Clavera, Yan Duan, Aviv Tamar, and Pieter Abbeel. Model-ensemble trust-region policy optimization. arXiv preprint arXiv:1802.10592, 2018.
Kailasam Lakshmanan, Ronald Ortner, and Daniil Ryabko. Improved regret bounds for undiscounted continuous reinforcement learning. In International Conference on Machine Learning, pp. 524­532, 2015.
Sergey Levine and Pieter Abbeel. Learning neural network policies with guided policy search under unknown dynamics. In Advances in Neural Information Processing Systems, pp. 1071­1079, 2014.
Sergey Levine and Vladlen Koltun. Guided policy search. In International Conference on Machine Learning, pp. 1­9, 2013.
Sergey Levine, Chelsea Finn, Trevor Darrell, and Pieter Abbeel. End-to-end training of deep visuomotor policies. The Journal of Machine Learning Research, 17(1):1334­1373, 2016.
Timothy P Lillicrap, Jonathan J Hunt, Alexander Pritzel, Nicolas Heess, Tom Erez, Yuval Tassa, David Silver, and Daan Wierstra. Continuous control with deep reinforcement learning. arXiv preprint arXiv:1509.02971, 2015.
Rudolf Lioutikov, Alexandros Paraschos, Jan Peters, and Gerhard Neumann. Sample-based informationl-theoretic stochastic optimal control. In Robotics and Automation (ICRA), 2014 IEEE International Conference on, pp. 3896­3902. IEEE, 2014.
Horia Mania, Aurelia Guy, and Benjamin Recht. Simple random search provides a competitive approach to reinforcement learning. arXiv preprint arXiv:1803.07055, 2018.
Volodymyr Mnih, Koray Kavukcuoglu, David Silver, Andrei A Rusu, Joel Veness, Marc G Bellemare, Alex Graves, Martin Riedmiller, Andreas K Fidjeland, Georg Ostrovski, et al. Human-level control through deep reinforcement learning. Nature, 518(7540):529, 2015.
Volodymyr Mnih, Adria Puigdomenech Badia, Mehdi Mirza, Alex Graves, Timothy Lillicrap, Tim Harley, David Silver, and Koray Kavukcuoglu. Asynchronous methods for deep reinforcement learning. In International conference on machine learning, pp. 1928­1937, 2016.
Teodor Mihai Moldovan, Sergey Levine, Michael I Jordan, and Pieter Abbeel. Optimism-driven exploration for nonlinear systems. In Robotics and Automation (ICRA), 2015 IEEE International Conference on, pp. 3239­3246. IEEE, 2015.
Igor Mordatch, Nikhil Mishra, Clemens Eppner, and Pieter Abbeel. Combining model-based policy search with online model learning for control of physical humanoids. In RoboticsandAutomation(ICRA),2016IEEEInternationalConferenceon, pp. 242­248. IEEE, 2016.
12

Under review as a conference paper at ICLR 2019
Jun Morimoto and Christopher G Atkeson. Minimax differential dynamic programming: An application to robust biped walking. In Advances in neural information processing systems, pp. 1563­1570, 2003.
Anusha Nagabandi, Gregory Kahn, Ronald S Fearing, and Sergey Levine. Neural network dynamics for model-based deep reinforcement learning with model-free fine-tuning. arXiv preprint arXiv:1708.02596, 2017.
Frank Nielsen and Richard Nock. On the chi square and higher-order chi distances for approximating fdivergences. IEEE Signal Processing Letters, 21(1):10­13, 2014.
Junhyuk Oh, Satinder Singh, and Honglak Lee. Value prediction network. In Advances in NeuralInformationProcessingSystems, pp. 6118­6128, 2017.
Razvan Pascanu, Yujia Li, Oriol Vinyals, Nicolas Heess, Lars Buesing, Sebastien Racanière, David Reichert, Théophane Weber, Daan Wierstra, and Peter Battaglia. Learning model-based planning from scratch. arXiv preprint arXiv:1707.06170, 2017.
Matteo Pirotta, Marcello Restelli, and Luca Bascetta. Adaptive step-size for policy gradient methods. In Advances in Neural Information Processing Systems, pp. 1394­1402, 2013.
Matteo Pirotta, Marcello Restelli, and Luca Bascetta. Policy gradient in lipschitz markov decision processes. Machine Learning, 100(2-3):255­283, 2015.
Vitchyr Pong, Shixiang Gu, Murtaza Dalal, and Sergey Levine. Temporal difference models: Model-free deep rl for model-based control. arXiv preprint arXiv:1802.09081, 2018a.
Vitchyr Pong, Shixiang Gu, Murtaza Dalal, and Sergey Levine. Temporal difference models: Model-free deep rl for model-based control. International Conference on Learning Representations, 2018b.
Sébastien Racanière, Théophane Weber, David Reichert, Lars Buesing, Arthur Guez, Danilo Jimenez Rezende, Adrià Puigdomènech Badia, Oriol Vinyals, Nicolas Heess, Yujia Li, et al. Imagination-augmented agents for deep reinforcement learning. In AdvancesinNeuralInformationProcessingSystems, pp. 5690­5701, 2017.
Alvaro Sanchez-Gonzalez, Nicolas Heess, Jost Tobias Springenberg, Josh Merel, Martin Riedmiller, Raia Hadsell, and Peter Battaglia. Graph networks as learnable physics engines for inference and control. arXiv preprint arXiv:1806.01242, 2018.
Igal Sason and Sergio Verdú. f -divergence inequalities. IEEE Transactions on Information Theory, 62(11): 5973­6006, 2016.
John Schulman, Sergey Levine, Pieter Abbeel, Michael Jordan, and Philipp Moritz. Trust region policy optimization. In International Conference on Machine Learning, pp. 1889­1897, 2015a.
John Schulman, Philipp Moritz, Sergey Levine, Michael Jordan, and Pieter Abbeel. High-dimensional continuous control using generalized advantage estimation. arXiv preprint arXiv:1506.02438, 2015b.
John Schulman, Filip Wolski, Prafulla Dhariwal, Alec Radford, and Oleg Klimov. Proximal policy optimization algorithms. arXiv preprint arXiv:1707.06347, 2017.
Iulian Vlad Serban, Chinnadhurai Sankar, Michael Pieper, Joelle Pineau, and Yoshua Bengio. The bottleneck simulator: A model-based deep reinforcement learning approach. arXiv preprint arXiv:1807.04723, 2018.
David Silver, Julian Schrittwieser, Karen Simonyan, Ioannis Antonoglou, Aja Huang, Arthur Guez, Thomas Hubert, Lucas Baker, Matthew Lai, Adrian Bolton, et al. Mastering the game of go without human knowledge. Nature, 550(7676):354, 2017.
Max Simchowitz, Horia Mania, Stephen Tu, Michael I Jordan, and Benjamin Recht. Learning without mixing: Towards a sharp analysis of linear system identification. arXiv preprint arXiv:1802.08334, 2018.
Aravind Srinivas, Allan Jabri, Pieter Abbeel, Sergey Levine, and Chelsea Finn. Universal planning networks. arXiv preprint arXiv:1804.00645, 2018.
Richard S Sutton. Integrated architectures for learning, planning, and reacting based on approximating dynamic programming. In Machine Learning Proceedings 1990, pp. 216­224. Elsevier, 1990.
Richard S Sutton. Dyna, an integrated architecture for learning, planning, and reacting. ACM SIGART Bulletin, 2(4):160­163, 1991.
Richard S Sutton, Csaba Szepesvári, Alborz Geramifard, and Michael P Bowling. Dyna-style planning with linear function approximation and prioritized sweeping. arXiv preprint arXiv:1206.3285, 2012.
13

Under review as a conference paper at ICLR 2019

István Szita and Csaba Szepesvári. Model-based reinforcement learning with nearly tight exploration complexity bounds. In Proceedings of the 27th International Conference on Machine Learning (ICML-10), pp. 1031­1038, 2010.
Aviv Tamar, Dotan Di Castro, and Ron Meir. Integrating a partial model into model free reinforcement learning. Journal of Machine Learning Research, 13(Jun):1927­1966, 2012.
Voot Tangkaratt, Syogo Mori, Tingting Zhao, Jun Morimoto, and Masashi Sugiyama. Model-based policy gradients with parameter-based exploration by least-squares conditional density estimation. Neural networks, 57:128­140, 2014.
Emanuel Todorov, Tom Erez, and Yuval Tassa. Mujoco: A physics engine for model-based control. In Intelligent Robots and Systems (IROS), 2012 IEEE/RSJ International Conference on, pp. 5026­5033. IEEE, 2012.
Ronald J Williams and Jing Peng. Function optimization using connectionist reinforcement learning algorithms. Connection Science, 3(3):241­268, 1991.
Chris Xie, Sachin Patil, Teodor Moldovan, Sergey Levine, and Pieter Abbeel. Model-based reinforcement learning with parametrized physical models and optimism-driven exploration. In 2016 IEEE International Conference on Robotics and Automation (ICRA), pp. 504­511. IEEE, 2016.
Michael C Yip and David B Camarillo. Model-less feedback control of continuum manipulators in constrained environments. IEEE Transactions on Robotics, 30(4):880­889, 2014.

A REFINED BOUNDS

The theoretical limitation of the discrepancy bound DG(M , ) is that the second term involving max is not rigorously optimizable by stochastic samples. In the worst case, there seem to exist situations
where such infinity norm of G,M is inevitable. In this section we tighten the discrepancy bounds with a different closeness measure d, 2-divergence, in the policy space, and the dependency on the max is smaller (though not entirely removed.) We note that 2-divergence has the same second order approximation as KL-divergence around the local neighborhood the reference policy and thus locally
affects the optimization much.

We start by defining a re-weighted version  of the distribution  where examples in later step are slightly weighted up. We can effectively sample from  by importance sampling from 

Definition A.1. For a policy , define  as the re-weighted version of discounted distribution of

the states visited  = (1 - )2

by  on M . Recall

 t=1

t t-1 pSt

.

that

pSt

is

the

distribution

of

the

state

at

step

t,

we

define

Then we are ready to state our discrepancy bound. Let

d2 (, ref) = max{ E 2((·|S), ref(·|S)) , E 2((·|S), ref(·|S)) }

Sref

Sref

(A.1)

D2
ref

(M

,

)

=

1

+

2

+

3/23/2max

(A.2)

where 2 = ESref f 2 and 1, max are defined in equation (4.2).

Proposition A.2. The discrepancy bound D2 and closeness measure d2 satisfies requirements (R1) and (R2).

We defer the proof to Section C so that we can group relevant proofs with similar tools together. Some of these tools may be of independent interests and used for better analysis of model-free reinforcement learning algorithms such as TRPO Schulman et al. (2015a), PPO Schulman et al. (2017) and CPO Achiam et al. (2017).

14

Under review as a conference paper at ICLR 2019

B PROOF OF LEMMA 4.3

Proof of Lemma 4.3. Let Wj be the cumulative reward when we use dynamical model M for j steps and then M for the rest of the steps, that is,

Wj =

E

t0,At  (·|St )

j>t0,St+1M (·|St,At)

tj,St+1M (·|St,At)


tR(St, At) | S0 = s
t=0

(B.1)

By definition, we have that W = V ,M (s) and W0 = V ,M (s). Then, we decompose the target into a telescoping sum,


V ,M (s) - V ,M (s) = (Wj+1 - Wj )
j=0

(B.2)

Now we re-write each of the summands Wj+1 - Wj. Comparing the trajectory distribution in the definition of Wj+1 and Wj, we see that they only differ in the dynamical model applied in j-th step. Concretely, Wj and Wj+1 can be rewritten as Wj = R + ESj ,Aj ,M ES^j+1M(·|Sj ,Aj ) j+1V ,M (S^j+1) and Wj+1 = R +
ESj,Aj,M ESj+1M(·|Sj,Aj) j+1V ,M (Sj+1) where R denotes the reward from the first j
steps from policy  and model M . Canceling the shared term in the two equations above, we get



Wj+1 - Wj = j+1

E

 

E

V ,M (Sj+1) - V ,M (Sj+1)

 

Sj ,Aj ,M S^j+1M (·|Sj ,Aj )



Sj+1M (·|Sj ,Aj )

Combining the equation above with equation (B.2) concludes that

(B.3)

V ,M

- V ,M

=

 1-

S

E
,A(S)

E V ,M (S ) - E V ,M (S^ )

S M (·|S,A)

S^ M (·|S,A)

C MISSING PROOFS IN SECTION 4

Lemma C.1. Suppose for simplicity the model and the policy are both deterministic. For any oneto-one transformation from S to S , let M T (s, a) T M (T -1s, a), RT (s, a) R(T -1s, a), and T (s) (T -1s) be a set of transformed model, reward and policy. Then we have that (M, , R) is equivalent to (M T , T , RT ) in the sense that
V T ,MT (T s) = V ,M (s)
where the value function V T ,MT is defined with respect to RT .

Proof. Let sT0 = T s, . . . , be the sequence of states visited by policy T on model M T starting from s. We have that s0T = T s = T s0. We prove by induction that sTt = T st. Assume this is true for some value t, then we prove that st+1T = T st+1 holds:

stT+1 = M T (stT , T (sTt )) = M T (T st, T (T st)) = T M (st, (st)) = T st+1

(by inductive hypothesis) (by defintion of M T , T )
(C.1)

Thus we have RT (sTt , aTt ) = R(st, at). Therefore V T ,MT (T s) = V ,M (s).

15

Under review as a conference paper at ICLR 2019

Proof of Proposition 4.4. We first show the invariant of G under deterministic models and policies. The same result applies to stochastic policies with slight modification. Let sT = T s. We consider the transformation applied to M and M and the resulting G function

GT (sT , a) |V T ,MT (M T (sT , a)) - V T ,MT (M ,T (sT , a))|

(C.2)

Note that by Lemma C.1, we have that V T ,MT (M T (sT , a)) = V ,M (T -1M T (sT , a)) = V ,M (M (s, a)). Similarly, V T ,MT (M ,T (sT , a)) = V ,M (M (s, a)). Therefore we obtain
that

GT (sT , a) = G(s, a)

(C.3)

By Lemma 4.3 and triangle inequality, we have that

1- 

V ,M - V ,M

E
S

G,M (S)

(triangle inequality)

 ESref

G,M (S)

+ | - ref |1 · max G,M (S)
S

(Holder inequality)

By Corollary E.7 we have that | - ref |1 


E1- Sref

KL((S), ref(S))1/2|S

=

 1-

.

Combining this with the equation above, we complete the proof.

Proof of Proposition A.2. Let µ be the distribution of the state-to-state transition kernel under policy  and

the initial ref. Let

state G¯ =

S0, and (1 - )

let P
 k=0

and P be kP k and

G¯ = (1 - )

 k=0



k

P

k.

Under these notations, we can re-write ref

=

G¯µ and 

=

G¯ µ.

Moreover, we observe that ref = G¯P G¯µ.

Let 1 = (1 - )G2¯µ(P , P )1/2 and 2 = (1 - )2G¯P G¯µ(P , P )1/2 by the 2 divergence between P and P , measured with respect to distributions G¯µ = ref and G¯P G¯µ = ref . By Lemma D.1, we have that the 2-divergence between the states can be bounded by the 2-divergence between the
actions in the sense that:

2G¯µ(P

, P )1/2

=

2
ref

(P

, P )1/2



E
Sref

2((·|S), ref(·|S))

(C.4)

2G¯P G¯µ(P

, P )1/2

=

2
ref

(P

, P )1/2



E
Sref

2((·|S), ref(·|S))

(C.5)

Therefore we obtain that 1  (1 - ), 2  (1 - ). Let f (s) = G,M (s). We can control the difference between ref , f and , f by

E G,M (S) - E G,M (S)

Sref

S

It follows that

= | ref , f - , f |

(C.6)

 (1 - )-1 1 G¯P G¯µ, f 2 1/2 + 121/2 f  (C.7)

= (1 - )-1 12 + 121/2max

(C.8)

 2 + (1 - )-1/2121/2max

(C.9)

V ,M - V ,M  (1 - )-1 E G,M (S)
S

(by Lemma 4.3)

 (1 - )-1

E G,M (S) + E G,M (S) - E G,M (S)

Sref

Sref

S

 (1 - )-1 E G,M (S)
Sref

+ (1 - )-12 + (1 - )-3/2121/2max

16

Under review as a conference paper at ICLR 2019

Proof of Proposition 4.1 and 4.2 . By definition of G and the Lipschitzness of V ,M , we have that |G,M (s, a)|  L|M (s, a) - M (s, a)|. Then, by Lemma 4.3 and triangle inequality, we have that

V ,M - V ,M

=  · E G,M (S, A)
S,M A(·|S)

 E

G,M (S, A)

S,M

A(·|S)

  SE M (S, A) - M (S, A) .
A(·|S)

(C.10)

Next we prove the main part of the proposition. Thus we proved Proposition 4.1. Note that for any distribution  and  and function f , we have ES f (S) = ES f (S)+ - , f  ES f (S)+
 -  1 f . Thus applying this inequality with f (S) = EA(·|S) M (S, A) - M (S, A) ,
we obtain that

SE M (S, A) - M (S, A)  ESref M (S, A) - M (S, A)

A(·|S)

A(·|S)

+ ref -  1 max E

M (S, A) - M (S, A)

S A(·|S)

 ESref M (S, A) - M (S, A) + 2B
A(·|S)

(C.11)

where the last inequality uses the inequalities (see Corollary E.7) that  - ref 1 


E1- Sref

KL((S), ref(S))1/2|S

=  and that

M (S, A) - M (S, A)

 2B. Com-

bining (C.11) and (C.10) we complete the proof of Proposition 4.2.

D 2-DIVERGENCE BASED INEQUALITIES

Lemma D.1. Let S be a random variable over the domain S. Let  and  be two policies and and A  (· | S) and A   (· | S). Let Y  M (· | S, A) and Y  M (· | S, A ) be the random
variables for the next states under two policies. Then,

E 2(Y |S, Y |S)  E 2(A|S, A |S)

(D.1)

Proof. By definition, we have that Y |S = s, A = a has the same density as Y |S = s, A = a for any a and s. Therefore by Theorem E.4 (setting X, X , Y, Y in Theorem E.4 by A|S = s, A |S = s, Y |S = s, Y |S = s respectively), we have

2(Y |S = s, Y |S = s)  2(A|S = s, A |S = s)

(D.2)

Taking expectation over the randomness of S we complete the proof.

D.1 PROPERTIES OF MARKOV PROCESSES

In this subsection, we consider bounded the difference of the distributions induced by two markov

process starting from the same initial distributions µ. Let P, P be two transition kernels. Let

G=

 k=0

kP

k

and

G¯

=

(1

-

)G.

Define

G

and G¯

similarly. Therefore we have that G¯µ is the

discounted distribution of states visited by the markov process starting from distribution µ. In other

words, if µ is the distribution of S0, and P is the transition kernel induced by some policy , then G¯µ = .

First of all, let  = (P - P ) and we note that with simple algebraic manipulation, G¯ - G¯ = (1 - )-1G¯ G¯

(D.3)

Let f be some function. We will mostly interested in the difference between ESG¯µ [f ] and ESG¯ µ [f ], which can be rewritten as (G¯ - G)µ, f . We will bound this quantity from above by some divergence measure between P and P .

17

Under review as a conference paper at ICLR 2019

We start off with a simple lemma that controls the form p - q, f by the 2 divergence between p and q. With this lemma we can reduce our problem of bounding (G¯ - G)µ, f to characterizing the 2 divergence between G¯ µ and G¯µ. Lemma D.2. Let p and q be probability distributions. Then we have
q - p, f 2  2(q, p) · p, f 2

Proof. By Cauchy-Schwartz inequality, we have

q - p, f 2 

(q(x) - p(x))2 dx
p(x)

p(x)f (x)2 = 2(q, p) · p, f 2

The following Lemma is a refinement of the lemma above. It deals with the distributions p and q with the special structure p = W P µ and q = W P µ.

Lemma D.3. Let W, P , P be transition kernels and µ be a distribution. Then,

W (P - P )µ, f 2  µ2 (P , P ) W P µ, f 2

(D.4)

where 2µ(P , P ) is a divergence between transitions defined in Definition E.3.

Proof. By Lemma D.2 with p = W P µ and q = W P µ, we conclude that

W (P - P )µ, f 2  2(q, p) · p, f 2  2(W P µ, W P µ) W P µ, f 2

(D.5)

By Theorem E.4 and Theorem E.5 we have that 2(W P µ, W P µ)  2(P µ, P µ)  2µ(P , P ), plugging this into the equation above we complete the proof.

Now we are ready to state the main result of this subsection.
Lemma D.4. Let G¯, G¯ , P , P, f as defined in the beginning of this section. Let 1 = (1 - )2G¯µ(P , P )1/2 and 2 = (1 - )2G¯P G¯µ(P , P )1/2. Then,

(1 - ) G¯ µ, f - G¯µ, f  1 f 

(D.6)

(1 - ) G¯ µ, f - G¯µ, f  1 G¯P G¯µ, f 2 1/2 + 121/2 f 

(D.7)

Proof. Recall by equation (D.3), we have (G¯ - G¯)µ = G¯ G¯µ, f . By Lemma D.3,

G¯ G¯µ, f 2  2G¯µ(P , P ) G¯ P G¯µ, f 2

(D.8)

Using equation (D.3) again, we have

G¯ P G¯µ, f 2

=

G¯P G¯µ, f 2

1 + 1-

G¯ G¯P G¯µ, f 2

(D.9)

By Lemma D.3 again, we have that

G¯ G¯P G¯, f 2 2  2G¯P G¯µ(P , P ) G¯ P G¯P G¯µ, f 4

(D.10)

By Holder inequality and the fact that G¯ 11 = 1, G¯ 11 = 1 and P 11 = 1, we have

G¯ P G¯P G¯µ, f 4



G¯ P G¯P G¯µ 1 f 4  

f

4 

(D.11)

Then, combining equation (D.8), (D.9), (D.11), we have

(1 - )| G¯ G¯µ, f |  1 G¯ P G¯µ, f 2 1/2

(by equation (D.8))

 1 G¯P G¯µ, f 2 1/2 + 1 G¯ G¯P G¯µ, f 2 1/2 (by equation (D.9) and AM-GM)

 1 G¯P G¯µ, f 2 1/2 + 121/2 f  (by equation (D.10) and (D.11))

18

Under review as a conference paper at ICLR 2019

The following Lemma is a stronger extension of Lemma D.4, which can be used to future improve
Proposition A.2, and may be of other potential independent interests. We state it for completeness. Lemma D.5. Let G¯, G¯ , P , P, f as defined in the beginning of this section. Let dk = (G¯P )kG¯µ and k = (1 - )2dk-1 (P , P )1/2, then we have that for any K,

(1 - ) G¯ µ, f - G¯µ, f

 1 d1, f 2 -1/2 + 12-1/2 d2, f 4 -1/4 + 1 . . . K2--K1 dk, f 2k 2-k + 1 . . . K2--K1 f 

Proof. We first use induction to prove that:


K
(1 - )| (G¯ - G¯)µ, f |  

 s2+-s1 dk, f 2k 2-k

k=1 0sk-1



+

s2+-s1 G¯ (G¯P )K G¯µ, f 2K 2-K

0sK -1

(D.12)

By Lemma D.4, we got the case for K = 1. Assuming we have prove the case for K, then applying G¯ (G¯P )K G¯µ, f 2K = G¯(G¯P )K G¯µ, f 2K + (1 - )-1 G¯(G¯P )K+1G¯µ, f 2K (D.13)  G¯(G¯P )K G¯µ, f 2K + (1 - )-1d2K (P , P )1/2 G¯ (G¯P )K+1G¯µ, f 2K+1 1/2  G¯(G¯P )K G¯µ, f 2K + K+1 G¯ (G¯P )K+1G¯µ, f 2K+1 1/2
By Cauchy-Schwartz inequality, we obtain that

G¯ (G¯P )K G¯µ, f 2K 2-K  G¯(G¯P )K G¯µ, f 2K 2-K +
K+1 G¯ (G¯P )K+1G¯µ, f 2K+1 2-K-1 Plugging the equation above into equation (D.12), we provide the induction hypothesis for the case with K + 1. Now applying G¯ (G¯P )K G¯µ, f 2K 2-K  f  with equation (D.12) we complete the proof.

E TOOLBOX

Definition E.1 (2 distance, c.f. Nielsen & Nock (2014); Cover & Thomas (2012)). The Neyman 2 distance between two distributions p and q is defined as

2(p, q)

(p(x) - q(x))2 dx =

p(x)2 dx - 1

q(x) q(x)

(E.1)

For notational simplicity, suppose two random variables X and Y has distributions pX and pY , we often write 2(X, Y ) as a simplification for 2(pX , pY ).

Theorem E.2 (Sason & Verdú (2016)). The Kullback-Leibler (KL) divergence between two distributions p, q is bounded from above by the 2 distance:

KL(p, q)  2(p, q)

(E.2)

Proof. Since log is a concave function, by Jensen inequality we have KL(p, q) = p(x) log p(x) dx  log p(x) · p(x) dx q(x) q(x) = log(2(p, q) + 1)  2(p, q)

19

Under review as a conference paper at ICLR 2019

Definition E.3 (2 distance between transitions). Given two transition kernels P, P . For any distribution µ, we define µ2 (P , P ) as:

µ2 (P , P )

µ(x)2(P (·|X = x), P (·|X = x))dx

(E.3)

Theorem E.4. Suppose random variables (X, Y ) and (X , Y ) satisfy that pY |X = pY |X . Then

2(Y, Y )  2(X, X )

(E.4)

Or equivalently, for any transition kernel P and distribution µ, µ , we have 2(P µ, P µ )  2(µ, µ )

(E.5)

Proof. Denote pY |X (y | x) = pY |X (y | x) by p(y | x), and we rewrite pX as p and pX as p . By Cauchy-Schwarz inequality, we have:

pY (y)2 =

2
p(y|x)p(x)dx 

p(y|x)p (x)dx

p(y|x) p(x)2 dx p (x)

= pY (y)

p(y|x) p(x)2 dx p (x)

(E.6)

It follows that

2(Y, Y ) =

pY (y)2 dy - 1 

dy

p(x)2 p(y|x)

dx

-

1

=

2(X, X

)

pY (y)

p (x)

Theorem E.5. Let X, Y, Y are three random variables. Then,

2(Y, Y )  E 2(Y |X, Y |X)

(E.7)

We note that the expectation on the right hand side is over the randomness of X.9 As a direct corollary, we have for transition kernel P and P and distribution µ,

2(P µ, P µ)  2µ(P , P )

(E.8)

Proof. We denote pY |X (y|x) by p (y | x) and pY |X (y|x) by p(y|x), and let p(x) be a simplification for pX (x). We have by Cauchy-Schwarz,

pY (y)2 = pY (y)

p(y|x)p(x)dx 2 
p (y | x)p(x)dx

p(y|x)2 p(x)dx
p (y|x)

(E.9)

It follows that

2(Y, Y ) =

pY (y)2 dy - 1  pY (y)

p(y|x)2 p (y|x)

p(x)dxdy

-

1

=

E

2(Y |X, Y

|X) | X

(E.10)

Claim E.6. Let µ be a distribution over the state space S. Let P and P be two transition kernels. G = k=0(P )k = (Id - P )-1 and G = k=0(P )k = (Id - P )-1. Let d = (1 - )Gµ and d = (1 - )G µ be the discounted distribution starting from µ induced by the transition kernels G and G . Then,

|d

-

d

|1



1

1 -

 |d|1

(E.11)

Moreover, let (P - P ) = . Then, we have


G - G = (G)kG
k=1
9Observe 2(Y |X, Y |X) deterministically depends on X.

(E.12)

20

Under review as a conference paper at ICLR 2019

Proof. With algebraic manipulation, we obtain, G - G = (Id - P )-1((Id - P ) - (Id - P )(Id - P )-1 = G G

(E.13)

It follows that

|d - d |1 = (1 - )|G Gµ|1  |Gµ|1

=

1

1 -



|d|1

(since (1 - )|G |11  1)

Replacing G in the RHS of the equation (E.13) by G = G + G G, and doing this recursively gives

G - G = (G)kG
k=1

Corollary E.7. Let  and  be two policies and let  be defined as in Definition 2.1. Then,

|

-



|1



1

 -



E
S

KL((S),  (S))1/2 | S

(E.14)

Proof. Let P and P be the state-state transition matrix under policy  and  and  = (P - P ) By Claim E.6, we have that

|

-



|1



1

1 -

 ||1

=

1

 -



E
S

|pM

(S,(S))|S - pM

(S, (S))|S |1

(E.15)





1-

E
S

|p(S)|S - p (S)|S |1

(E.16)





1-

E
S

KL((S),  (S))1/2 | S

(by Pinkser's inequality)

F IMPLEMENTATION DETAILS
F.1 ENVIRONMENT SETUP
We benchmark our algorithm on six tasks based on physics simulator Mujoco (Todorov et al., 2012). We use rllab's implementation (Duan et al., 2016) 10 to interact with Mujoco. All the environments we use have a maximum horizon of 500 steps. We remove all contact information from observation. To compute reward from states, we put the velocity of center of mass into the states.

F.2 NETWORK ARCHITECTURE AND MODEL LEARNING

We use the same reward function as in rllab, except that all the coefficients Ccontact in front of the

contact force s are set to 0 in our case. We refer the readers to (Duan et al., 2016) Supp Material

1.2 for more details. All actions are projected to the action space by clipping. We normalize all

observations by s

=

s-µ 

where

µ, 



Rdobservation

are

computed

from

all

observations

we

collect

from the real environment. Note that µ,  may change as we collect new data. Our policy will always

produce an action a in [-1, 1]daction and the action a , which is fed into the environment, is scaled

linearly by a

=

1-a 2

amin

+

1+a 2

amax,

where

amin,

amax

are

the

min

or

max

values

allowed

at

each

entry.

10commit b3a2899 in https://github.com/rll/rllab/

21

Under review as a conference paper at ICLR 2019

Table 1: TRPO Hyperparameters.

Hyperparameters Values

batch size max KL divergence discount  GAE  CG iterations CG damping

4000 0.01 0.99 0.95 10 0.1

F.3 SLBO DETAILS

The dynamical model is represented by a feed-forward neural network with two hidden layers, each

of which contains 500 hidden units. The activation function at each layer is ReLU. We use Adam to optimize the loss function with learning rate 10-3 and L2 regularization 10-5. The network does not predict the next state directly; instead, it predicts the normalized difference of st+1 - st. The

normalization scheme and statistics are the same as those of observations: We maintain µ,  from

collected data in the real environment and may change them as we collect more, and the normalized

difference

is

.st+1 -st -
µ

The policy network is a feed-forward network with two hidden layers, each of which contains 32
hidden units. The policy network uses tanh as activation function and outputs a Gaussian distribution N (µ(s), 2) where  a state-independent trainable vector.

During our evaluation, we use H = 2 for multi-step model training and the batch size is given by

256 H

=

128,

i.e.,

we

enforce

the

model

to

see

256

transitions

at

each

batch.

We run our algorithm nouter = 100 iterations. We collect ntrain = 10000 steps of real samples from the environment at the start of each iteration using current policy with Ornstein-Uhlunbeck noise
(with parameter  = 0.15,  = 0.3) for better exploration. At each iteration, we optimize dynamics
model and policy alternatively for ninner = 20 times. At each iteration, we optimize dynamics model for nmodel = 100 times and optimize policy for npolicy = 40 times.

F.4 BASELINES
TRPO. TRPO hyperparameters are listed at Table 1, which are the same as OpenAI Baselines' implementation. These hyperparameters are fixed for all experiments where TRPO is used, including ours, MB-TRPO and MF-TRPO. We do not tune these hyperparameters. We also normalize observations as our algorithm and OpenAI Baselines do.
We use a neural network as the value function to reduce variance, which has 2 hidden layers of units 64 and uses tanh as activation functions. We use Generalized Advantage Estimator (GAE) Schulman et al. (2015b) to estimate advantages. Both TRPO used in our algorithm and that in model-free algorithm share the same set of hyperparameters.

SAC. For fair comparison, we do not use a large policy network (2 hidden layers, one of which has 256 hidden units) as the authors suggest, but use exactly the same policy network as ours. All other hyperparameters are kept the same as the authors'. Note that Q network and value network have 256 hidden units at each hidden layers, which is more than TRPO's. We refer the readers to Haarnoja et al. (2018) Appendix D for more details.

MB-TRPO. Model-Based TRPO (MB-TRPO) is similar to our algorithm SLBO but does not
optimize model and policy alternatively during one iteration. We do not tune the hyperparameter
nmodel since any number beyond a certain threshold would bring similar results. For npolicy we try {100, 200, 400, 800} on Ant and find npolicy = 200 works best. As suggested by Section 6.1, we use 0.005 as the coefficient of entropy bonus for all experiments.

22

Under review as a conference paper at ICLR 2019

Algorithm 3 Model-Based Trust Region Policy Optimization (MB-TRPO)
1: initialize model network parameters  and policy network parameters  2: initialize dataset D   3: for nouter iterations do 4: D  D  { collect ncollect samples from real environment using  with noises } 5: for nmodel iterations do 6: optimize (6.1) over  with sampled data from D by one step of Adam
7: for npolicy iterations do
8: D  { collect ntrpo samples using M as dynamics } 9: optimize  by running TRPO on D

SLBO. We tune multi-step model training parameter H  {1, 2, 4, 8}, entropy regularization coefficient   {0, 0.001, 0.003, 0.005} and npolicy  {10, 20, 40} on Ant and find H = 2,  = 0.005, npolicy = 40 work best, then we fix them in all environments, though environment-specific hyperparameters may work better. The other hyperparameters, including ninner, nmodel and network architecture, are never tuned. We observe that at the first several iterations, the policy overfits to the
learnt model so a reduction of npolicy at the beginning can further speed up convergence but we omit this for simplicity.

F.5 ABLATION STUDY

Multi-step model training. We compare multi-step model training with single-step model training and the results are shown on Figure 2. Note that H = 1 means we use single-step model training. We observe that small H (e.g., 2 or 4) can be beneficial, but larger H (e.g., 8) can hurt. We hypothesize that smaller H can help the model learn the uncertainty in the input and address the error-propagation issue to some extent.

Average Return Average Return Average Return

3000 2000 1000
0 0.0

0.2 # sa0m.4ples (m0i.l6lion) 0.8 1.0
(a) Ant
H=1

4000 3000 2000 1000
0 0.0

0.2 # sa0m.4ples (m0i.l6lion) 0.8

1.0

(b) Walker
H=2 H=4

1000 800 600 400 200
0 0.0

0.2 # sa0m.4ples (m0i.l6lion) 0.8

(c) Humanoid
H=8

1.0

Figure 2: Ablation study on multi-step model training. All the experiments are average over 10 random seeds. The x-axis shows the total amount of real samples from the environment. The y-axis shows the averaged return from execution of our learned policy. The solid line is the mean of the total rewards from each seed. The shaded area is one-standard deviation.

Entropy regularization. Figure 3 shows that entropy reguarization can improve both sample efficiency and final performance. More entropy regularization leads to better sample efficiency and higher total rewards. We observe that in the late iterations of training, entropy regularization may hurt the performance thus we stop using entropy regularization in the second half of training.

23

Under review as a conference paper at ICLR 2019

Average Return Average Return

3000 2000 1000
0 0.0
=0

0.2 # sa0m.4ples (m0i.l6lion) 0.8
(a) Ant
= 0.001

1.0

4000 3000 2000 1000
0 0.0

0.2 # sa0m.4ples (m0i.l6lion) 0.8

(b) Walker
= 0.003

1.0
= 0.005

Figure 3: Ablation study on entropy regularization.  is the coefficient of entropy regularization in the TRPO's objective. All the experiments are averaged over 10 random seeds. The x-axis shows the total amount of real samples from the environment. The y-axis shows the averaged return from execution of our learned policy. The solid line is the mean of the total rewards from each seed. The shaded area is one-standard deviation.

24

