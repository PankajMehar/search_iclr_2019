Under review as a conference paper at ICLR 2019
ADAPTIVE NETWORK SPARSIFICATION VIA DEPENDENT VARIATIONAL BETA-BERNOULLI DROPOUT
Anonymous authors Paper under double-blind review
ABSTRACT
While variational dropout approaches have been shown to be effective for network sparsification, they are still suboptimal in the sense that they set the dropout rate for each neuron without consideration of the input data. With such input-independent dropout, each neuron is evolved to be generic across inputs, which makes it difficult to sparsify networks without accuracy loss. To overcome this limitation, we propose adaptive variational dropout whose probabilities are drawn from sparsity-inducing beta-Bernoulli prior. It allows each neuron to be evolved either to be generic or specific for certain inputs, or dropped altogether. Such input-adaptive sparsityinducing dropout allows the resulting network to tolerate larger degree of sparsity without losing its expressive power by removing redundancies among features. We validate our dependent variational beta-Bernoulli dropout on multiple public datasets, on which it obtains significantly more compact networks than baseline methods, with consistent accuracy improvements over the base networks.
1 INTRODUCTION
One of the main obstacles in applying deep learning to large-scale problems and low-power computing systems is the large number of network parameters, as it can lead to excessive memory and computational overheads. To tackle this problem, researchers have explored network sparsification methods to remove unnecessary connections in a network, which is implementable either by weight pruning (Han et al., 2016) or sparsity-inducing regularizations Wen et al. (2016).
Recently, variational Bayesian approaches have shown to be useful for network sparsification, outperforming non-Bayesian counterparts. They take a completely different approach from the conventional methods that either uses thresholding or sparsity-inducing norms on parameters, and uses well-known dropout regularization instead. Specifically, these approaches use variational dropout Kingma et al. (2015) which adds in multiplicative stochastic noise to each neuron, as a means of obtaining sparse neural networks. Removal of unnecessary neurons could be done by either setting the dropout rate individually for each neuron with unbounded dropout rate Molchanov et al. (2017) or by pruning based on the signal-to-noise ratio Neklyudov et al. (2017).
While these variational dropout approaches do yield compact networks, they are suboptimal in that the dropout rate for each neuron is learned completely independently of the given input data and labels. With input-independent dropout regularization, each neuron has no choice but to encode generic information for all possible inputs, since it does not know what input and tasks it will be given at evaluation time, as each neuron will be retained with fixed rate regardless of the input. Obtaining high degree of sparsity in such as setting will be difficult as dropping any of the neurons will result in information loss. For maximal utilization of the network capacity and thus to obtain a more compact model, however, each neuron should be either irreplaceably generic and used by all tasks, or highly specialized for a task such that there exists minimal redundancy among the learned representations. This goal can be achieved by adaptively setting the dropout probability for each input, such that some of the neurons are retained with high probability only for certain types of inputs and tasks.
To this end, we propose a novel input-dependent variational dropout regularization for data and task-dependent network sparsification. We first propose beta-Bernoulli dropout that learns to set dropout rate for each individual neuron, by generating the dropout mask from beta-Bernoulli prior, and show how to train it using variational inference. This dropout regularization is a proper way of obtaining a Bayesian neural network and also sparsifies the network, since beta-Bernoulli distribution
1

Under review as a conference paper at ICLR 2019

is a sparsity-inducing prior. Then, we propose dependent beta-Bernoulli dropout, which is an input-dependent version of our variational dropout regularization.
Such adaptive regularization has been utilized for general network regularization by a non-Bayesian and non-sparsity-inducing model Ba & Frey (2013); yet, the increased memory and computational overheads that come from learning additional weights for dropout mask generation made it less appealing for generic network regularization. In our case of network sparsification, however, the overheads at training time is more than rewarded by the reduced memory and computational requirements at evaluation time, thanks to the high degree of sparsification obtained in the final output model.
We validate our dependent beta-Bernoulli variational dropout regularizer on multiple public datasets for network sparsification performance and prediction error, on which it obtains more compact network with substantially reduced prediction errors, when compared with both the base network and existing network sparsification methods. Further analysis of the learned dropout probability for each unit reveals that our input-adaptive variational dropout approach generates a clearly distinguishable dropout mask for each task, thus enables each task to utilize different sets of neurons for their specialization.
Our contribution in this paper is threefold:
· We propose beta-Bernoulli dropout, a novel dropout regularizer which learns to generate Bernoulli dropout mask for each neuron with sparsity-inducing prior, that obtains high degree of sparsity without accuracy loss.
· We further propose dependent beta-Bernoulli dropout, which yields significantly more compact network than input-independent beta-Bernoulli dropout, and further perform runtime pruning for even less computational cost.
· Our beta-Bernoulli dropout regularizations provide novel ways to implement a sparse Bayesian Neural Network, and we provide a variational inference framework for learning it.

2 RELATED WORK

Deep neural networks are known to be prone to overfitting, due to its large number of parameters.

Dropout Srivastava et al. (2014) is an effective regularization that helps prevent overfitting by reducing

coadaptations of the units in the networks. During dropout training, the hidden units in the networks

are randomly dropped with fixed probability p, which is equivalent to multiplying the Bernoulli

noises z  Ber(1 - p) to the units. It was later found that multiplying Gaussian noises with the same

mean

and

variance,

z



N

(1,

p 1-p

),

works

just

as

well

or

even

better

Srivastava

et

al.

(2014).

Dropout regularizations generally treat the dropout rate p as a hyperparameter to be tuned, but there have been several studies that aim to automatically determine proper dropout rate. Kingma et al. (2015) propose to determine the variance of the Gaussian dropout by stochastic gradient variational Bayes. Generalized dropout Srinivas & Babu (2016) places a beta prior on the dropout rate and learn the posterior of the dropout rate through variational Bayes. They showed that by adjusting the hyperparameters of the beta prior, we can obtain several regularization algorithms with different characteristics. Our beta-Bernoulli dropout is similar to one of its special cases, but while they obtain the dropout estimates via point-estimates and compute the gradients of the binary random variables with biased heuristics, we approximate the posterior distribution of the dropout rate with variational distributions and compute asymptotically unbiased gradients for the binary random variables.

Ba et al. Ba & Frey (2013) proposed adaptive dropout (StandOut), where the dropout rates for each individual neurons are determined as function of inputs. This idea is similar in spirit to our dependent beta-Bernoulli dropout, but they use heuristics to model this function, while we use proper variational Bayesian approach to obtain the dropout rates. One drawback of their model is the increased memory and computational cost from additional parameters introduced for dropout mask generation, which is not negligible when the network is large. Our model also requires additional parameters, but with our model the increased cost at training time is rewarded at evaluation time, as it yields a significantly sparse network than the baseline model as an effect of the sparsity-inducing prior.

Recently, there has been growing interest in structure learning or sparsification of deep neural networks. Han et al. Han et al. (2016) proposed a strategy to iteratively prune weak network weights for efficient computations, and Wen et al. Wen et al. (2016) proposed a group sparsity learning

2

Under review as a conference paper at ICLR 2019

algorithm to drop neurons, filters or even residual blocks in deep neural networks. In Bayesian learning, various sparsity inducing priors have been demonstrated to efficiently prune network weights with little drop in accuracies Molchanov et al. (2017); Louizos et al. (2017); Neklyudov et al. (2017); Louizos et al. (2018). In the nonparametric Bayesian perspective, Feng et al. Feng & Darrell (2015) proposed IBP based algorithm that learns proper number of channels in convolutional neural networks using the asymptotic small-variance limit approximation of the IBP. While our dropout regularizer is motivated by IBP as with this work, our work is differentiated from it by the input-adaptive adjustments of dropout rates that allow each neuron to specialize into features specific for some subsets of tasks.

3 BACKGROUNDS
3.1 BAYESIAN NEURAL NETWORKS AND STOCHASTIC GRADIENT VARIATIONAL BAYES

Suppose that we are given a neural network f (x; W) parametrized by W, a training set D = {(xn, yn)}nN=1, and a likelihood p(y|f (x; W)) chosen according to the problem of interest (e.g., the categorical distribution for a classification task). In Bayesian neural networks, the parameter W is
treated as a random variable drawn from a pre-specified prior distribution p(W), and the goal of learning is to compute the posterior distribution p(W|D):

N
p(W|D)  p(W) p(yn|f (xn; W)).
n=1

(1)

When a novel input x is given, the prediction y is obtained as a distribution, by mixing W from p(W|D) as follows:

p(y|x, D) = p(y|f (x; W))p(W|D)dW.

(2)

Unfortunately, p(W|D) is in general computationally intractable due to computing p(D), and thus

we resort to approximate inference schemes. Specifically, we use variational Bayes (VB), where we

posit a variational distribution q(W; ) of known parametric form and minimize the KL-divergence

between it and the true posterior p(W|D), DKL[q(W; ) p(W|D)]. It turns out that minimizing

DKL[q(W; )

p(W|D)] is equivalent to maximizing the evidence lower-bound (ELBO),
N

L() = Eq[log p(yn|f (xn; W))] - DKL[q(W; ) p(W)],

(3)

n=1

where the first term measures the expected log-likelihood of the dataset w.r.t. q(W; ), and the

second term regularizes q(W; ) so that it does not deviate too much from the prior. The pa-

rameter  is learned by gradient descent, but these involves two challenges. First, the expected

likelihood is intractable in many cases, and so is its gradient. To resolve this, we assume that

q(W; ) is reparametrizable, so that we can obtain i.i.d. samples from q(W; ) by computing

differentiable transformation of i.i.d. noise (Kingma & Welling, 2014; Rezende et al., 2014) as

(s)  r(), W(s) = T ((s); ). Then we can obtain a low-variance unbiased estimator of the

gradient, namely

Eq[log p(yn|f (xn; W))]



1 S

S s=1



log p(yn|f (xn; T

((s); ))).

(4)

The second challenge is that the number of training instances N may be too large, which makes

it impossible to compute the summation of all expected log-likelihood terms. Regarding on this

challenge, we employ the stochastic gradient descent technique where we approximate with the

summation over a uniformly sampled mini-batch B,

N

 Eq [log

p(yn|f (xn; W))]



N |B|

Eq[log p(yn|f (xn; W))].

n=1

nB

(5)

Combining the reparametrization and the mini-batch sampling, we obtain an unbiased estimator of L() to update . This procedure, often referred to as stochastic gradient variational Bayes (SGVB) Kingma & Welling (2014), is guaranteed to converge to local optima under proper learning-

rate scheduling.

3

Under review as a conference paper at ICLR 2019

3.2 LATENT FEATURE MODELS AND INDIAN BUFFET PROCESSES

In latent feature model, data are assumed to be generated as combinations of latent features:

K

dn = f (Wzn) = f

zn,kwk ,

k=1

(6)

where zn,k = 1 means that dn possesses the k-th feature wk, and f is an arbitrary function.
The Indian Buffet Process (IBP) Griffiths & Ghahramani (2005) is a generative process of binary matrices with infinite number of columns. Given N data points, IBP generates a binary matrix Z  {0, 1}N×K whose n-th row encodes the feature indicator zn . The IBP is suitable to use as a prior process in latent feature models, since it generates possibly infinite number of columns and adaptively adjust the number of features on given dataset. Hence, with an IBP prior we need not specify the number of features in advance.

One interesting observation is that while it is a marginal of the beta-Bernoulli processes (Thibaux &
Jordan, 2007), the IBP may also be understood as a limit of the finite-dimensional beta-Bernoulli process. More specifically, the IBP with parameter  > 0 can be obtained as

k  beta(/K, 1), zn,k  Ber(k), K  .

(7)

This beta-Bernoulli process naturally induces sparsity in the latent feature allocation matrix Z. As K  , the expected number of nonzero entries in Z converges to N  (Griffiths & Ghahramani, 2005) , where  is a hyperparameter to control the overall sparsity level of Z.

In this paper, we relate the latent feature models (6) to neural networks with dropout mask. Specifically, the binary random variables zn,k correspond to the dropout indicator, and the features w correspond to the inputs or intermediate units in neural networks. From this connection, we can think of a hierarchical Bayesian model where we place the IBP, or finite-dimensional beta-Bernoulli priors for the binary dropout indicators. We expect that due to the property of the IBP favoring sparse model, the resulting neural network would also be sparse.

3.3 DEPENDENT INDIAN BUFFET PROCESSES

One important assumption in the IBP is that features are exchangeable - the distribution is invariant to the permutation of feature assignments. This assumption makes the posterior inference convenient, but restricts flexibility when we want to model the dependency of feature assignments to the input covariates x, such as times or spatial locations. To this end, Williamson et al. Williamson et al. (2010) proposed dependent Indian Buffet processes (dIBP), which triggered a line of follow-up work (Zhou et al., 2011; Ren et al., 2011). These models can be summarized as following generative process:

  p() z|, x  Ber(g(, x)),

(8)

where g(·, ·) is an arbitrary function that maps  and x to a probability. In our latent feature interpretation for neural network layers above, the input covariates x corresponds to the input or activations in the previous layer. In other words, we build a data-dependent dropout model where the dropout rates depend on the inputs. In the main contribution section, we will further explain how we will construct this data-dependent dropout layers in detail.

4 MAIN CONTRIBUTION
4.1 VARIATIONAL BETA-BERNOULLI DROPOUT
Inspired by the latent-feature model interpretation of layers in neural networks, we propose a Bayesian neural network layer overlaid with binary random masks sampled from the finite-dimensional betaBernoulli prior. Specifically, let W be a parameter of a neural network layer, and let zn  {0, 1}K be a binary mask vector to be applied for the n-th observation xn. The dimension of W needs not be equal to K. Instead, we may enforce arbitrary group sparsity by sharing the binary masks among multiple elements of W. For instance, let W  RK×L×M be a parameter tensor in a convolutional neural network with K channels. To enforce a channel-wise sparsity, we introduce zn  {0, 1}K of

4

Under review as a conference paper at ICLR 2019

K dimension, and the resulting masked parameter Wn for the n-th observation is given as

{zn,kWk, ,m | (k, , m) = (1, 1, 1), . . . , (K, L, M )},

(9)

where Wk, ,m is the (k, , m)-th element of W. From now on, with a slight abuse of notation, we denote this binary mask multiplication as

Wn = zn  W,

(10)

with appropriate sharing of binary mask random variables. The generative process of our Bayesian neural network is then described as

KK

W  N (0, I),   beta(k; /K, 1), zn|  Ber(zn,k; k), Wn = zn  W.

k=1

k=1

(11)

Note the difference between our model and the model in Gal & Ghahramani (2016). In Gal &
Ghahramani (2016), only Gaussian prior is placed on the parameter W, and the dropout is applied in the variational distribution q(W) to approximate p(W|D). Our model, on the other hand, includes the binary mask zn in the prior, and the posterior for the binary masks should also be approximated.

The goal of the posterior inference is to compute the posterior distribution p(W, Z, |D), where Z = {z1, . . . , zN }. We approximate this posterior with the variational distribution of the form

K NK

q(W, Z, ) = W(W) q(k)

q (zn,k |k ).

k=1

n=1 k=1

(12)

For W, we conduct computationally efficient point-estimate to get the single value W, with the weight-decay regularization arising from the zero-mean Gaussian prior. For , following Nalisnick & Smyth (2017), we use the Kumaraswamy distribution (Kumaraswamy, 1980) for q(k):

q(k; ak, bk) = akbkkak-1(1 - kak )bk-1,

(13)

since it closely resembles the beta distribution and easily reparametrizable as

11
k(u; ak, bk) = (1 - u bk ) ak , u  unif([0, 1]).

(14)

We further assume that q(zn,k|k) = p(zn,k|k) = Ber(k). zk is sampled by reparametrization with continuous relaxation (Maddison et al., 2017; Jang et al., 2017; Gal et al., 2017),

zk = sgm

1 

log

1

k - k

+

log

1

u -

u

,

(15)

where



is

a temperature of continuous relaxation,

u



unif([0, 1]),

and sgm(x)

=

1 1+e-x

.

The

KL-divergence between the prior and the variational distribution is then obtained in closed form as

follows (Nalisnick & Smyth, 2017):

K
DKL[q(Z, ) p(Z, )] =
k=1

ak -  ak

-



-

(bk )

-

1 bk

+ log akbk - bk - 1 ,  bk

(16)

where  is Euler-Mascheroni constant and (·) is the digamma function. Note that the infinite series in the KL-divergence vanishes because of the choice p(k) = beta(k; /K, 1).

We can apply the SGVB framework described in Section 3.1 to optimize the variational parameters {ak, bk}Kk=1. After the training, the prediction for a novel input x is given as
p(y|x, D, W) = Ep(z,,W|D)[p(y|f (x; z  W))]  Eq(z,)[p(y|f (x; z  W))], (17)
and we found that the following näive approximation works well in practice,

p(y|x, D, W)  p(y|f (x; Eq[z]  W)),

(18)

where

Eq[z,k] = Eq(k)[k],

Eq(k ) [k ]

=

bk(1 + a-k 1)(bk (1 + a-k 1 + bk)

)

.

(19)

5

Under review as a conference paper at ICLR 2019

x1
150
100
50
0 3.75 4.00 4.25

x2

=

x1-µ 

150

100

50

0 -2.5 0.0

2.5

x3 = x2 + 

150
100
50
0 0

5

x4 = min(1 - , max( , x3))
400
200
0 0.0 0.5 1.0

Figure 1: An example to show the intuition behind Eq (21). Each block represents a histogram of output distribution. A set of activations (1st block) are standardized (2nd block), and rescaled and shifted (3rd block), and transformed into probabilities (4th block).

4.2 VARIATIONAL DEPENDENT BETA-BERNOULLI DROPOUT

Now we describe our Bayesian neural network model with input dependent beta-Bernoulli dropout prior constructed as follows:

KK

W  N (0, I),   beta(k; /K, 1), zn|, xn  Ber(zn,k; k(xn,k)),

k=1

k=1

(20)

Here, xn is the input to the dropout layer. For convolutional layers, we apply the global average pooling to tensors to get vectorized inputs. In principle, we may introduce another fully connected layer as (1(xn,1), . . . , K (xn,K )) = sgm(Vxn + c), with additional parameters V  RK×K and c  RK, but this is undesirable for the network sparsification. Rather than adding parameters for fully
connected layer, we propose simple yet effective way to generate input-dependent probability, with minimal parameters involved. Specifically, we construct each k(xn,k) independently as follows:

k(xn,k) = k min 1 - , max

,

k

xn,k - k

µk

+

k

,

(21)

where µk and k are the estimates of k-th components of mean and standard deviation of inputs, and k and k are scaling and shifting parameters to be learned, and > 0 is some small tolerance
to prevent overflow. The parameterization in (21) is motivated by the batch normalization (Ioffe
& Szegedy, 2015). The intuition behind this construction is as follows. The inputs after the standardization would approximately be distributed as N (0, 1), and thus would be centered around zero. If we pass them through max( , min(1 - )), most of insignificant dimensions would have
probability close to zero. However, some inputs may be important regardless of the significance of
current activation. In that case, we expect the corresponding shifting parameter k to be large. Thus by  = (1, . . . , K) we control the overall sparsity, but we want them to be small unless required to get sparse outcomes. We enforce this by placing a prior distribution on   N (0, I).

The goal of variational inference is hence to learn the posterior distribution p(W, Z, , |D), and we approximate this with variational distribution of the form

K NK

q(W, Z, , ) = W(W) q(k)q(k)

q(zn,k|k, xn),

k=1

n=1 k=1

(22)

where q(k) are the same as in beta-Bernoulli dropout, q(k) = N (k; k, k2), and q(zn,k|k) = p(zn,k|k, xn) 1 The KL-divergence is computed as

DKL[q(Z, ) p(Z, )] + DKL[q() p()],

(23)

where the first term was described for beta-Bernoulli dropout and the second term can be computed analytically.

The prediction for the novel input x is similarity done as in the beta-Bernoulli dropout, with the näive approximation for the expectation:

p(y|x, D, W)  p(y|f (x; Eq[z]  W)),

(24)

1 In principle, we may introduce an inference network q(z|, x, y) and minimizes the KL-divergence between q(z|, x, y) and p(z|, x), but this results in discrepancy between training and testing for sampling z, and also make optimization cumbersome. Hence, we chose to simply set them equal. Please refer to Sohn et al. (2015) for discussion about this.

6

Under review as a conference paper at ICLR 2019

FLOPS

80 70 60 50 40 30 20 10 0
0.012 0.015

LeNet-500-300

DBB BB SBP SVD SSL Original

0C.0l2a0ssificat0io.0n25error 0.030

0.035

FLOPS

10
8
6
4
2 1
0.005

LeNet-5-Caffe

DBB BB SBP SVD SSL Original

0.007 Classi0fi.c0a09tion erro0.r011

0.013

class 7

class 0

class 9

class 3

1.0 1.0 0.8 0.8 0.6 0.6 0.4 0.4 0.2 0.2 0.0 0.0
1.0 1.0 0.8 0.8 0.6 0.6 0.4 0.4 0.2 0.2 0.0 0.0

Figure 2: Error-FLOPs tradeoff of various pruning methods with LeNet-500-300 (left) and LeNet-5Caffe (middle), class averages of (x) for the first layer of LeNet-500-300.

where

Eq[z,k] = Eq[k] min 1 - , max

,

k

xn,k - k

µk

+ k

.

(25)

Two stage pruning scheme Since k  k(xn,k) for all xn,k, we expect the resulting network to be sparser than the network pruned only with the beta-Bernoulli dropout (only with k). To achieve this, we propose a two-stage pruning scheme, where we first prune the network with beta-Bernoulli dropout, and prune the network again with k(xn,k) while holding the variables  fixed. By fixing  the resulting network is guaranteed to be sparser than the network before the second pruning.

5 EXPERIMENTS

We now compare our beta-Bernoulli dropout (BB) and input-dependent beta-Bernoulli dropout (DBB) to other structure learning/pruning algorithms on several neural networks using benchmark datasets.

Experiment Settings We followed a common setting to compare pruning algorithms by using LeNet 500-300, LeNet 5-Caffe 2, and VGG-like (Zagoruyko, 2015) networks on MNIST LeCun et al. (1998), CIFAR-10, and CIFAR-100 datasets (Krizhevsky & Hinton, 2009). We included recent Bayesian pruning methods for a fair comparison: sparse variational dropout (SVD Molchanov et al. (2017)), structured sparsity learning (SSL Wen et al. (2016)) and structured Bayesian pruning (SBP Neklyudov et al. (2017)). We faithfully tuned all hyperparameters of baselines on a validation set to find a reasonable solution that is well balanced between accuracy and sparsification, while fixing batch size (100) and the number of maximum epochs (300) to match our experiment setting.

Implementation Details We pretrained all networks using the standard training procedure before fine-tuning for network sparsification Molchanov et al. (2017); Neklyudov et al. (2017). While pruning, we set the learning rate for the weights W to be 0.1 times smaller than those for the variational parameters as in Neklyudov et al. (2017). We used Adam (Kingma & Ba, 2015) for all methods. For DBB, as mentioned in Section 4.2, we first prune networks with BB, and then prune again with DBB whiling holding the variational parameters for q() fixed.

We report all hyperparameters of BB and DBB for reproducing our results. We set /K = 10-4 for

all layers of BB and DBB. In principle, we may fix K to be large number and tune . However, in

the network sparsification tasks, K is given as the neurons/filters to be pruned. Hence, we chose to

set the ratio /K to be small number altogether. In the testing phase, we pruned the neurons/filters whose expected dropout mask probability Eq[k] are smaller than a filxed threshold 10-33. For the

input-dependent dropout, since the number of pruned neurons/filters differ according to the inputs,

we report them as the concrete distribution 

running = 10-1

average over and the prior

the test data. variance of ,

We fixed the temperature parameter  = 5 for all experiments.

of

5.1 EXPERIMENTS ON MNIST DATASET
We used LeNet 500-300 and LeNet 5-Caffe networks on MNIST for comparison. Following the conventions, we applied dropout to the inputs to the fully connected layers and right after the
2https://github.com/BVLC/caffe/blob/master/examples/mnist 3We tried different values such as 10-2 or 10-4, but the difference was insignificant.

7

Under review as a conference paper at ICLR 2019

Table 1: Classification accuracy and sparsification performance of various pruning methods on CIFAR-10 and CIFAR-100 datasets. We report the medians of five runs, and calculate the speedup in terms of FLOP.

CIFAR-10

Error

Filters

Speedup Memory

Original SVD SSL SBP BB DBB

7.43% 8.08% 7.28% 8.68% 6.78% 7.03%

64-64-128-128-256-256-256 512-512-512-512-512-512-512-512

64-64-128-128-254-206-48 96-90-14-147-107-85-85-458

64-64-128-128-254-201-46

92-76-14-123-78-354-354

64-64-128-128-254-209-55 107-103-15-163-125-346-375-491

64-64-128-126-251-174-41 87-81-13-118-110-25-25-69

62-61-126-122-236-134-35

63-65-11-93-94-19-20-50

1.00x 1.42x 1.43x 1.34x 1.47x 1.53x

100.0% 17.9% 19.0% 21.2% 5.5% 4.2%

Original SVD SSL SBP BB DBB

Error 31.46% 31.72% 30.52% 37.56% 29.36% 28.92%

CIFAR-100 Filters
64-64-128-128-256-256-256 512-512-512-512-512-512-512-512 64-64-128-128-255-255-135 234-171-26-332-257-301-311-512 64-64-128-128-255-255-135 235-162-25-300-238-512-512-512 64-64-128-128-255-255-135 218-173-26-345-270-512-512-512 64-64-128-128-255-255-134 213-152-25-268-256-47-47-188 63-63-126-127-246-235-129 167-125-22-218-227-36-36-105

Speedup Memory 1.0x 100.0% 1.25x 32.3% 1.25x 34.3% 1.25x 36.4% 1.26x 5.8 % 1.29x 5.0%

1.0

0.8

0.6

0.4

0.2

bus

layer 3 layer 8 layer 15

bus

layer 3 layer 8 layer 15 apple

layer 3

layer 8 layer 15 0.0

Figure 3: Parts of (x) in 3rd, 8th, 15th layer of VGG network for CIFAR-100, w.r.t. different inputs.

convolution for the convolutional layers. To see the tradeoff between sparsity and accuracy, we trained every algorithms with various settings of learning rates, since we found that the initial learning rate for dropout related variables was most important factor in controlling sparsity. The results are summarized in Fig. 2. For both networks, BB and DBB achieved significantly higher accuracy than other methods, given the same sparsity levels. On LeNet-500-300, DBB pruned large amount of neurons in the input layer, because the inputs to this network are simply vectorized pixel values, while other input-independent pruning algorithms prune the general background areas (Fig. 2, left). Also, we found that the dropout masks generated by DBB tend to be generic at lower network layers to extract common features, but become class-specific at higher layers to specialize features for class discriminativity. See the appendix for the additional results on LeNet-5-Caffe showing this tendency.

5.2 EXPERIMENTS ON CIFAR-10 AND CIFAR-100 DATASETS
We compared the pruning algorithms on VGG-like network adapted for CIFAR-10 and CIFAR100 datasets. For CIFAR-10, we ran the algorithms for 200 epochs with batch size 100, and for CIFAR-100 we ran for 300 epochs with batch size 100. Table 1 summarizes the performance of each algorithm, where BB and DBB achieved impressive sparsity with significantly improved accuracies. Further analysis of the filters retained by DBB in Fig. 3 shows that DBB either retains most filters (layer 3) or perform generic pruning (layer 8) at lower layers, while performing diversified pruning at higher layers (layer 15). Further, at layer 15, instances from the same class retained similar filters, while instances from different classes retained different filters.

6 CONCLUSION
We have proposed novel beta-Bernoulli dropout for network regularization and sparsification, where we learn dropout probabilities for each neuron either in an input-independent or input-dependent manner. Our beta-Bernoulli dropout learns the distribution of sparse Bernoulli dropout mask for each neuron in a variational inference framework, in contrast to existing work that learned the distribution of Gaussian multiplicative noise or weights, and obtains significantly more compact network compared to those competing approaches. Further, our dependent beta-Bernoulli dropout that input-adaptively decides which neuron to drop further improves on the input-independent beta-Bernoulli dropout, both in terms of size of the final network obtained and run-time computations.

8

Under review as a conference paper at ICLR 2019
REFERENCES
J. Ba and B. Frey. Adaptive dropout for training deep neural networks. In Advances in Neural Information Processing Systems 26, 2013.
J. Feng and T. Darrell. Learning the structure of deep convolutional networks. IEEE International Conference on Computer Vision, 2015.
Y. Gal and Z. Ghahramani. Dropout as a Bayesian approximation: representing model uncertainty in deep learning. In Proceedings of the 33rd International Conference on Machine Learning, 2016.
Y. Gal, J. Hron, and A. Kendall. Concrete dropout. Advances in Neural Information Processing Systems, 2017.
T. L. Griffiths and Z. Ghahramani. Infinite latent feature models and the Indian buffet process. In NIPS, 2005.
S. Han, H. Mao, and W. J. Dally. Deep compression: compressing deep neural networks with pruning, trained quantization and Huffman coding. In Proceedings of the International Conference on Learning Representations, 2016.
S. Ioffe and C. Szegedy. Batch normalization: accelerating deep network training by reducing internal covariate shift. In Proceedings of the 32nd International Conference on Machine Learning, 2015.
E. Jang, S. Gu, and B. Poole. Categorical reparametrization with Gumbel-softmax. In Proceedings of the International Conference on Learning Representations, 2017.
D. P. Kingma and J. L. Ba. Adam: A method for stochastic optimization. In Proceedings of the International Conference on Learning Representations, 2015.
D. P. Kingma and M. Welling. Auto-encoding variational Bayes. In Proceedings of the International Conference on Learning Representations, 2014.
D. P. Kingma, T. Salimans, and M. Welling. Variational dropout and the local reparametrization trick. In Advances in Neural Information Processing Systems 28, 2015.
Alex Krizhevsky and Geoffrey E. Hinton. Learning multiple layers of features from tiny images. Technical report, Computer Science Department, University of Toronto, 2009.
Ponnambalam Kumaraswamy. A generalized probability density function for double-bounded random processes. Journal of Hydrology, 1980.
Y. LeCun, L. Bottou, Y. Bengio, and P. Haffner. Gradient-based learning applied to document recognition. Proceedings of the IEEE, 86(11):2278­2324, 1998.
C. Louizos, K. Ullrich, and M. Welling. Bayesian compression for deep learning. Advances in Neural Information Processing Systems, 2017.
C. Louizos, M. Welling, and D. P. Kingma. Learning sparse neural networks through L0 regularization. International Conference on Learning Representations, 2018.
C. J. Maddison, A. Mnih, and Y. W. Teh. The concrete distribution: a continuous relaxation of discrete random variables. In Proceedings of the International Conference on Learning Representations, 2017.
D. Molchanov, A. Ashukha, and D. Vetrov. Variational dropout sparsifies deep neural networks. In Proceedings of the 34th International Conference on Machine Learning, 2017.
E. Nalisnick and P. Smyth. Stick-breaking variational autoencoders. In Proceedings of the International Conference on Learning Representations, 2017.
K. Neklyudov, D. Molchanov, A. Ashukha, and D. Vetrov. Structured Bayesian pruning via lognormal multiplicative noise. Advances in Neural Information Processing Systems, 2017.
L. Ren, Y. Wang, D. B. Dunson, and L. Carin. The kernel beta process. In Advances in Neural Information Processing Systems 24, 2011.
9

Under review as a conference paper at ICLR 2019
D. J. Rezende, S. Mohamed, and D. Wierstra. Stochastic backpropagation and approximate inference in deep generative models. In Proceedings of the 31st International Conference on Machine Learning, 2014.
K. Sohn, H. Lee, and X. Yan. Learning structured ouput representation using deep conditional generative models. Advances in Neural Information Processing Systems 28, 2015.
S. Srinivas and R. V. Babu. Generalized dropout. arXiv preprint arXiv:1611.06791, 2016. N. Srivastava, G. E. Hinton, A. Krizhevsky, I. Sutskever, and R. Salakhutdinov. Dropout: a simple
way to prevent neural networks from overfitting. Journal of Machine Learning Research, 15(1): 1929­1958, 2014. R. Thibaux and M. I. Jordan. Hierarchical beta processess and the Indian buffet processes. In Proceedings of the 11th International Conference on Artificial Intelligence and Statistics, 2007. W. Wen, C. Wu, Y. Wang, Y. Chen, and H. Li. Learning structured sparsity in deep neural networks. In Advances in Neural Information Processing Systems 29, 2016. S. Williamson, P. Orbanz, and Z. Ghahramani. Dependent indian buffet processes. In Proceedings of the 13th International Conference on Artificial Intelligence and Statistics, 2010. S. Zagoruyko. 92.45 on CIFAR-10 in Torch. 2015. M. Zhou, H. Yang, G. Sapiro, and D. B. Dunson. Dependent hierarchical beta process for image interpolation and denoising. In Proceedings of the 14th International Conference on Artificial Intelligence and Statistics, 2011.
10

Under review as a conference paper at ICLR 2019

Table 2: Results for LeNet-500-300 and LeNet5-Caffe on MNIST.

LeNet 500-300

LeNet5-Caffe

Error Neurons Speedup Memory Error Neurons/Filters Speedup Memory

Original 1.56 784-500-300 1.0x SVD 1.50 532-64-34 14.87x SSL 2.27 409-28-23 43.95x SBP 1.58 257-97-43 18.33x BB 1.32 294-110-71 13.26x DBB 1.40 106-56-46 33.51x

100.0% 6.72% 2.27% 5.44% 7.52% 0.98%

0.7 20-50-800-500 0.71 10-16-244-27 0.89 6-9-122-10 0.82 9-17-130-42 0.57 13-25-156-54 0.63 13-24-53-27

1.0x 5.18x 12.03x 5.53x 2.94x 2.95x

100.0% 13.97% 11.03% 13.42% 16.2% 14.79%

class class class class

conv20

conv50

dense800

dense500

1.0 1.0 1.0 1.0 0000

1111 0.8 0.8 0.8 0.8
2222

3333 0.6 0.6 0.6 0.6
4444

5555 0.4 0.4 0.4 0.4
6666

7777 0.2 0.2 0.2 0.2
8888

9999 0.0 0.0 0.0 0.0

0123456789

0123456789

0123456789

0123456789

class class class class

Figure 4: Correlation coefficients of class averages of (x) for the four layers in LeNet5-Caffe.

Appendices

A ADDITIONAL RESULTS ON MNIST EXPERIMENTS
We present more detailed results on MNIST experiments, conducted with fixed choice of learning rate. For all algorithms, we trained the dropout/pruning related variables with learning rate 10-2, and decayed it to 10-3 and 10-4 after 100 and 150 epochs, respectively. The learning rate for the network weights were set to 1/10 of the learning rate for the dropout/pruning related variables. The results are summarized in Table 2. BB and DBB significantly outperformed other baselines in accuracy with similar sparsity level.
Fig. 4 shows the correlation coefficients between the class average values of (x) learnt from DBB. As we stated in the paper, it clearly show the tendency to share filters in lower layers, and be specific in higher layers. This tendency can also be observed in the experiments with VGG on CIFAR10 and CIFAR100.

11

