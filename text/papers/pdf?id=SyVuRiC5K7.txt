Under review as a conference paper at ICLR 2019
LEARNING TO PROPAGATE LABELS: TRANSDUCTIVE PROPAGATION NETWORK FOR FEW-SHOT LEARNING
Anonymous authors Paper under double-blind review
ABSTRACT
The goal of few-shot learning is to learn a classifier that generalizes well even when trained with a limited number of training instances per class. The recently introduced meta-learning approaches tackle this problem by learning a generic classifier across a large number of multiclass classification tasks and generalizing the model to a new task. Yet, even with such meta-learning, the low-data problem in the novel classification task still remains. In this paper, we propose Transductive Propagation Network (TPN), a novel meta-learning framework for transductive inference that classifies the entire test set at once to alleviate the low-data problem. Specifically, we propose to learn to propagate labels from labeled instances to unlabeled test instances, by learning a graph construction module that exploits the manifold structure in the data. TPN jointly learns both the parameters of feature embedding and the graph construction in an end-to-end manner. We validate TPN on multiple benchmark datasets, on which it largely outperforms existing few-shot learning approaches and achieves the state-of-the-art results.
1 INTRODUCTION
Recent breakthroughs in deep learning (Krizhevsky et al., 2012; Simonyan and Zisserman, 2015; He et al., 2016) highly rely on the availability of large amounts of labeled data. However, this reliance on large data increases the burden of data collection, which hinders its potential applications to the low-data regime where the labeled data is rare and difficult to gather. On the contrary, humans have the ability to recognize new objects after observing only one or few instances (Lake et al., 2011). For example, children can generalize the concept of "apple" after given a single instance of it. This significant gap between human and deep learning has reawakened the research interest on few-shot learning (Vinyals et al., 2016; Snell et al., 2017; Finn et al., 2017; Ravi and Larochelle, 2017; Lee and Choi, 2018; Xu et al., 2017; Wang et al., 2018).
Few-shot learning aims to learn a classifier that generalizes well with a few examples of each of these classes. Traditional techniques such as fine-tuning (Jia et al., 2014) that work well with deep learning models would severely overfit on this task (Vinyals et al., 2016; Finn et al., 2017), since a single or only a few labeled instances would not accurately represent the true data distribution and will result in learning classifiers with high variance, which will not generalize well to new data.
In order to solve this overfitting problem, Vinyals et al. (2016) proposed a meta-learning strategy which learns over diverse classification tasks over large number of episodes rather than only on the target classification task. In each episode, the algorithm learns the embedding of the few labeled examples (the support set), which can be used to predict classes for the unlabeled points (the query set) by distance in the embedding space. The purpose of episodic training is to mimic the real test environment containing few-shot support set and unlabeled query set. The consistency between training and test environment alleviates the distribution gap and improves generalization. This episodic meta-learning strategy, due to its generalization performance, has been adapted by many follow-up work on few-shot learning. Finn et al. (2017) learned a good initialization that can adapt quickly to the target tasks. Snell et al. (2017) used episodes to train a good representation and predict classes by computing Euclidean distance with respect to class prototypes.
Although episodic strategy is an effective approach for few-shot learning as it aims at generalizing to unseen classification tasks, the fundamental difficulty with learning with scarce data remains for a novel classification task. One way to achieve larger improvements with limited amount of training
1

Under review as a conference paper at ICLR 2019

Task 1

Meta-train

Task 2

Transductive Propagation Network

Figure 1: A conceptual illustration of our transductive meta-learning framework, where lines between nodes represent graph connections and their colors represent the potential direction of label propagation. The neighborhood graph is episodic-wisely trained for transductive inference.

data is to consider relationships between instances in the test set and thus predicting them as a whole, which is referred to as transduction, or transductive inference. In previous work (Joachims, 1999; Zhou et al., 2004; Vapnik, 1999), transductive inference has shown to outperform inductive methods which predict test examples one by one, especially in small training sets. One popular approach for transduction is to construct a network on both the labeled and unlabeled data, and propagate labels between them for joint prediction. However, the main challenge with such label propagation (and transduction) is that the label propagation network is often obtained without consideration of the main task, since it is not possible to learn them at the test time.
Yet, with the meta-learning by episodic training, we can learn the label propagation network as the query examples sampled from the training set can be used to simulate the real test set for transductive inference. Motivated by this finding, we propose Transductive Propagation Network (TPN) to deal with the low-data problem. Instead of applying the inductive inference, we utilize the entire query set for transductive inference (see Figure 1). Specifically, we first map the input to an embedding space using a deep neural network. Then a graph construction module is proposed to exploit the manifold structure of the novel class space using the union of support set and query set. According to the graph structure, iterative label propagation is applied to propagate labels from the support set to the query set and finally leads to a closed-form solution. With the propagated scores and ground truth labels of the query set, we compute the cross-entropy loss with respect to the feature embedding and graph construction parameters. Finally, all parameters can be updated end-to-end using backpropagation.
The main contribution of this work is threefold.
· To the best of our knowledge, we are the first to model transductive inference explicitly in few-shot learning. Although Nichol et al. (2018) experimented with a transductive setting, they only share information between test examples by batch normalization rather than directly proposing a transductive model.
· In transductive inference, we propose to learn to propagate labels between data instances for unseen classes via episodic meta-learning. This learned label propagation graph is shown to significantly outperform naive heuristic-based label propagation methods (Zhou et al., 2004).
· We evaluate our approach on two benchmark datasets for few-shot learning, namely miniImageNet and tieredImageNet. The experimental results show that our Transductive Propagation Network outperforms the state-of-the-art methods on both datasets. Also, with semi-supervised learning, our algorithm achieves even higher performance, outperforming all semi-supervised few-shot learning baselines.

2

labeled unlabeled

...

...

Test Task

Meta-test

<latexit sha1_base64="n Uz 7pXGS+ADu8C4ANYwLuWLaE=">A AB7XicbZDLSgMxFIbP1Fut 6pLN8EiuCozIuiy6MZlBXuBzlAya aNzWVIMkIZ+g5uXCji1vdx59uYtrPQ1h8CH/85h5z xylnxvr+t1daW9/Y3CpvV3Z29/YPqodHbaMyTWiLK 50N8aGciZpyzL aTfVFIuY0 48vp3VO09UG6bkg52kNBJ4KFnC LbOaocxG4Z5v1rz6/5caBWCAmpQqNmvfoUDRTJBpSUcG9ML/NRGOdaWEU6nlTAzNMVkjIe051BiQU2Uz7edojPnDFCitHvSorn7eyLHwpiJiF2nwHZklmsz879aL7PJdZQzmWaWSrL4KMk4sgrNTkcDpimxfOIAE83croiMsMbEuoAqLoRg+eRVaF/UA8f3l7XGTRFHGU7gFM4hgCtowB0 oQUEHuEZXuHNU96L9+59LFpLXjFzDH/kf 4Aj+yPGw= </latexit> <latexit sha1_base64="nnUzz7pXGS+ADu8C4ANYwLuWLaE=">AAAB7XicbZDLSgMxFIbP1Futt6pLN8EiuCozIuiy6MZlBXuBzlAyaaaNzWVIMkIZ+g5uXCji1vdx59uYtrPQ1h8CH/85h5zzxylnxvr+t1daW9/Y3CpvV3Z29/YPqodHbaMyTWiLKK50N8aGciZpyzLLaTfVFIuY0048vp3VO09UG6bkg52kNBJ4KFnCCLbOaocxG4Z5v1rz6/5caBWCAmpQqNmvfoUDRTJBpSUcG9ML/NRGOdaWEU6nlTAzNMVkjIe051BiQU2Uz7edojPnDFCitHvSorn7eyLHwpiJiF2nwHZklmsz879aL7PJdZQzmWaWSrL4KMk4sgrNTkcDpimxfOIAE83croiMsMbEuoAqLoRg+eRVaF/UA8f3l7XGTRFHGU7gFM4hgCtowB00oQUEHuEZXuHNU96L9+59LFpLXjFzDH/kff4Aj+yPGw==</latexit>

Under review as a conference paper at ICLR 2019
2 RELATED WORK
Meta-learning In recent works, few-shot learning often follows the idea of metalearning (Schmidhuber, 1987; Thrun and Pratt, 2012). Meta-learning tries to optimize over batches of tasks rather than batches of data points. Each task corresponds to a learning problem, obtaining good performance on these tasks helps to learn quickly and generalize well to the target few-shot problem without suffering from overfitting. The well-known MAML approach (Finn et al., 2017) aims to find more transferable representations with sensitive parameters. A first-order meta-learning approach named Reptile is proposed by Nichol et al. (2018). It is closely related to first-order MAML but does not need a training-test split for each task. Compared with the above methods, our algorithm has a closed-form solution for label propagation on the query points, thus avoiding gradient computation in the inner updateand usually performs more efficiently.
Embedding and metric learning approaches Another category of few-shot learning approach aims to optimize the transferable embedding using metric learning approaches. Matching networks (Vinyals et al., 2016) produce a weighted nearest neighbor classifier given the support set and adjust feature embedding according to the performance on the query set. Prototypical networks (Snell et al., 2017) first compute a class's prototype to be the mean of its support set in the embedding space. Then the transferability of feature embedding is evaluated by finding the nearest class prototype for embedded query points. An extension of prototypical networks is proposed in Ren et al. (2018) to deal with semi-supervised few-shot learning. Relation Network (Sung et al., 2018) learns to learn a deep distance metric to compare a small number of images within episodes. Our proposed method is similar to these approaches in the sense that we all focus on learning deep embeddings with good generalization ability. However, our algorithm assumes a transductive setting, in which we utilize the union of support set and query set to exploit the manifold structure of novel class space by using episodic-wise parameters.
Transduction The setting of transductive inference was first introduced by Vapnik (Vapnik, 1999). Transductive Support Vector Machines (TSVMs) (Joachims, 1999) is a margin-based classification method that minimizes errors of a particular test set. It shows substantial improvements over inductive methods, especially for small training sets. Another category of transduction methods involves graph-based methods (Zhou et al., 2004; Wang and Zhang, 2006; Rohrbach et al., 2013; Fu et al., 2015). Label propagation is used in Zhou et al. (2004) to transfer labels from labeled to unlabeled data instances guided by the weighted graph. Label propagation is sensitive to variance parameter , so Linear Neighborhood Propagation (LNP) (Wang and Zhang, 2006) constructs approximated Laplacian matrix to avoid this issue. In Zhu and Ghahramani (2002), minimum spanning tree heuristic and entropy minimization are used to learn the parameter . In all these prior work, the graph construction is done on a pre-defined feature space using manually selected hyperparamters since it is not possible to learn them at test time. Our approach, on the other hand, is able to learn the graph construction network since it is a meta-learning framework with episodic training, where at each episode we simulate the test set with a subset of the training set.
In few-shot learning, Nichol et al. (2018) experiments with a transductive setting and shows improvements. However, they only share information between test examples via batch normalization (Ioffe and Szegedy, 2015) rather than explicitly model the transductive setting as in our algorithm.
3 MAIN APPROACH
In this section, we introduce the proposed algorithm that utilizes the manifold structure of the given few-shot classification task to improve the performance.
3.1 PROBLEM DEFINITION
We follow the episodic paradigm (Vinyals et al., 2016) that effectively trains a meta-learner for fewshot classification tasks, which is commonly employed in various literature (Snell et al., 2017; Finn et al., 2017; Nichol et al., 2018; Sung et al., 2018; Mishra et al., 2018). Given a relatively large
3

Under review as a conference paper at ICLR 2019

Support
CNN
f' <latexit sha1_base64="mwXg32Yuucwn/qu3KNZbcH25U3Y=">AAAB8nicbZBNS8NAEIYn9avWr6pHL8EieCqJCHosevFYwX5AGspmu2mXbnbD7qRQQn+GFw+KePXXePPfuG1z0NYXFh7emWFn3igV3KDnfTuljc2t7Z3ybmVv/+DwqHp80jYq05S1qBJKdyNimOCStZCjYN1UM5JEgnWi8f283pkwbbiSTzhNWZiQoeQxpwStFcT9vDchOh3xWb9a8+reQu46+AXUoFCzX/3qDRTNEiaRCmJM4HsphjnRyKlgs0ovMywldEyGLLAoScJMmC9WnrkX1hm4sdL2SXQX7u+JnCTGTJPIdiYER2a1Njf/qwUZxrdhzmWaIZN0+VGcCReVO7/fHXDNKIqpBUI1t7u6dEQ0oWhTqtgQ/NWT16F9VfctP17XGndFHGU4g3O4BB9uoAEP0IQWUFDwDK/w5qDz4rw7H8vWklPMnMIfOZ8/v8qRiw==</latexit>

f' (X )
<latexit sha1_base64="Tr0qVkLpz6JjAtLlNdU22dcmvkI=">AAAB9XicbZBNSwMxEIZn61etX1WPXoJFqJeyK4Iei148VrAf0NaSTbNtaDa7JLOVsvR/ePGgiFf/izf/jWm7B219IfDwzgwzef1YCoOu++3k1tY3Nrfy24Wd3b39g+LhUcNEiWa8ziIZ6ZZPDZdC8ToKlLwVa05DX/KmP7qd1Ztjro2I1ANOYt4N6UCJQDCK1noMemlnTHU8FNNy67xXLLkVdy6yCl4GJchU6xW/Ov2IJSFXyCQ1pu25MXZTqlEwyaeFTmJ4TNmIDnjboqIhN910fvWUnFmnT4JI26eQzN3fEykNjZmEvu0MKQ7Ncm1m/ldrJxhcd1Oh4gS5YotFQSIJRmQWAekLzRnKiQXKtLC3EjakmjK0QRVsCN7yl1ehcVHxLN9flqo3WRx5OIFTKIMHV1CFO6hBHRhoeIZXeHOenBfn3flYtOacbOYY/sj5/AE9i5JS</latexit>

CNN
g
<latexit sha1_base64="A+3baO5bX4FThulQS6+7jHXGons=">AAAB73icbZBNS8NAEIYn9avWr6pHL4tF8FQSEfRY9OKxgmkLbSib7aRdutnE3Y1QQv+EFw+KePXvePPfuG1z0NYXFh7emWFn3jAVXBvX/XZKa+sbm1vl7crO7t7+QfXwqKWTTDH0WSIS1QmpRsEl+oYbgZ1UIY1Dge1wfDurt59QaZ7IBzNJMYjpUPKIM2qs1Rn281464tN+tebW3bnIKngF1KBQs1/96g0SlsUoDRNU667npibIqTKcCZxWepnGlLIxHWLXoqQx6iCf7zslZ9YZkChR9klD5u7viZzGWk/i0HbG1Iz0cm1m/lfrZia6DnIu08ygZIuPokwQk5DZ8WTAFTIjJhYoU9zuStiIKsqMjahiQ/CWT16F1kXds3x/WWvcFHGU4QRO4Rw8uIIG3EETfGAg4Ble4c15dF6cd+dj0Vpyiplj+CPn8wdUcpAl</latexit>

<latexit sha1_base64="dwm2weui/za/rSvUQ73K/Rk4/5k=">AAAB7XicbZDLSgMxFIbP1Futt1GXboJFcFVmRNBl0Y3LCvYC7VAyaaaNzWVIMkIZ+g5uXCji1vdx59uYtrPQ1h8CH/85h5zzxylnxgbBt1daW9/Y3CpvV3Z29/YP/MOjllGZJrRJFFe6E2NDOZO0aZnltJNqikXMaTse387q7SeqDVPywU5SGgk8lCxhBFtntXqGDQXu+9WgFsyFViEsoAqFGn3/qzdQJBNUWsKxMd0wSG2UY20Z4XRa6WWGppiM8ZB2HUosqIny+bZTdOacAUqUdk9aNHd/T+RYGDMRsesU2I7Mcm1m/lfrZja5jnIm08xSSRYfJRlHVqHZ6WjANCWWTxxgopnbFZER1phYF1DFhRAun7wKrYta6Pj+slq/KeIowwmcwjmEcAV1uIMGNIHAIzzDK7x5ynvx3r2PRWvJK2aO4Y+8zx+cYY8j</latexit>
Wij = exp
<latexit sha1_base64="3fGmEY81k5c1axz7oVedAzBLOzk=">AAACdnicfVFNaxsxENVu0yZ1P+K2p1IIIibUhibshkJ7CYT00mMCdRywzKKVZ2052g+k2WAj9BPy53rr7+glx2ptl6ZJyIDg8eY9RvMmrZQ0GEW/gvDJxtNnm1vPWy9evnq93X7z9tyUtRbQF6Uq9UXKDShZQB8lKrioNPA8VTBIL781/cEVaCPL4gcuKhjlfFLITAqOnkra1yznOE0zO3CJlTNHjyiDecVSOenus0xzYWNnDx1DmKOXjV13xf71Zd7HrriuptJ154nsOcuMnOQ8ke7To9LZP+nM9ZqJvaTdiQ6iZdH7IF6DDlnXadL+ycalqHMoUChuzDCOKhxZrlEKBa7FagMVF5d8AkMPC56DGdllbI7ueWZMs1L7VyBdsrcdlufGLPLUK5sNzN1eQz7UG9aYfR1ZWVQ1QiFWg7JaUSxpcwM6lhoEqoUHXGjp/0rFlPuo0F+q5UOI7658H5wfHsQen33uHJ+s49giH8gu6ZKYfCHH5Ds5JX0iyO/gfbAbdIKbcCfcCz+upGGw9rwj/1UY/QEddMJ4</latexit>

1 2

d(

f'(xi)
i

,

f'(xj
j

)

)

Query Label

LOSS

Query

Feature Embedding

Graph Construction

Label Propagation

y <latexit sha1_base64="PVfiOQDJDy8vdU8u5CGD6xqMrD4=">AAAB8XicbVDLSsNAFL2pr1pfVZduBovgqiQi6LLoxmUF+8A2lMl00g6dTMLMjVBC/8KNC0Xc+jfu/BsnbRbaemDgcM69zLknSKQw6LrfTmltfWNzq7xd2dnd2z+oHh61TZxqxlsslrHuBtRwKRRvoUDJu4nmNAok7wST29zvPHFtRKwecJpwP6IjJULBKFrpsR9RHAdhNp0NqjW37s5BVolXkBoUaA6qX/1hzNKIK2SSGtPz3AT9jGoUTPJZpZ8anlA2oSPes1TRiBs/myeekTOrDEkYa/sUkrn6eyOjkTHTKLCTeUKz7OXif14vxfDaz4RKUuSKLT4KU0kwJvn5ZCg0ZyinllCmhc1K2JhqytCWVLEleMsnr5L2Rd2z/P6y1rgp6ijDCZzCOXhwBQ24gya0gIGCZ3iFN8c4L86787EYLTnFzjH8gfP5A/7AkR0=</latexit> Loss

<latexit sha1_base64="nnUzz7pXGS+ADu8C4ANYwLuWLaE=">AAAB7XicbZDLSgMxFIbP1Futt6pLN8EiuCozIuiy6MZlBXuBzlAyaaaNzWVIMkIZ+g5uXCji1vdx59uYtrPQ1h8CH/85h5zzxylnxvr+t1daW9/Y3CpvV3Z29/YPqodHbaMyTWiLKK50N8aGciZpyzLLaTfVFIuY0048vp3VO09UG6bkg52kNBJ4KFnCCLbOaocxG4Z5v1rz6/5caBWCAmpQqNmvfoUDRTJBpSUcG9ML/NRGOdaWEU6nlTAzNMVkjIe051BiQU2Uz7edojPnDFCitHvSorn7eyLHwpiJiF2nwHZklmsz879aL7PJdZQzmWaWSrL4KMk4sgrNTkcDpimxfOIAE83croiMsMbEuoAqLoRg+eRVaF/UA8f3l7XGTRFHGU7gFM4hgCtowB00oQUEHuEZXuHNU96L9+59LFpLXjFzDH/kff4Aj+yPGw==</latexit> <latexit sha1_base64="nnUzz7pXGS+ADu8C4ANYwLuWLaE=">AAAB7XicbZDLSgMxFIbP1Futt6pLN8EiuCozIuiy6MZlBXuBzlAyaaaNzWVIMkIZ+g5uXCji1vdx59uYtrPQ1h8CH/85h5zzxylnxvr+t1daW9/Y3CpvV3Z29/YPqodHbaMyTWiLKK50N8aGciZpyzLLaTfVFIuY0048vp3VO09UG6bkg52kNBJ4KFnCCLbOaocxG4Z5v1rz6/5caBWCAmpQqNmvfoUDRTJBpSUcG9ML/NRGOdaWEU6nlTAzNMVkjIe051BiQU2Uz7edojPnDFCitHvSorn7eyLHwpiJiF2nwHZklmsz879aL7PJdZQzmWaWSrL4KMk4sgrNTkcDpimxfOIAE83croiMsMbEuoAqLoRg+eRVaF/UA8f3l7XGTRFHGU7gFM4hgCtowB00oQUEHuEZXuHNU96L9+59LFpLXjFzDH/kff4Aj+yPGw==</latexit> <latexit sha1_base64="nnUzz7pXGS+ADu8C4ANYwLuWLaE=">AAAB7XicbZDLSgMxFIbP1Futt6pLN8EiuCozIuiy6MZlBXuBzlAyaaaNzWVIMkIZ+g5uXCji1vdx59uYtrPQ1h8CH/85h5zzxylnxvr+t1daW9/Y3CpvV3Z29/YPqodHbaMyTWiLKK50N8aGciZpyzLLaTfVFIuY0048vp3VO09UG6bkg52kNBJ4KFnCCLbOaocxG4Z5v1rz6/5caBWCAmpQqNmvfoUDRTJBpSUcG9ML/NRGOdaWEU6nlTAzNMVkjIe051BiQU2Uz7edojPnDFCitHvSorn7eyLHwpiJiF2nwHZklmsz879aL7PJdZQzmWaWSrL4KMk4sgrNTkcDpimxfOIAE83croiMsMbEuoAqLoRg+eRVaF/UA8f3l7XGTRFHGU7gFM4hgCtowB00oQUEHuEZXuHNU96L9+59LFpLXjFzDH/kff4Aj+yPGw==</latexit>
<latexit sha1_base64="nnUzz7pXGS+ADu8C4ANYwLuWLaE=">AAAB7XicbZDLSgMxFIbP1Futt6pLN8EiuCozIuiy6MZlBXuBzlAyaaaNzWVIMkIZ+g5uXCji1vdx59uYtrPQ1h8CH/85h5zzxylnxvr+t1daW9/Y3CpvV3Z29/YPqodHbaMyTWiLKK50N8aGciZpyzLLaTfVFIuY0048vp3VO09UG6bkg52kNBJ4KFnCCLbOaocxG4Z5v1rz6/5caBWCAmpQqNmvfoUDRTJBpSUcG9ML/NRGOdaWEU6nlTAzNMVkjIe051BiQU2Uz7edojPnDFCitHvSorn7eyLHwpiJiF2nwHZklmsz879aL7PJdZQzmWaWSrL4KMk4sgrNTkcDpimxfOIAE83croiMsMbEuoAqLoRg+eRVaF/UA8f3l7XGTRFHGU7gFM4hgCtowB00oQUEHuEZXuHNU96L9+59LFpLXjFzDH/kff4Aj+yPGw==</latexit>

Figure 2: The overall framework of our algorithm in which the manifold structure of the entire query set helps to learn better decision boundary. The proposed algorithm is composed of four components: feature embedding, graph construction, label propagation, and loss generation.

labeled dataset with a set of classes Ctrain, the objective of this setting is to train classifiers for an unseen set of novel classes Ctest, for which only a few labeled examples are available. Specifically, in each episode, a small subset of N classes are sampled from Ctrain to construct a support set and a query set. The support set contains K examples from each of the N classes (i.e., N -way K-shot setting) denoted as S = {(x1, y1), (x2, y2), . . . , (xN×K , yN×K )}, while the query set Q = {(x1, y1), (x2, y2), . . . , (xT , yT )} includes different examples from the same N classes. Here, the support set S in each episode serves as the labeled training set on which the model is trained to minimize the loss of its predictions for the query set Q. This procedure mimics training classifiers for Ctest and goes episode by episode until convergence.
Meta-learning implemented by the episodic training reasonably performs well to few-shot classification tasks. Yet, due to the lack of labeled instances (K is usually very small) in the support set, we observe that a reliable classifier is still difficult to be obtained. This motivates us to consider a transductive setting that utilizes the whole query set for the prediction rather than predicting each example independently. Taking the entire query set into account, we can alleviate the low-data problem and provide more reliable generalization property.
3.2 TRANSDUCTIVE PROPAGATION NETWORK (TPN)
We introduce Transductive Propagation Network (TPN) illustrated in Figure 2, which consists of four components: feature embedding with a convolutional neural network; graph construction that produces example-wise parameters to exploit the manifold structure; label propagation that spreads labels from the support set S to the query set Q; a loss generation step that computes a crossentropy loss between propagated labels and the ground-truths on Q to jointly train all parameters in the framework.
3.2.1 FEATURE EMBEDDING
We employ a convolutional neural network f to extract features of an input xi, where f(xi; ) refers to the feature map and  indicates a parameter of the network. Despite the generality, we adopt the same architecture used in several recent works (Snell et al., 2017; Sung et al., 2018; Vinyals et al., 2016). By doing so, we can provide more fair comparisons in the experiments, highlighting the effects of transductive approach. The network is made up of four convolutional blocks where each block begins with a 2D convolutional layer with a 3 × 3 kernel and filter size of 64. Each convolutional layer is followed by a batch-normalization layer (Ioffe and Szegedy, 2015), a ReLU nonlinearity and a 2 × 2 max-pooling layer. We use the same embedding function f for both the support set S and the query set Q.
3.2.2 GRAPH CONSTRUCTION
Manifold learning (Chung and Graham, 1997; Zhou et al., 2004; Yang et al., 2016) discovers the embedded low-dimensional subspace in the data, where it is critical to choose an appropriate neigh-
4

Under review as a conference paper at ICLR 2019

borhood graph. A common choice is Gaussian similarity function:

Wij = exp

-

d(xi, xj 22

)

,

(1)

where d(·, ·) is a distance measure (e.g., Euclidean distance) and  is the length scale parameter. The neighborhood structure behaves differently with respect to various , which means that it needs to carefully select the optimal  for the best performance of label propagation (Wang and Zhang, 2006; Zhu and Ghahramani, 2002). In addition, we observe that there is no principled way to tune the
scale parameter in meta-learning framework, though there exist some heuristics for dimensionalty
reduction methods (Zelnik-Manor and Perona, 2004; Sugiyama, 2007).

To obtain a proper neighborhood graph in meta-learning, we propose a graph construction module built on the union set of support set and query set: S  Q. This module is composed of a convolutional neural network g which takes the feature map f(xi) for xi  S  Q to produce an example-wise length-scale parameter i = g(f(xi)). Note that the scale parameter is determined example-wisely and learned in an episodic training procedure, which adapts well to different tasks
and makes it suitable for few-shot learning. The graph construction module is composed of a simple
feedforward neural network, and details of network architecture are presented in Appendix A. Our
similarity function is then defined as follows:

Wij = exp

-

1 2

d

f(xi) i

,

f(xj) j

(2)

where W  R(N×K+T )×(N×K+T ) for all instances in S  Q. We only keep the k-max values in each row of W to construct a k-nearest neighbour graph. Then we apply the normalized graph Laplacians (Chung and Graham, 1997) on W , that is, S = D-1/2W D-1/2, where D is a diagonal matrix with its (i, i)-value to be the sum of the i-th row of W .

3.2.3 LABEL PROPAGATION

We now describe how to get predictions for the query set Q using label propagation, before the last
cross-entropy loss step. Let F denote the set of (N × K + T ) × N matrix with nonnegative entries.
We define a label matrix Y  F with Yij = 1 if xi is from the support set and labeled as yi = j, otherwise Yij = 0. Starting from Y , label propagation iteratively determines the unknown labels of instances in the union set S  Q according to the graph structure using the following formulation:

Ft+1 = SFt + (1 - )Y ,

(3)

where Ft  F denotes the predicted labels at the timestamp t, S denotes the normalized weight, and   (0, 1) controls the amount of propagated information. It is well known that the sequence {Ft} converges to F  = (I - S)-1Y , where I is the identity matrix (Zhou et al., 2004). We directly utilize this result for the label propagation, making a whole episodic meta-learning procedure more efficient in practice.

3.2.4 CLASSIFICATION LOSS GENERATION

The objective of this step is to compute the classification loss between the predictions of the query set via label propagation and the ground-truths. We compute the cross-entropy loss between predicted scores F  and ground-truth labels from Q to learn all parameters in an end-to-end fashion, where F  is converted to probabilistic score using softmax:

P (y~i = j|xi) =

exp(Fij )

N j=1

exp(Fij

)

.

(4)

Here, y~i denotes the final predicted label for ith instance in the query set and Fij denotes the jth component of predicted label from label propagation. Then the loss function is computed as:

TN

J(, ) =

-I(yi == j) log(P (y~i = j|xi)) ,

i=1 j=1

(5)

where yi means the ground-truth label of xi and I(b) is an indicator function, I(b) = 1 if b is true and 0 otherwise.

5

Under review as a conference paper at ICLR 2019

Note that in Equation (5), the loss is dependent on two set of parameters ,  (even though the dependency is implicit through Fij). All these parameters are jointly updated by the episodic training in an end-to-end manner.

4 EXPERIMENTS

We evaluate and compare our TPN with state-of-the-art approaches on two datasets, i.e., miniImageNet (Ravi and Larochelle, 2017) and tieredImageNet (Ren et al., 2018). The former is the most popular few-shot learning benchmark and the latter is a much larger dataset released recently for few-shot learning.

4.1 DATASETS
miniImageNet. The miniImageNet dataset is a collection of Imagenet (Krizhevsky et al., 2012) for few-shot image recognition. It is composed of 100 classes randomly selected from Imagenet with each class containing 600 examples. In order to directly compare with state-of-the-art algorithms for few-shot learning, we rely on the class splits used by Ravi and Larochelle (2017), which includes 64 classes for training, 16 for validation, and 20 for test. All images are resized to 84 × 84 pixels.
tieredImageNet. Similar to miniImageNet , tieredImageNet (Ren et al., 2018) is also a subset of Imagenet (Krizhevsky et al., 2012), but it has a larger number of classes from ILSVRC-12 (608 classes rather than 100 for miniImageNet). Different from miniImageNet, it has a hierarchical structure of broader categories corresponding to high-level nodes in Imagenet. The top hierarchy has 34 categories, which are divided into 20 training (351 classes), 6 validation (97 classes) and 8 test (160 classes) categories. The average number of examples in each class is 1281. This high-level split strategy ensures that the training classes are distinct from the test classes semantically. This is a more challenging and realistic few-shot setting since there is no assumption that training classes should be similar to test classes. Similarly, all images are resized to 84 × 84 pixels.

4.2 EXPERIMENTAL SETUP
For fair comparison with other methods, we adopt a widely-used CNN (Finn et al., 2017; Snell et al., 2017) as the feature embedding function f (Section 3.2.1). The hyper-parameter k of k-nearest neighbour graph (Section 3.2.2) is set to 20 and  of label propagation is set to 0.99, as suggested in Zhou et al. (2004).
Following Snell et al. (2017), we adopt the episodic training procedure, i.e, we sample a set of N -way K-shot training tasks to mimic the N -way K-shot test problems. Moreover, Snell et al. (2017) proposed a "Higher Way " training strategy which used more training classes in each episode than test case. However, we find that it is beneficial to train with more examples than test phase (Appendix B.1). This is denoted as "Higher Shot" in our experiments. For 1-shot and 5-shot test problem, we adopt 5-shot and 10-shot training respectively. In all settings, the query number is set to 15 and the performance are averaged over 600 randomly generated episodes from the test set.
All our models were trained with Adam (Kingma and Ba, 2015) and an initial learning rate of 10-3. For miniImageNet, we cut the learning rate in half every 10, 000 episodes and for tieredImageNet, we cut the learning rate every 25, 000 episodes. The reason for larger decay step is that tieredImageNet has more classes and more examples in each class which needs larger training iterations. We ran the training process until the validation loss reached a plateau.

4.3 FEW-SHOT LEARNING RESULTS

We compare our method with several state-of-the-art approaches in various settings. Even though

the transductive method has never been used explicitly, batch normalization layer was used transduc-

tively to share information between test examples. For example, in Finn et al. (2017); Nichol et al.

(2018), they use the query batch statistics rather than global BN parameters for the prediction, which

leads to performance gain in the query set. Besides, we propose two simple transductive methods

as baselines that explicitly utilize the query set. First, we propose the MAML+Transduction with

slight modification of loss function to: J () =

T i=1

yi

log

P(yi|xi)

+

N ×K+T i,j=1

Wij

yi - yj

2 2

6

Under review as a conference paper at ICLR 2019

Table 1: Few-shot classification accuracies on miniImageNet. All results are averaged over 600 test episodes. Top results are highlighted.

Model MAML (Finn et al., 2017) MAML+Transduction Reptile (Nichol et al., 2018) Reptile + BN (Nichol et al., 2018) PROTO NET (Snell et al., 2017) PROTO NET (Higher Way) (Snell et al., 2017) RELATION NET (Sung et al., 2018) Label Propagation TPN TPN (Higher Shot)

Transduction BN Yes No BN No No BN Yes Yes Yes

5-way Acc 1-shot 5-shot 48.70 63.11 50.83 66.19 47.07 62.74 49.97 65.99 46.14 65.77 49.42 68.20 51.38 67.07 52.31 68.18 53.75 69.43 55.51 69.86

10-way Acc 1-shot 5-shot 31.27 46.92 31.83 48.23 31.10 44.66 32.00 47.60 32.88 49.29 34.61 50.09 34.86 47.94 35.23 51.24 36.62 52.32 38.44 52.77

* "Higher Way" means using more classes in training episodes. "Higher Shot" means using more shots in training episodes. "BN" means information is shared among test examples using batch normalization.

Table 2: Few-shot classification accuracies on tieredImageNet. All results are averaged over 600 test episodes. Top results are highlighted.

Model MAML (Finn et al., 2017) MAML + Transduction Reptile (Nichol et al., 2018) Reptile + BN (Nichol et al., 2018) PROTO NET (Snell et al., 2017) PROTO NET (Higher Way) (Snell et al., 2017) RELATION NET (Sung et al., 2018) Label Propagation TPN TPN (Higher Shot)

Transduction BN Yes No BN No No BN Yes Yes Yes

5-way Acc 1-shot 5-shot 51.67 70.30 53.23 70.83 48.97 66.47 52.36 71.03 48.58 69.57 53.31 72.69 54.48 71.31 55.23 70.43 57.53 72.85 59.91 73.30

10-way Acc 1-shot 5-shot 34.44 53.32 34.78 54.67 33.67 48.04 35.32 51.98 37.35 57.83 38.62 58.32 36.32 58.05 39.39 57.89 40.93 59.17 44.80 59.44

* "Higher Way" means using more classes in training episodes. "Higher Shot" means using more shots in training episodes. "BN" means information is shared among test examples using batch normalization.

for transductive inference. The additional term serves as transductive regularization. Second, the naive heuristic-based label propagation methods (Zhou et al., 2004) is proposed to explicitly model the transductive inference.
Experimental results are shown in Table 1 and Table2. Transductive batch normalization methods tend to perform better than pure inductive methods except for the "Higher Way" PROTO NET. Label propagation without learning to propagate outperforms other baseline methods in most cases, which verifies the necessity of transduction. The proposed TPN achieves the state-of-the-art results and surpasses all the others with a large margin even when the model is trained with regular shots. When "Higher Shot" is applied, the performance of TPN continues to improve especially for 1-shot case. This confirms that our model effectively finds the episodic-wise manifold structure of test examples through learning to construct the graph for label propagation.
Another observation is that the advantages of 5-shot classification is less significant than that of 1shot case. For example, in 5-way miniImageNet , the absolute improvement of TPN over published state-of-the-art is 4.13% for 1-shot and 1.66% for 5-shot. To further investigate this, we experimented 5-way k-shot (k = 1, 2, · · · , 10) experiments. The results are shown in Figure 3. Our TPN performs consistently better than other methods with varying shots. Moreover, it can be seen that TPN outperforms other methods with a large margin in lower shots. With the shot increase, the advantage of transduction narrows since more labelled data are used. This finding agrees with the results in TSVM (Joachims, 1999): when more training data are available, the bonus of transductive inference will be decreased.
7

Under review as a conference paper at ICLR 2019

Figure 3: 5-way performance with various training/test shots.

Table 3: Semi-supervised comparison on miniImageNet and tieredImageNet.

Model Soft k-Means (Ren et al., 2018) Soft k-Means+Cluster (Ren et al., 2018) Masked Soft k-Means (Ren et al., 2018) TPN-semi

5-way miniImageNet

1-shot

5-shot

50.09 ± 0.45 64.59 ± 0.28

49.03 ± 0.24 63.08 ± 0.18

50.41 ± 0.31 64.39 ± 0.24

52.78 ± 0.27 66.42 ± 0.21

5-way tieredImageNet

1-shot

5-shot

51.52 ± 0.36 70.25 ± 0.31

51.85 ± 0.25 69.42 ± 0.17

52.39 ± 0.44 69.88 ± 0.20

55.74 ± 0.29 71.01 ± 0.23

4.4 COMPARISON WITH SEMI-SUPERVISED FEW-SHOT LEARNING
The main difference of traditional semi-supervised learning and transduction is the source of unlabeled data. Transductive methods directly use test set as unlabeled data while semi-supervised learning usually has an extra unlabeled set. In order to compare with semi-supervised methods, we propose a semi-supervised version of TPN, named TPN-semi, which classifies one test example each time by propagating labels from the labeled set and extra unlabeled set.
We use miniImageNet and tieredImageNet with the labeled/unlabeled data split proposed by Ren et al. (2018). Specifically, they split the images of each class into disjoint labeled and unlabeled sets. For miniImageNet, the ratio of labeled/unlabeled data is 40% and 60% in each class. Likewise, the ratio is 10% and 90% for tieredImageNet. All semi-supervised methods (including TPN-semi) sample support/query data from the labeled set (e.g, 40% from miniImageNet) and sample unlabeled data from the unlabeled sets (e.g, 60% from miniImageNet).
Following Ren et al. (2018), we report the average accuracy over 10 random labeled/unlabeled splits and the uncertainty computed in standard error. Results are shown in Table 3. It can be seen that TPN-semi outperforms all other algorithms with a large margin, especially for 1-shot case. Although TPN is originally designed to perform transductive inference, we show that it can be successfully adapted to semi-supervised learning tasks with little modification. In certain cases where we can not get all test data, the TPN-semi can be used as an effective alternative algorithm.
5 CONCLUSION
In this work, we proposed the transductive setting for few-shot learning. Our proposed approach, namely Transductive Propagation Network (TPN), utilizes the entire test set for transductive inference. Specifically, our approach is composed of four steps: feature embedding, graph construction, label propagation, and loss computation. Graph construction is a key step that produces examplewise parameters to exploit the manifold structure in each episode. In our method, all parameters are learned end-to-end using cross-entropy loss with respect to the ground truth labels and the prediction scores in the query set. We obtained the state-of-the-art results on miniImageNet and tieredImageNet. Also, the semi-supervised adaptation of our algorithm achieved higher results than other semi-supervised methods. In future work, we are going to explore the episodic-wise distance metric rather than only using example-wise parameters for the Euclidean distance.
8

Under review as a conference paper at ICLR 2019
REFERENCES
Fan RK Chung and Fan Chung Graham. Spectral graph theory. Number 92. American Mathematical Soc., 1997.
Chelsea Finn, Pieter Abbeel, and Sergey Levine. Model-agnostic meta-learning for fast adaptation of deep networks. In International Conference on Machine Learning, pages 1126­1135, 2017.
Yanwei Fu, Timothy M Hospedales, Tao Xiang, and Shaogang Gong. Transductive multi-view zero-shot learning. IEEE transactions on pattern analysis and machine intelligence, 37(11):2332­2345, 2015.
Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recognition. In Computer Vision and Pattern Recognition, pages 770­778, 2016.
Sergey Ioffe and Christian Szegedy. Batch normalization: Accelerating deep network training by reducing internal covariate shift. In International Conference on Machine Learning, pages 448­456, 2015.
Yangqing Jia, Evan Shelhamer, Jeff Donahue, Sergey Karayev, Jonathan Long, Ross Girshick, Sergio Guadarrama, and Trevor Darrell. Caffe: Convolutional architecture for fast feature embedding. In ACM International Conference on Multimedia, pages 675­678. ACM, 2014.
Thorsten Joachims. Transductive inference for text classification using support vector machines. In International Conference on Machine Learning, volume 99, pages 200­209, 1999.
Diederik P Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In International Conference on Learning Representations (ICLR), volume 5, 2015.
Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton. Imagenet classification with deep convolutional neural networks. In Advances in Neural Information Processing Systems, pages 1097­1105, 2012.
Brenden Lake, Ruslan Salakhutdinov, Jason Gross, and Joshua Tenenbaum. One shot learning of simple visual concepts. In Conference of the Cognitive Science Society, volume 33, 2011.
Yoonho Lee and Seungjin Choi. Gradient-based meta-learning with learned layerwise metric and subspace. In International Conference on Machine Learning, pages 2933­2942, 2018.
Nikhil Mishra, Mostafa Rohaninejad, Xi Chen, and Pieter Abbeel. A simple neural attentive meta-learner. In International Conference on Learning Representations, 2018.
Alex Nichol, Joshua Achiam, and John Schulman. On first-order meta-learning algorithms. arXiv preprint arXiv:1803.02999, 2018.
Sachin Ravi and Hugo Larochelle. Optimization as a model for few-shot learning. International Conference on Learning Representations, 2017.
Mengye Ren, Eleni Triantafillou, Sachin Ravi, Jake Snell, Kevin Swersky, Joshua B Tenenbaum, Hugo Larochelle, and Richard S Zemel. Meta-learning for semi-supervised few-shot classification. International Conference on Learning Representations, 2018.
Marcus Rohrbach, Sandra Ebert, and Bernt Schiele. Transfer learning in a transductive setting. In Advances in Neural Information Processing Systems, pages 46­54, 2013.
Ju¨rgen Schmidhuber. Evolutionary principles in self-referential learning, or on learning how to learn: the meta-meta-... hook. PhD thesis, Technische Universita¨t Mu¨nchen, 1987.
Karen Simonyan and Andrew Zisserman. Very deep convolutional networks for large-scale image recognition. International Conference on Learning Representations, 2015.
Jake Snell, Kevin Swersky, and Richard Zemel. Prototypical networks for few-shot learning. In Advances in Neural Information Processing Systems, pages 4080­4090, 2017.
Masashi Sugiyama. Dimensionality reduction of multimodal labeled data by local fisher discriminant analysis. Journal of Machine Learning Research, 8:1027­1061, 2007.
Flood Sung, Yongxin Yang, Li Zhang, Tao Xiang, Philip HS Torr, and Timothy M Hospedales. Learning to compare: Relation network for few-shot learning. In Computer Vision and Pattern Recognition, 2018.
Sebastian Thrun and Lorien Pratt. Learning to learn. Springer Science & Business Media, 2012.
9

Under review as a conference paper at ICLR 2019
Vladimir Naumovich Vapnik. An overview of statistical learning theory. IEEE transactions on neural networks, 10(5):988­999, 1999.
Oriol Vinyals, Charles Blundell, Tim Lillicrap, Daan Wierstra, et al. Matching networks for one shot learning. In Advances in Neural Information Processing Systems, pages 3630­3638, 2016.
Fei Wang and Changshui Zhang. Label propagation through linear neighborhoods. In International Conference on Machine Learning, pages 985­992. ACM, 2006.
Yu-Xiong Wang, Ross Girshick, Martial Hebert, and Bharath Hariharan. Low-shot learning from imaginary data. In Computer Vision and Pattern Recognition, 2018.
Zhongwen Xu, Linchao Zhu, and Yi Yang. Few-shot object recognition from machine-labeled web images. In Computer Vision and Pattern Recognition, 2017.
Zhilin Yang, William Cohen, and Ruslan Salakhudinov. Revisiting semi-supervised learning with graph embeddings. In International Conference on Machine Learning, pages 40­48, 2016.
Lihi Zelnik-Manor and Pietro Perona. Self-tuning spectral clustering. In Advances in Neural Information Processing Systems, 2004.
Denny Zhou, Olivier Bousquet, Thomas N Lal, Jason Weston, and Bernhard Scho¨lkopf. Learning with local and global consistency. In Advances in Neural Information Processing Systems, pages 321­328, 2004.
Xiaojin Zhu and Zoubin Ghahramani. Learning from labeled and unlabeled data with label propagation. Tech. Rep., Technical Report CMU-CALD-02­107, Carnegie Mellon University, 2002.
10

Under review as a conference paper at ICLR 2019

A GRAPH CONSTRUCTION STRUCTURE

f'(xi)
<latexit sha1_base64="cqZGn+38nvbJzJmyco5e7rSxaQ4=">AAACAnicbVDLSsNAFL2pr1pfUVfiZrAIdVMSEXRZdOOygn1AE8JkOmmHTh7MTIolFDf+ihsXirj1K9z5N07aLLT1wIXDOfdy7z1+wplUlvVtlFZW19Y3ypuVre2d3T1z/6At41QQ2iIxj0XXx5JyFtGWYorTbiIoDn1OO/7oJvc7Yyoki6N7NUmoG+JBxAJGsNKSZx4FXuaMsUiGbFpzQqyGfpA9eGx65plVq27NgJaJXZAqFGh65pfTj0ka0kgRjqXs2Vai3AwLxQin04qTSppgMsID2tM0wiGVbjZ7YYpOtdJHQSx0RQrN1N8TGQ6lnIS+7syPlIteLv7n9VIVXLkZi5JU0YjMFwUpRypGeR6ozwQlik80wUQwfSsiQywwUTq1ig7BXnx5mbTP67ZVt+8uqo3rIo4yHMMJ1MCGS2jALTShBQQe4Rle4c14Ml6Md+Nj3loyiplD+APj8we6Tpef</latexit>
f'(xj)
<latexit sha1_base64="yHN1w328A9Y3qWrQ9uY3W9ELeYE=">AAACAnicbVBNS8NAEJ3Ur1q/op7ES7AI9VISEfRY9OKxgv2AJoTNdtOu3WzC7qZYQvHiX/HiQRGv/gpv/hs3bQ5afTDweG+GmXlBwqhUtv1llJaWV1bXyuuVjc2t7R1zd68t41Rg0sIxi0U3QJIwyklLUcVINxEERQEjnWB0lfudMRGSxvxWTRLiRWjAaUgxUlryzYPQz9wxEsmQTmtuhNQwCLN7/2564ptVu27PYP0lTkGqUKDpm59uP8ZpRLjCDEnZc+xEeRkSimJGphU3lSRBeIQGpKcpRxGRXjZ7YWoda6VvhbHQxZU1U39OZCiSchIFujM/Ui56ufif10tVeOFllCepIhzPF4Ups1Rs5XlYfSoIVmyiCcKC6lstPEQCYaVTq+gQnMWX/5L2ad2x687NWbVxWcRRhkM4gho4cA4NuIYmtADDAzzBC7waj8az8Wa8z1tLRjGzD79gfHwDu9SXoA==</latexit>

3  3 conv

BatchNorm

ReLU

22 <latexit sha1_base64="3+BUzeANFl9ATSFgSZYM6N2vRss=">AAACR3icbVA9TxtBEN0zCR+XBAyUNKvYSDSx7kwBJSINRYQAxYDkc6y99RivvB+n3TmEdfK/S0Objr9AkyIIUbK2L+LzSSu9eTNPM/vSTAqHUXQTVOY+fJxfWFwKP33+srxSXV07dSa3HFrcSGPPU+ZACg0tFCjhPLPAVCrhLB1+n/TPLsE6YfRPHGXQUexCi77gDL3Urf5KOGgEG9a3ExQKHN2u0wThCgtu9OU4ScJZtc+QDw6NVU/SCfxoTap6s7Q2/1sVu/qWGSPH3WotakRT0LckLkmNlDjqVv8kPcNz5Y/ikjnXjqMMOwWzKLiEcZjkDjLGh+wC2p5q5vd2imkOY7rplR7tG+ufRjpVnzsKppwbqdRPKoYD97o3Ed/rtXPs73YKobMcQfPZon4uKRo6CZX2hAWOcuQJ41b4WykfMMu4T9aFPoT49ZffktNmI44a8XGztrdfxrFINshXskViskP2yAE5Ii3CyW9yS/6Ru+A6+BvcBw+z0UpQetbJC1SCRxg7sXY=</latexit>

max-pool

g

<latexit sha1_base64="f3lobHVcYCU7QlaKoGRqPGrmSlE=">AAAB73icbVBNS8NAEJ3Ur1q/qh69LBbBU0lE0GPRi8cKpi20oWy2m3bpZhN3J0IJ/RNePCji1b/jzX/jts1BWx8MPN6bYWZemEph0HW/ndLa+sbmVnm7srO7t39QPTxqmSTTjPsskYnuhNRwKRT3UaDknVRzGoeSt8Px7cxvP3FtRKIecJLyIKZDJSLBKFqpM+znvXQkpv1qza27c5BV4hWkBgWa/epXb5CwLOYKmaTGdD03xSCnGgWTfFrpZYanlI3pkHctVTTmJsjn907JmVUGJEq0LYVkrv6eyGlszCQObWdMcWSWvZn4n9fNMLoOcqHSDLlii0VRJgkmZPY8GQjNGcqJJZRpYW8lbEQ1ZWgjqtgQvOWXV0nrou65de/+sta4KeIowwmcwjl4cAUNuIMm+MBAwjO8wpvz6Lw4787HorXkFDPH8AfO5w9UcJAl</latexit>

3  3 conv

BatchNorm

ReLU

22 <latexit sha1_base64="3+BUzeANFl9ATSFgSZYM6N2vRss=">AAACR3icbVA9TxtBEN0zCR+XBAyUNKvYSDSx7kwBJSINRYQAxYDkc6y99RivvB+n3TmEdfK/S0Objr9AkyIIUbK2L+LzSSu9eTNPM/vSTAqHUXQTVOY+fJxfWFwKP33+srxSXV07dSa3HFrcSGPPU+ZACg0tFCjhPLPAVCrhLB1+n/TPLsE6YfRPHGXQUexCi77gDL3Urf5KOGgEG9a3ExQKHN2u0wThCgtu9OU4ScJZtc+QDw6NVU/SCfxoTap6s7Q2/1sVu/qWGSPH3WotakRT0LckLkmNlDjqVv8kPcNz5Y/ikjnXjqMMOwWzKLiEcZjkDjLGh+wC2p5q5vd2imkOY7rplR7tG+ufRjpVnzsKppwbqdRPKoYD97o3Ed/rtXPs73YKobMcQfPZon4uKRo6CZX2hAWOcuQJ41b4WykfMMu4T9aFPoT49ZffktNmI44a8XGztrdfxrFINshXskViskP2yAE5Ii3CyW9yS/6Ru+A6+BvcBw+z0UpQetbJC1SCRxg7sXY=</latexit>

max-pool

FC layer 1

FC <latexit sha1_base64="9V9RQtSsz6S5UteGsAorVSenSGY=">AAACDHicbVC7TsMwFHXKq4RXgZHFokViqpIuMFZUQoxFog+piSrHvWmtOk5kO0hR1A9g4VdYGECIlQ9g429wH0NpOZKl43PuvfY9QcKZ0o7zYxU2Nre2d4q79t7+weFR6fikreJUUmjRmMeyGxAFnAloaaY5dBMJJAo4dIJxY+p3HkEqFosHnSXgR2QoWMgo0Ubql8oeBaFB2rcNzEkGElfciuctXWsVU+VUnRnwOnEXpIwWaPZL394gpmlkJlNOlOq5TqL9nEjNKIeJ7aUKEkLHZAg9QwWJQPn5bJkJvjDKAIexNEdoPFOXO3ISKZVFgamMiB6pVW8q/uf1Uh1e+zkTSapB0PlDYcqxjvE0GTxgEqjmmSGESmb+iumISEJNPMo2IbirK6+Tdq3qOlX3vlau3yziKKIzdI4ukYuuUB3doSZqIYqe0At6Q+/Ws/VqfVif89KCteg5RX9gff0CGhaYbw==</latexit>

layer

2

i
<latexit sha1_base64="G5lGsTi4BG6FhyRGkscQqzvsmC4=">AAAB73icbVDLSgNBEOyNrxhfUY9eBoPgKeyKoMegF48RzAOSJcxOZpMhM7PrTK8QQn7CiwdFvPo73vwbJ8keNLGgoajqprsrSqWw6PvfXmFtfWNzq7hd2tnd2z8oHx41bZIZxhsskYlpR9RyKTRvoEDJ26nhVEWSt6LR7cxvPXFjRaIfcJzyUNGBFrFgFJ3U7loxULQneuWKX/XnIKskyEkFctR75a9uP2GZ4hqZpNZ2Aj/FcEINCib5tNTNLE8pG9EB7ziqqeI2nMzvnZIzp/RJnBhXGslc/T0xocrasYpcp6I4tMveTPzP62QYX4cTodMMuWaLRXEmCSZk9jzpC8MZyrEjlBnhbiVsSA1l6CIquRCC5ZdXSfOiGvjV4P6yUrvJ4yjCCZzCOQRwBTW4gzo0gIGEZ3iFN+/Re/HevY9Fa8HLZ47hD7zPHxq0j/8=</latexit>
j
<latexit sha1_base64="WGa/6vXu143jMeSeCVXAwts0QNQ=">AAAB8HicbVDLSgNBEOz1GeMr6tHLYBA8hV0R9Bj04jGCeUiyhNnJbDJmHsvMrBCWfIUXD4p49XO8+TfOJnvQxIKGoqqb7q4o4cxY3//2VlbX1jc2S1vl7Z3dvf3KwWHLqFQT2iSKK92JsKGcSdq0zHLaSTTFIuK0HY1vcr/9RLVhSt7bSUJDgYeSxYxg66SHnmFDgfuP5X6l6tf8GdAyCQpShQKNfuWrN1AkFVRawrEx3cBPbJhhbRnhdFrupYYmmIzxkHYdlVhQE2azg6fo1CkDFCvtSlo0U39PZFgYMxGR6xTYjsyil4v/ed3UxldhxmSSWirJfFGccmQVyr9HA6YpsXziCCaauVsRGWGNiXUZ5SEEiy8vk9Z5LfBrwd1FtX5dxFGCYziBMwjgEupwCw1oAgEBz/AKb572Xrx372PeuuIVM0fwB97nD1OIkBQ=</latexit>

 Wij = exp
<latexit sha1_base64="MY4LTBSZRv7thUsmYoOnFVHJ1YQ=">AAACaHicfZFdSxwxFIYzo1a72jraSineBBdhBV1mRNCbguiNlxZcV9gsQyZ7Zjea+SA5Iy5h8D/2rj/AG3+F2Y8LP0oPBJ685z0keZOUShoMw7+ev7C49Gl55XNjde3L1/VgY/PaFJUW0BGFKvRNwg0omUMHJSq4KTXwLFHQTe7OJ/3uPWgji/wKxyX0Mz7MZSoFRyfFwWM3tvK2pr8og4eSKUixdcBSzYWNantYD1qzTRpbds91OZJ1i2UcR0lqH2JZ79WWGTnMuOP9/1lvX1kdU6blcIR7cdAM2+G06EeI5tAk87qMgz9sUIgqgxyF4sb0orDEvuUapVBQN1hloOTijg+h5zDnGZi+nQZV012nDGhaaLdypFP19YTlmTHjLHHOycXN+95E/FevV2F60rcyLyuEXMwOSitFsaCT1OlAahCoxg640NLdlYoRd2mh+5uGCyF6/+SPcH3YjsJ29PuoeXo2j2OFbJMd0iIROSan5IJckg4R5Mlb9b57W96zH/g//J8zq+/NZ76RN+XvvACnZbvK</latexit>



1 2

d(

f'(xi)
i

,

f'(xj)
j

)

Figure 4: Detailed architecture of the graph construction module, in which the length-scale parameter is example-wisely determined.

The graph construction module described in Section 3.2.2 is composed of two convolutional blocks and two fully-connected layers (see Figure 4), where each block contains a 3-by-3 convolution, batch normalization, ReLU activation, followed by 2-by-2 max pooling. The number of filters in each convolutional block is 64 and 1, respectively. To provide an example-wise scaling parameter, the activation map from the second convolutional block is transformed into a scalar by two fully-connected layers in which the number of neurons is 8 and 1, respectively.

B ABLATION STUDY
In this section, we performed several ablation studies with respect to training shots and query number. B.1 TRAINING SHOTS

Figure 5: Model performance with different training shots. The x-axis indicates the number of shots in training, and the y-axis indicates 5-way test accuracy for 1-shot and 5-shot. Error bars indicate 95% confidence intervals as computed over 600 test episodes.

B.2 QUERY NUMBER

Table 4: Accuracy with various query numbers

Train=15 Test=15 Train=Test
Train=15 Test=15 Train=Test

5 52.29 53.53 51.94
5 66.97 68.50 67.55

miniImageNet 1-shot 10 15 20 25 52.95 53.75 53.92 54.57 53.72 53.75 52.79 52.84 53.47 53.75 54.00 53.59
miniImageNet 5-shot 10 15 20 25 69.30 69.43 69.92 70.54 68.85 69.43 69.26 69.12 69.22 69.43 69.85 70.11

30 54.47 52.47 53.32
30 70.36 68.89 69.94

At first, we designed three experiments to study the influence of the query number in both training and test phase: (1) fix training query to 15; (2) fix test query to 15; (3) training query equals test query. The results

11

Under review as a conference paper at ICLR 2019 are shown in Table 4. Some conclusions can be drawn from this experiment: (1) When training query is fixed, increasing the test query will lead to the performance gain. Moreover, even a small test query (e.g., 5) can yield good performance; (2) When test query is fixed, the performance is relatively stable with various training query numbers; (3) If the query number of training matches test, the performance can also be improved with increasing number.
12

