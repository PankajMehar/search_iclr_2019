Under review as a conference paper at ICLR 2019
h-DETACH: MODIFYING THE LSTM GRADIENT TOWARDS BETTER OPTIMIZATION
Anonymous authors Paper under double-blind review
ABSTRACT
Recurrent neural networks are known for their notorious exploding and vanishing gradient problem (EVGP). This problem becomes more evident in tasks where the information needed to correctly solve them exist over long time scales, because EVGP prevents important gradient components from being back-propagated adequately over a large number of steps. We introduce a simple stochastic algorithm (h-detach) that is specific to LSTM optimization and targeted towards addressing this problem. Specifically, we show that when the LSTM weights are large, the gradient components through the linear path (cell state) in the LSTM computational graph get suppressed. Based on the hypothesis that these components carry information about long term dependencies (which we show empirically), their suppression can prevent the LSTM from capturing them. Our algorithm prevents the gradients flowing through this path from getting suppressed, thus allowing the LSTM to capture such dependencies better. We show significant convergence and generalization improvements using our algorithm on various benchmark datasets.
1 INTRODUCTION
Recurrent Neural Networks (RNNs) (Rumelhart et al. (1986); Elman (1990)) are a class of neural network architectures used for modeling sequential data. Compared to feed-forward networks, the loss landscape of recurrent neural networks are much harder to optimize. Among others, this difficulty may be attributed to the exploding and vanishing gradient problem (Bengio et al., 1994; Pascanu et al., 2013) which is more severe for recurrent networks and arises due to the highly illconditioned nature of their loss surface. This problem becomes more evident in tasks where training data has dependencies that exist over long time scales.
Due to the aforementioned optimization difficulty, variants of RNN architectures have been proposed that aim at addressing these problems. The most popular among such architectures that are used in a wide number of applications include long short term memory (LSTM, Hochreiter & Schmidhuber (1997)) and gated recurrent unit (GRU, Chung et al. (2014)) networks. These architectures mitigate such difficulties by introducing a linear temporal path that allows gradients to flow more freely across time steps. Arjovsky et al. (2016) on the other hand try to address this problem by parameterizing a recurrent neural network to have unitary transition matrices based on the idea that unitary matrices have unit singular values which prevents gradients from exploding/vanishing.
Among the aforementioned RNN architectures, LSTMs are arguably most widely used and it remains a hard problem to optimize them on tasks that involve long term dependencies. Examples of such tasks are copying problem (Bengio et al., 1994; Pascanu et al., 2013), and sequential MNIST (Le et al., 2015), which are designed in such a way that the only way to produce the correct output is for the model to retain information over long time scales.
The goal of this paper is to introduce a simple trick that is specific to LSTM optimization and improves its training on tasks that involve long term dependencies. To achieve this goal, we write out the full back-propagation gradient equation for LSTM parameters and split the composition of this gradient into its components resulting from different paths in the unrolled network. We then show that when LSTM weights are large in magnitude, the gradients through the linear temporal path (cell state) get suppressed (recall that this path was designed to allow smooth gradient flow over many time steps). We show empirical evidence that this path carries information about long term dependencies (see section 3.5) and hence gradients from this path getting suppressed is problematic for
1

Under review as a conference paper at ICLR 2019

Figure 1: The computational graph of a typical LSTM network. Here we have omitted the LSTM inputs xi for convenience. The top horizontal path through the cell state units cts is the linear temporal path which allows gradients to flow more freely over long durations. The dotted blue
crosses along the computational paths denote the stochastic process of blocking the flow of gradients though the ht states (see Eq 2) during the back-propagation phase of LSTM. We call this approach h-detach.

such tasks. To fix this problem, we introduce a simple stochastic algorithm that in expectation scales the individual gradient components, which prevents the gradients through the linear temporal path from being suppressed. As we show, the algorithm stochastically prevents gradient from flowing through the h-state of the LSTM (see figure 1), hence we call it h-detach. Using this method, we show improvements in convergence/generalization over vanilla LSTM optimization on the copying task, transfer copying task, sequential and permuted MNIST, and image captioning.

2 PROPOSED METHOD: h-DETACH

We begin by reviewing the LSTM roll-out equations. We then derive the LSTM back-propagation equations and by studying its decomposition, identify the aforementioned problem. Based on this analysis we propose a simple stochastic algorithm to fix this problem.

2.1 LONG SHORT TERM MEMORY NETWORKS

LSTM is a variant of traditional RNNs that was designed with the goal of improving the flow of gradients over long time scales. The roll-out equations of an LSTM are as follows,

ct = ft ct-1 + it gt ht = ot tanh(ct)

(1) (2)

where denotes point-wise product and the gates ft, it, ot and gt are defined as,

gt = tanh(Wghht-1 + Wgxxt + bg) ft = (Wfhht-1 + Wfxxt + bf ) it = (Wihht-1 + Wixxt + bi) ot = (Wohht-1 + Woxxt + bo)

(3) (4) (5) (6)

Here ct and ht are the cell state and hidden state respectively. Usually a transformation (hT ) is used as the output at time step t (Eg. next word prediction in language model) based on which we
can compute the loss t := ((ht)) for that time step.

An important feature of the LSTM architecture is the linear recursive relation between the cell states ct as shown in Eq. 1. This linear path allows gradients to flow easily over long time scales. This however is one of the components in the full composition of the LSTM gradient. As we will show next, the remaining components that are a result of the other paths in the LSTM computational graph are polynomial in the weight matrices Wgh, Wfh, Wih, Woh whose order grows with the number of time steps. These terms cause an imbalance in the order of magnitude of gradients from different paths, thereby suppressing gradients from linear paths of LSTM computational graph in cases where the weight matrices are large.

2

Under review as a conference paper at ICLR 2019

2.2 BACK-PROPAGATION EQUATIONS FOR LSTM
In this section we derive the back-propagation equations for LSTM network and by studying its composition, we identify a problem in this composition. The back-propagation equation of an LSTM can be written in the following form.

Theorem 1 Fix w to be an element of the matrix Wgh, Wfh, Wih, Woh,Wgx, Wfx, Wix or Wox. Define,

Ft 0n diag(kt) At = F~t 0n diag(k~t)
0n 0n Idn

0n t 0n Bt = 0n ~t 0n
0n 0n 0n

 dct 

dw

zt

=



dht dw



1n

(7)

Then zt = (At + Bt)zt-1. In other words,

zt = (At + Bt)(At-1 + Bt-1) . . . (A2 + B2)z1

(8)

where all the symbols used to define At and Bt are defined in notation 1 in appendix.

To avoid unnecessary details, we use a compressed definitions of At and Bt in the above statement and write the detailed definitions of the symbols that constitute them in notation 1 in appendix. Nonetheless, we now provide some intuitive properties of the matrices At and Bt.
The matrix At contains components of parameter's full gradient that arise due to the cell state (linear temporal path) described in Eq. (1) (top most horizontal path in figure 1). Thus the terms in At are a function of the LSTM gates and hidden and cell states. Note that all the gates and hidden states ht are bounded by definition because they are a result of sigmoid or tanh activation functions. The cell state ct on the other hand evolves through a linear recursive equation shown in Eq. (1). Thus it can grow at each time step by at most ±1 (element-wise) and its value is bounded by the number of time steps t. Thus given a finite number of time steps and finite initialization of c0, the values in matrix At are bounded.
The matrix Bt on the other hand contains components of parameter's full gradient that arise due to the remaining paths. The elements of Bt are a linear function of the weights Wgh, Wfh, Wih, Woh. Thus the magnitude of elements in Bt can become very large irrespective of the number of time steps if the weights are very large. This problem becomes worse when we multiply Bts in Eq. (8) because the product becomes polynomial in the weights which can become unbounded for large weights very quickly as the number of time steps grow.
Thus based on the above analysis, we identify the following problem with the LSTM gradient: when the LSTM weights are large, the gradient component through the cell state paths (At) get suppressed compared to the gradient components through the other paths (Bt) due to an imbalance in gradient magnitudes. We recall that the linear recursion in the cell state path was introduced in the LSTM architecture (Hochreiter & Schmidhuber, 1997) as an important feature to allow gradients to flow smoothly through time. As we show in our ablation studies (section 3.5), this path carries information about long term dependencies in the data. Hence it is problematic when gradients from this path are getting relatively suppressed (since the total gradient is a sum over all paths).

2.3 h-DETACH
We now propose a simple fix to the above problem. Our goal is to manipulate the gradient components such that the components through the cell state path (At) do not get suppressed when the components through the remaining paths (Bt) are very large (described in the section 2.2). Thus it would be helpful to multiply Bt by a positive number less than 1 to dampen its magnitude. In Algorithm 1 we propose a simple trick that achieves this goal. A diagrammatic form of algorithm 1 is shown in Figure 1. In simple words, our algorithm essentially blocks gradients from flowing through each of the ht states independently with a probability 1 - p. Note the subtle detail in Algorithm 1 (line 9) that the loss t at any time step t is a function of ht which is not detached.
We now show that the gradient of the loss function resulting from the LSTM forward pass shown in algorithm 1 has the property that the gradient components arising from Bt get dampened.

3

Under review as a conference paper at ICLR 2019

Algorithm 1 Forward Pass of h-detach Algorithm
1: INPUT: {xt}Tt=1, h0, c0, p 2: = 0 3: for 1  t  T do 4: if bernoulli(p)==1 then 5: h~t-1  stop-gradient(ht-1) 6: else 7: h~t-1  ht-1 8: ht, ct  LSTM(xt, h~t-1, ct-1) 9: t  loss((ht)) 10:  + t
11: return

(Eq. 1- 6)

Theorem 2

Let zt

=

[

dct dw

T

;

dht dw

T

;

1Tn

]T

and z~t be the analogue of zt when applying h-detach with

probability p during back-propagation. Then,

z~t = (At + tBt)(At-1 + t-1Bt-1) . . . (A2 + 2B2)z~1

where t, t-1, . . . , 2 are i.i.d. Bernoulli random variables with probability p of being 1, and w, At and Bt and are same as defined in theorem 1.

The above theorem shows that by stochastically blocking gradients from flowing through the ht states of an LSTM with probability 1 - p, we stochastically drop the Bt term in the gradient components. The corollary below shows that in expectation, this results in dampening the Bt term
compared to the original LSTM gradient.

Corollary 1 E2,,t [z~t] = (At + pBt)(At-1 + pBt-1) . . . (A2 + pB2)z~1
Finally, we note that when training LSTMs with h-detach, we reduce the amount of computation needed. This is simply because by stochastically blocking the gradient from flowing through the ht hidden states of LSTM, less computation needs to be done during back-propagation through time (BPTT).

3 EXPERIMENTS
3.1 COPYING TASK
This task requires the recurrent network to memorize the network inputs provided at the first few time steps and output them in the same order after a large time delay. Thus the only way to solve this task is for the network to capture the long term dependency between inputs and targets which requires gradients to flow through many time steps.
We follow the copying task setup identical to Arjovsky et al. (2016) (described in Appendix). Using their data generation process, we sample 100,000 training input-target sequence pairs and 5,000 validation pairs. We use cross-entropy as our loss to train an LSTM with hidden state size 128 for a maximum of 500-600 epochs. We use the ADAM optimizer with batch-size 100, learning rate 0.001 and clip the gradient norms to 1.
Figure 2 shows the validation accuracy plots for copying task training for T = 100 (top row) and T = 300 (bottom row) without h-detach (left), and with h-detach (middle and right). When the time delay is set to 300 we find that LSTM training without h-detach achieves a validation accuracy of  82% at best while a number of other seeds converge to much worse performance. On the other hand, we find that using h-detach with detach probabilities 0.25 and 0.5 achieves the best performance of 100% and converging quickly while being reasonably robust to the choice of seed.
3.2 TRANSFER COPYING TASK
Having shown the benefit of h-detach in terms of training dynamics, we now extend the challenge of the copying task by evaluating how well an LSTM trained on data with a certain time delay

4

Under review as a conference paper at ICLR 2019

(a) Vanilla LSTM (baseline)

(b) LSTM with h-detach 0.25

(c) LSTM with h-detach 0.5

(d) Vanilla LSTM (baseline)

(e) LSTM with h-detach 0.25

(f) LSTM with h-detach 0.5

Figure 2: Validation accuracy curves during training on copying task using vanilla LSTM (left) and LSTM with h-detach with probability 0.25 (middle) and 0.5 (right). Top row is delay T = 100 and bottom row is delay T = 300. Each plot contains multiple runs with different seeds. We see that for T = 100, even the baseline LSTM is able to reach  100% accuracy for most seeds and the only difference we see between vanilla LSTM and LSTM with h-detach is in terms of convergence. T = 300 is a more interesting case because it involves longer term dependencies. In this case we find that h-detach leads to faster convergence and achieves  100% validation accuracy while being more robust to the choice of seed.

T
200 400 500 1000 2000 5000

VanillaLSTM
64.85 48.17 43.03 28.82 19.48 14.58

h-detach 0.5
74.79 54.91 52.43 43.54 34.34 24.55

h-detach 0.25
90.72 77.76 74.68 63.19 51.83 42.35

Table 1: Accuracy on transfer copying task. We find that the generalization of LSTMs trained with h-detach is significantly better compared with vanilla LSTM training when tested on time delays longer that what the model is trained on (T = 100).

generalizes when a larger time delay is used during inference. This task is referred as the transfer copying task Hochreiter & Schmidhuber (1997). Specifically, we train the LSTM architecture on a copying task with delay T = 100 without h-detach and with h-detach with probability 0.25 and 0.5. We then evaluate the accuracy of the trained model for each setting for various values of T > 100. The results are shown in table 1. We find that the function learned by LSTM when trained with h-detach generalize significantly better on longer time delays during inference compared with the LSTM trained without h-detach.
3.3 SEQUENTIAL MNIST
This task is a sequential version of the MNIST classification task (LeCun & Cortes, 2010). In this task, an image is fed into the LSTM 1 pixel per time step and the goal is to predict the label after the last pixel is fed. We consider two versions of the task: one is which the pixels are read in order (from left to right and top to bottom), and one where all the pixels are permuted in a random but fixed order. We call the second version the permuted MNIST task or pMNIST in short. The setup used for this experiment is as follows. We use 50000 images for training, 10000 for validation and 10000 for
5

Under review as a conference paper at ICLR 2019

(a) Learning rate 0.0001

(b) Learning rate 0.0005

(c) Learning rate 0.001

Figure 3: Validation accuracy curves of LSTM training on pixel by pixel MNIST. Each plot shows LSTM training with and without h-detach for different values of learning rate. We find that hdetach is both more robust to different learing rates and converges faster compared to vanilla LSTM training. Refer to the Appendix for validation curves on multiple seeds.

testing. We use Adam optimizer with different learning rates­ 0.001,0.0005 and 0.0001, and a fixed batch size of 100. We train for 200 epochs and pick our final model based on the best validation score. We use an LSTM of 100 hidden units. For h-detach, we do a hyper-parameter search on the detach probability in {0.1, 0.25, 0.4, 0.5}. For both pixel by pixel MNIST and pMNIST, we found the detach hyper-parameter of 0.25 to perform best on the validation set for both MNIST and pMNIST.
On the sequential MNIST task, vanilla LSTM and training with h-detach gives an accuracy of 98.6% and 98.8% respectively. Although these values are similar, we notice that the convergence of our method is much faster and is more robust to the different learning rates of the Adam optimizer as seen in Figure 6. Refer to appendix for experiments with multiple seeds that shows the robustness of our method to initialization.
In the pMNIST task, we find that training LSTM with h-detach gives a test accuracy of 92.92% which is an improvement over the regular LSTM training which reaches an accuracy of 90.9%. A comparison of test performance with existing algorithms is shown in table 2.

3.4 IMAGE CAPTIONING
We now evaluate h-detach on an image captioning task which involves using an RNN for generating captions for images. We use the Microsoft COCO dataset (Lin et al., 2014) which contains 82,783 training images and 40,504 validation images. Since this dataset does not have a standard split for training, validation and test, we follow the setting in Karpathy & Fei-Fei (2015) which suggests a split of 80,000 training images and 5,000 images each for validation and test set.
We use two models to test our approach­ the Show&Tell encoder-decoder model (Vinyals et al., 2015) which does not employ any attention mechanism, and the Show, Attend and Tell model (Xu et al., 2015), which uses soft attention. For feature extraction, we use the 2048-dimensional last layer feature vector of a residual network (Resnet He et al. (2015)) with 152 layers which was pretrained on ImageNet for image classification. We use an LSTM with 512 hidden units for caption generation. We train both the Resnet and LSTM models using the Adam optimizer (Kingma & Ba, 2014) with a learning rate of 10-4 and leave the rest of the hyper-parameters as suggested in

Method
Vanilla LSTM SAB (Ke et al., 2017) iRNN Le et al. (2015) uRNN (Arjovsky et al., 2016) Zoneout (Krueger et al., 2016) h-detach (ours)

MNIST
98.6 -
97.0 95.1
98.8

pMNIST
90.9 91.1 82.0 91.4 93.1 92.9

Table 2: A comparison of test accuracy on pixel by pixel MNIST and permuted MNIST (pMNIST) with existing methods.

6

Under review as a conference paper at ICLR 2019

Table 3: Test performance on image captioning task on MS COCO dataset using metrics BLEU 1 to 4, METEOR, and CIDEr (higher values are better for all metrics). We re-implement both Show&Tell (Vinyals et al., 2015) and Soft Attention (Xu et al., 2015) and train the LSTM in these models with and without h-detach.

Models
DeepVS (Karpathy & Fei-Fei, 2015) ATT-FCN (You et al., 2016) Show & Tell (Vinyals et al., 2015) Soft Attention (Xu et al., 2015) Hard Attention (Xu et al., 2015) MSM (Yao et al., 2017) Adaptive Attention (Lu et al., 2017) TwinNet (Serdyuk et al., 2018)
No attention, Resnet152 Soft Attention, Resnet152
No attention, Resnet152 Show&Tell (Our impl.) + h-detach (0.25)
Attention, Resnet152 Soft Attention (Our impl.) + h-detach (0.4)

B-1
62.5 70.9
-- 70.7 71.8 73.0 74.2
72.3 73.8
71.7 72.9
73.2 74.7

B-2
45.0 53.7
-- 49.2 50.4 56.5 58.0
55.2 56.9
54.4 55.8
56.3 58.1

B-3
32.1 40.2
-- 34.4 35.7 42.9 43.9
40.4 42.0
39.7 41.7
41.4 44.0

B-4
23.0 30.4 27.7 24.3 25.0 32.5 33.2
29.3 30.6
28.8 31.0
30.1 33.1

METEOR
19.5 24.3 23.7 23.9 23.0 25.1 26.6

CIDEr
66.0 --
85.5 -- --
98.6 108.5

25.1 94.7 25.2 97.3

24.8 25.1

93.0 98.0

25.3 26.0

96.6 103.3

their paper. We also perform a small hyperparameter search where we find the optimial value of the h-detach parameter. We considered values in the set {0.1, 0.25, 0.4, 0.5} and pick the optimal value based on the best validation score. Similar to Serdyuk et al. (2018), we early stop based on the validation CIDEr scores and report BLEU-1 to BLEU-4, CIDEr, and Meteor scores.
The results are presented in table 3. Training the LSTM with h-detach outperforms the baseline LSTM by a good margin for all the metrics and produces the best BLEU-1 to BLEU-3 scores among all the compared methods. Even for the other metrics, except for the results reported by Lu et al. (2017), we beat all the other scores reported. We emphasize that compared to all the other reported methods, our approach is extremely simple and does not add any computational overhead (in fact reduces computation).

3.5 ABLATION STUDIES
In this section we first study the effect of removing gradient clipping in the LSTM training and compare how the training of vanilla LSTM and our method get affected. Getting rid of gradient clipping would be insightful because it would confirm our claim that stochastically blocking gradients through the hidden states ht of the LSTM prevent growth of gradient magnitude. We train both models on pixel by pixel MNIST using ADAM without any gradient clipping. We notice that removing gradient clipping causes the Vanilla LSTM training to become extremely unstable and in some cases it does not learn anything meaningful. The h-detach method seems robust to removing gradient clipping and learning seems to be stable over various learning rates as shown in Figure 4.
We also conduct experiments where we stochastically detach the cell state ct instead of the hidden state ht and observe how the LSTM behaves in such a scenario. The goal of this experiment is to confirm our hypothesis that the gradients through the cell state path contain information about long term dependencies. We notice in the copying task for T = 100, learning becomes very slow (Figure 5 (a)) and does not converge even after 500 epochs, whereas when not detaching the cell state, even the Vanilla LSTM converges in around 150 epochs for most cases for T=100 as shown in the experiments in section 3.1. For sequential MNIST (which involves 784 time steps), there is a much larger detrimental effect on learning as we find that none of the seeds cross 60% accuracy at the end of training (Figure 5 (b)). This experiment clearly slows that gradients through the cell state contain important components of the gradient signal as blocking them worsens the performance of these models when compared to Vanilla LSTM.
7

Under review as a conference paper at ICLR 2019

(a) Learning rate 0.0005

(b) Learning rate 0.0001

Figure 4: The effect of removing gradient clipping from vanilla LSTM training vs. LSTM trained with h-detach. Refer to Appendix for experiments with more seeds.

(a) Copying T = 100, c - detach = (b) MNIST c - detach = 0.25 0.5
Figure 5: C-detach experiment. We plot the validation accuracy curves for MNIST and copying task (T=100). The probability of detaching used is same as the probability of h - detach used in the corresponding experiments. Notice that the performance becomes worse than Vanilla LSTM.
4 RELATED WORK
Capturing long term dependencies in data using recurrent neural networks has been long known to be a hard problem (Bengio et al., 1993). Therefore, there has been a considerable amount of work on addressing this issue. Prior to the invention of the LSTM architecture (Hochreiter & Schmidhuber, 1997), another class of architectures called NARX (nonlinear autoregressive models with exogenous) recurrent networks (Lin et al., 1996) was popular for tasks involving long term dependencies. More recently gated recurrent unit (GRU) networks (Chung et al., 2014) was proposed that adapts some favorable properties of LSTM while requiring fewer parameters. Work has also been done towards better optimization for such tasks (Martens & Sutskever, 2011; Kingma & Ba, 2014). Since vanishing and exploding gradient problems (Bengio et al., 1994) also hinder this goal, gradient clipping methods have been proposed to alleviate this problem (Tomas, 2012; Pascanu et al., 2013). Yet another line of work focuses on making use of unitary transition matrices in order to avoid loss of information as hidden states evolve over time. Le et al. (2015) propose to initialize recurrent networks with unitary weights while Arjovsky et al. (2016) propose a new network parameterization that ensures that the state transition matrix remains unitary. Very recently, Ke et al. (2017) propose to learn an attention mechanism over past hidden states and sparsely back-propagate through paths with high attention weights in order to capture long term dependencies. Trinh et al. (2018) propose to add an unsupervised auxiliary loss to the original objective that is designed to encourage the network to capture such dependencies. We point out that our proposal in this paper is orthogonal to a number of the aforementioned papers and may even be applied in conjunction to some of them. Further, our method is specific to LSTM optimization and reduces computation relative to the vanilla LSTM optimization which is in stark contrast to most of the aforementioned approaches which increase the amount of computation needed for training.
5 CONCLUSION
We propose a simple stochastic algorithm called h-detach aimed at improving LSTM performance on tasks that involve long term dependencies. We provide a theoretical understanding of the method
8

Under review as a conference paper at ICLR 2019
using a novel analysis of the back-propagation equations of the LSTM architecture. We further note that our method reduces the amount of computation needed during training. Finally, we empirically show that h-detach is robust to initialization, makes the convergence of LSTM faster, and/or improves generalization compared to vanilla LSTM (and other existing methods) on various benchmark datasets.
REFERENCES
Martin Arjovsky, Amar Shah, and Yoshua Bengio. Unitary evolution recurrent neural networks. In International Conference on Machine Learning, pp. 1120­1128, 2016.
Yoshua Bengio, Paolo Frasconi, and Patrice Simard. The problem of learning long-term dependencies in recurrent networks. In Neural Networks, 1993., IEEE International Conference on, pp. 1183­1188. IEEE, 1993.
Yoshua Bengio, Patrice Simard, and Paolo Frasconi. Learning long-term dependencies with gradient descent is difficult. IEEE transactions on neural networks, 5(2):157­166, 1994.
Junyoung Chung, Caglar Gulcehre, KyungHyun Cho, and Yoshua Bengio. Empirical evaluation of gated recurrent neural networks on sequence modeling. arXiv preprint arXiv:1412.3555, 2014.
Jeffrey L Elman. Finding structure in time. Cognitive science, 14(2):179­211, 1990.
Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recognition. CoRR, abs/1512.03385, 2015. URL http://arxiv.org/abs/1512.03385.
Sepp Hochreiter and Ju¨rgen Schmidhuber. Long short-term memory. Neural computation, 9(8): 1735­1780, 1997.
Andrej Karpathy and Li Fei-Fei. Deep visual-semantic alignments for generating image descriptions. In Proceedings of the IEEE conference on computer vision and pattern recognition, pp. 3128­3137, 2015.
Nan Rosemary Ke, Alex Lamb, Anirudh Goyal, Chris Pal, and Yoshua Bengio. Sparse attentive backtracking: Towards efficient credit assignment in recurrent networks. 2017.
Diederik P Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint arXiv:1412.6980, 2014.
David Krueger, Tegan Maharaj, Ja´nos Krama´r, Mohammad Pezeshki, Nicolas Ballas, Nan Rosemary Ke, Anirudh Goyal, Yoshua Bengio, Hugo Larochelle, Aaron Courville, et al. Zoneout: Regularizing rnns by randomly preserving hidden activations. arXiv preprint arXiv:1606.01305, 2016.
Quoc V Le, Navdeep Jaitly, and Geoffrey E Hinton. A simple way to initialize recurrent networks of rectified linear units. arXiv preprint arXiv:1504.00941, 2015.
Yann LeCun and Corinna Cortes. MNIST handwritten digit database. 2010. URL http://yann. lecun.com/exdb/mnist/.
Tsung-Yi Lin, Michael Maire, Serge Belongie, James Hays, Pietro Perona, Deva Ramanan, Piotr Dolla´r, and C Lawrence Zitnick. Microsoft coco: Common objects in context. In European conference on computer vision, pp. 740­755. Springer, 2014.
Tsungnan Lin, Bill G Horne, Peter Tino, and C Lee Giles. Learning long-term dependencies in narx recurrent neural networks. IEEE Transactions on Neural Networks, 7(6):1329­1338, 1996.
Jiasen Lu, Caiming Xiong, Devi Parikh, and Richard Socher. Knowing when to look: Adaptive attention via a visual sentinel for image captioning. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR), volume 6, pp. 2, 2017.
James Martens and Ilya Sutskever. Learning recurrent neural networks with hessian-free optimization. In Proceedings of the 28th International Conference on Machine Learning (ICML-11), pp. 1033­1040. Citeseer, 2011.
9

Under review as a conference paper at ICLR 2019
Razvan Pascanu, Tomas Mikolov, and Yoshua Bengio. On the difficulty of training recurrent neural networks. In International Conference on Machine Learning, pp. 1310­1318, 2013.
David E Rumelhart, Geoffrey E Hinton, and Ronald J Williams. Learning representations by backpropagating errors. nature, 323(6088):533, 1986.
Dmitriy Serdyuk, Nan Rosemary Ke, Alessandro Sordoni, Adam Trischler, Chris Pal, and Yoshua Bengio. Twin networks: Matching the future for sequence generation. 2018.
Mikolov Tomas. Statistical language models based on neural networks. Brno University of Technology, 2012.
Trieu H Trinh, Andrew M Dai, Thang Luong, and Quoc V Le. Learning longer-term dependencies in rnns with auxiliary losses. arXiv preprint arXiv:1803.00144, 2018.
Oriol Vinyals, Alexander Toshev, Samy Bengio, and Dumitru Erhan. Show and tell: A neural image caption generator. In Proceedings of the IEEE conference on computer vision and pattern recognition, pp. 3156­3164, 2015.
Kelvin Xu, Jimmy Ba, Ryan Kiros, Kyunghyun Cho, Aaron Courville, Ruslan Salakhudinov, Rich Zemel, and Yoshua Bengio. Show, attend and tell: Neural image caption generation with visual attention. In International conference on machine learning, pp. 2048­2057, 2015.
Ting Yao, Yingwei Pan, Yehao Li, Zhaofan Qiu, and Tao Mei. Boosting image captioning with attributes. In IEEE International Conference on Computer Vision, ICCV, pp. 22­29, 2017.
Quanzeng You, Hailin Jin, Zhaowen Wang, Chen Fang, and Jiebo Luo. Image captioning with semantic attention. In Proceedings of the IEEE conference on computer vision and pattern recognition, pp. 4651­4659, 2016.
10

Under review as a conference paper at ICLR 2019

(a) Vanilla LSTM, learning rate 0.001

(b) h-detach 0.25, learning rate 0.001

(c) Vanilla LSTM, learning rate 0.0005

(d) h-detach 0.25, learning rate 0.0005

Figure 6: Validation accuracy curves on pixel by pixel MNIST dataset with vanilla LSTM training and LSTM training with h-detach with various values of learning rate and initialization seeds.

Figure 7: Validation accuracy curves on pMNIST dataset with vanilla LSTM training and LSTM training with h-detach.
APPENDIX
A ADDITIONAL INFORMATION
Copying Experiment setup - We define 10 tokens, {ai}9i=0. The input to the LSTM is a sequence of length T + 20 formed using one of the ten tokens at each time step. Input for the first 10 time steps are sampled i.i.d. (uniformly) from {ai}7i=0. The next T - 1 entries are set to a8, which constitutes a delay. The next single entry is a9, which represents a delimiter, which should indicate to the algorithm that it is now required to reproduce the initial 10 input tokens as output. The remaining 10 input entries are set to a8. The target sequence consists of T + 10 repeated entries of a8, followed by the first 10 entries of the input sequence in exactly the same order.
1

Under review as a conference paper at ICLR 2019

(a) Vanilla LSTM, learning rate 0.0005

(b) h-detach 0.25, learning rate 0.0005

(c) Vanilla LSTM, learning rate 0.0001

(d) h-detach 0.25, learning rate 0.0001

Figure 8: The effect of removing gradient clipping during optimization. Validation accuracy curves on pixel by pixel MNIST dataset with vanilla LSTM training and LSTM training with h-detach with various values of learning rate and initialization seeds. LSTM training using h-detach is both significantly more stable and robust to initialization.

2

Under review as a conference paper at ICLR 2019

B DERIVATION OF BACK-PROPAGATION EQUATION FOR LSTM
Let us recall the equations from an LSTM
ot =  Wo[ht-1, xt]T + bo it =  Wi[ht-1, xt]T + bi gt = tanh Wg[ht-1, xt]T + bg ft =  Wf [ht-1, xt]T + bf
ht = ot tanh(ct) ct = ft ct-1 + it gt
Here denotes the element-wise product, also called the Hadamard product.  denotes the sigmoid activation function. Wo = [Woh; Wox]. Wi = [Wih; Wix]. Wg = [Wgh; Wgx]. Wf = [Wfh; Wfx].

Notation 1

tc = diag[ot (1 - tanh2(ct))]

to = diag[ot (1 - ot) tanh(ct)]
ft = diag[ft (1 - ft) ct-1]
it = diag[it (1 - it) gt]
gt = diag[(1 - gt2) it] For any  {f, g, o, i}, define E (w) to be a matrix of size dim(ht) × dim([ht; xt]). We set all the elements of this matrix to 0s if if w is not an element of W . Further, if w = (W )kl, then (E (w))kl = 1 and (E (w))k l = 0 for all (k , l ) = (k, l).
t = ft Wfh + gt Wgh + itWih
~t = toWoh + ct t

kt = ft Ef (w) + gt Eg(w) + itEi(w) · [ht-1, xt]T k~t = toEo(w) · [ht-1, xt]T + ct kt

Ft = diag(ft) F~t = ct diag(ft)

3

Under review as a conference paper at ICLR 2019

Lemma 1 Let us assume w is an entry of the matrix Wf , Wi, Wg or Wo, then

dft dw

=

diag[ft

(1 - ft)] ·

Wf h

·

dht-1 dw

+

Ef (w)

·

[ht-1, xt]T

dot dw

=

diag[ot

(1 - ot)] ·

Woh

·

dht-1 dw

+

Eo(w)

·

[ht-1, xt]T

dit dw

=

diag[it

(1 - it)] ·

Wih

·

dht-1 dw

+

Ei(w)

·

[ht-1, xt]T

dgt dw

=

diag[(1 - gt2)] ·

Wgh

·

dht-1 dw

+

Eg (w)

·

[ht-1, xt]T

Proof By chain rule of total differentiation,

dft = ft + ft dht-1 dw w ht-1 dw

We note that,

ft w

=

diag[ft

(1 - ft)] · Ef (w) · [ht-1, xt]T

and,

ft ht-1

=

diag[ft

(1

-

ft)]

·

Wf h

·

dht-1 dw

which

proves

the

claim

for

dft dw

.

The

derivation

for

dot dw

,

dit dw

,

dgt dw

are

similar.

Now

let

us

establish

recursive

formulas

for

dht dw

and

dct dw

,

using

the

above

formulas

Corollary 1 Considering the above notations, we have

dht dw

=

toWoh

·

dht-1 dw

+ ct

·

dct dw

+ ot Eo(w) · [ht-1, xt]T

Proof Recall that ht = ot tanh(ct), and thus

dht = dot dw dw

tanh(ct) + ot

(1 - tanh2(ct))

Using the previous Lemma as well as the above notation, we get

dct dw

dht dw

=

diag[ot

(1-ot)]·

Woh

·

dht-1 dw

+

Eo(w)

·

[ht-1, xt]T

tanh(ct)+ot

(1-tanh2(ct))

dct dw

=

ot Woh

·

dht-1 dw

+

ot Eo(w) · [ht-1, xt]T

+

ot

(1 - tanh2(ct))

dct dw

=

tc

dct dw

+

toWoh

·

dht-1 dw

+

ot Eo(w)

·

[ht-1, xt]T

4

Under review as a conference paper at ICLR 2019

Corollary 2 Considering the above notations, we have

Proof Recall that ct = ft

dct dw

=

Ft

dct-1 dw

+ t

·

dht-1 dw

+ kt

ct-1 + it gt, and thus

dct = dft dw dw

ct-1 + ft

dct-1 + dgt dw dw

it + gt

Using the previous Lemma as well as the above notation, we get

dit dw

dct dw

=

diag[ft

(1 - ft)] ·

Wf h

·

dht-1 dw

+

Ef (w)

·

[ht-1, xt]T

ct-1 + ft

+diag[(1 - gt2)] ·

Wgh

·

dht-1 dw

+

Eg (w)

·

[ht-1, xt]T

it

+diag[it

(1 - it)] ·

Wih

·

dht-1 dw

+

Ei(w)

·

[ht-1, xt]T

gt

dct-1 dw

=

ft Wfh

·

dht-1 dw

+ tf Ef (w) ·

[ht-1, xt]T

+ ft

+tg Wgh

·

dht-1 dw

+

gt Eg(w) · [ht-1, xt]T

+itWih

·

dht-1 dw

+

tiEi(w) · [ht-1, xt]T

dct-1 dw

=

Ft

dct-1 dw

+

ft Wfh + gt Wgh + tiWih

· dht-1 dw

+ ft Eg(w) + tgEg(w) + itEg(w) · [ht-1, xt]T

=

Ft

dct-1 dw

+

t

·

dht-1 dw

+

kt

Let

us

now

combine

corollary

1

and

2

to

get a

recursive

expression

of

dht dw

in

terms

of

dht-1 dw

and

dct-1

dw

Corollary 3 Considering the above notations, we have

dht dw

=

F~ t

dct-1 dw

+ ~t ·

dht-1 dw

+ k~t

Proof From Corollary 1, we know that

dht dw

=

ot Woh

·

dht-1 dw

+ tc

·

dct dw

+ toEo(w) · [ht-1, xt]T

Using Corollary 2, we get

dht dw

=

toWoh

·

dht-1 dw

+ tc

·

Ft

dct-1 dw

+ t

·

dht-1 dw

+

kt

+ ot Eo(w) · [ht-1, xt]T

=

ct

·

Ft

dct-1 dw

+

(toWoh

+

t)

·

dht-1 dw

+

kt + ot Eo(w) · [ht-1, xt]T

=

F~ t

dct-1 dw

+

~t

·

dht-1 dw

+

k~t

5

Under review as a conference paper at ICLR 2019

Theorem 1 Fix w to be an element of the matrix Wgh, Wfh, Wih or Woh. Define,

Ft 0n diag(kt) At = F~t 0n diag(k~t)
0n 0n Idn

0n t 0n Bt = 0n ~t 0n
0n 0n 0n

 dct 

dw

zt

=



dht dw



1n

Then,

In other words,

zt = (At + Bt)zt-1

zt = (At + Bt)(At-1 + Bt-1) . . . (A2 + B2)z1
where all the symbols used to define At and Bt are defined in notation 1. Proof By Corollary 2, we get

dct dw

=

Ft

dct-1 dw

+ t

·

dht-1 dw

+ kt

=

Ft

dct-1 dw

+

t

·

dht-1 dw

+

diag(kt)1n

= [Ft t diag(kt)] · zt-1 Similarly by Corollary 3, we get

dht dw

=

F~ t

dct-1 dw

+ ~t ·

dht-1 dw

+ k~t

=

F~ t

dct-1 dw

+ ~t

·

dht-1 dw

+

diag(k~t)1n

Thus we have

= F~t ~t diag(k~t) · zt-1

(9)

Ft t diag(kt) zt = F~t ~t diag(k~t) · zt-1 = (At + Bt) · zt-1
0n 0n Idn

(10)

Applying this formula recursively proves the claim.

Note: Since At has 0n's in the second column of the block matrix representation, it ignores the contribution of zt coming from ht-1, whereas Bt (having non-zero block matrices only in the second column of the block matrix representation) only takes into account the contribution coming
from ht-1. Hence At captures the contribution of the gradient coming from the cell state ct-1.

6

Under review as a conference paper at ICLR 2019

C DERIVATION OF BACK-PROPAGATION EQUATION FOR LSTM WITH h-DETACH

Theorem 2

Let zt

=

[

dct dw

T

;

dht dw

T

;

1nT

]T

and z~t be the analogue of zt when applying h-detach with

probability p during back-propagation. Then,

z~t = (At + tBt)(At-1 + t-1Bt-1) . . . (A2 + 2B2)z~1

where t, t-1, . . . , 2 are i.i.d. Bernoulli random variables with probability p of being 1, At and Bt and are same as defined in theorem 1.

Proof

Replacing

  ht-1

by


t ht-1

in lemma 1 and therefore in Corollaries 2 and 3,

we get the

following analogous equations

dct dw

=

Ft

dct-1 dw

+ tt

·

dht-1 dw

+ kt

and

dht dw

=

F~ t

dct-1 dw

+ t~t

·

dht-1 dw

+ k~t

Similarly as in the proof of previous theorem, we can rewrite

dct dw

=

[Ft

tt

diag(kt)] · ~zt-1

and

Thus

dht = dw

F~ t

t~t

diag(k~t) · ~zt-1

Ft tt diag(kt)

Ft 0n diag(kt) 0n t 0n

~zt = F~t t~t diag(k~t) · ~zt-1 = F~t 0n diag(k~t) + t 0n ~t 0n · ~zt-1

0n 0n

Idn

0n 0n Idn

0n 0n 0n

Iterating this formula gives,

= (At + tBt) · ~zt-1

z~t = (At + tBt)(At-1 + t-1Bt-1) . . . (A3 + 3B3)z~2

Corollary 4

E[z~t] = (At + pBt)(At-1 + pBt-1) . . . (A3 + pB3)z~2

It suffices to take the expectation both sides, and use independence of t's.

7

