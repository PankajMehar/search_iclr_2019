Under review as a conference paper at ICLR 2019
ON THE SELECTION OF INITIALIZATION AND ACTIVATION FUNCTION FOR DEEP NEURAL NETWORKS
Anonymous authors Paper under double-blind review
ABSTRACT
The weight initialization and the activation function of deep neural networks have a crucial impact on the performance of the training procedure. An inappropriate selection can lead to the loss of information of the input during forward propagation and the exponential vanishing/exploding of gradients during back-propagation. Understanding the theoretical properties of untrained random networks is key to identifying which deep networks may be trained successfully as recently demonstrated by Schoenholz et al. (2017) who showed that for deep feedforward neural networks only a specific choice of hyperparameters known as the `edge of chaos' can lead to good performance. We complete this analysis by providing quantitative results showing that, for a class of ReLU-like activation functions, the information propagates indeed deeper for an initialization at the edge of chaos. By further extending this analysis, we identify a class of activation functions that improve the information propagation over ReLU-like functions. This class includes the Swish activation, swish(x) = x · sigmoid(x), used in Hendrycks & Gimpel (2016), Elfwing et al. (2017) and Ramachandran et al. (2017). This provides a theoretical grounding for the excellent empirical performance of swish observed in these contributions. We complement those previous results by illustrating the benefit of using a random initialization on the edge of chaos in this context.
1 INTRODUCTION
Deep neural networks have become extremely popular as they achieve state-of-the-art performance on a variety of important applications including language processing and computer vision; see, e.g., LeCun et al. (1998). The success of these models has motivated the use of increasingly deep networks and stimulated a large body of work to understand their theoretical properties. It is impossible to provide here a comprehensive summary of the large number of contributions within this field. To cite a few results relevant to our contributions, Montufar et al. (2014) have shown that neural networks have exponential expressive power with respect to the depth while Poole et al. (2016) obtained similar results using a topological measure of expressiveness.
We follow here the approach of Poole et al. (2016) and Schoenholz et al. (2017) by investigating the behaviour of random networks in the infinite-width and finite-variance i.i.d. weights context where they can be approximated by a Gaussian process as established by Matthews et al. (2018) and Lee et al. (2018).
In this paper, our contribution is two-fold. Firstly, we provide an analysis complementing the results of Poole et al. (2016) and Schoenholz et al. (2017) and show that initializing a network with a specific choice of hyperparameters known as the `edge of chaos' is linked to a deeper propagation of the information through the network. In particular, we establish that for a class of ReLU-like activation functions, the exponential depth scale introduced in Schoenholz et al. (2017) is replaced by a polynomial depth scale. This implies that the information can propagate deeper when the network is initialized on the edge of chaos. Secondly, we outline the limitations of ReLU-like activation functions by showing that, even on the edge of chaos, the limiting Gaussian Process admits a degenerate kernel as the number of layers goes to infinity. Our main result (4) gives sufficient conditions for activation functions to allow a good `information flow' through the network (Proposition 4) (in addition to being non-polynomial and not suffering from the exploding/vanishing gradient problem). These conditions are satisfied by the Swish activation swish(x) = x · sigmoid(x) used in Hendrycks & Gimpel (2016),
1

Under review as a conference paper at ICLR 2019

Elfwing et al. (2017) and Ramachandran et al. (2017). In recent work, Ramachandran et al. (2017) used automated search techniques to identify new activation functions and found experimentally that functions of the form (x) = x · sigmoid(x) appear to perform indeed better than many alternative functions, including ReLU. Our paper provides a theoretical grounding for these results. We also complement previous empirical results by illustrating the benefits of an initialization on the edge of chaos in this context. All proofs are given in the Supplementary Material.

2 ON GAUSSIAN PROCESS APPROXIMATIONS OF NEURAL NETWORKS AND
THEIR STABILITY

2.1 SETUP AND NOTATIONS

We use similar notations to those of Poole et al. (2016) and Lee et al. (2018). Consider a fully

connected

random

neural

network

of

depth

L,

widths

(Nl)1lL,

weights

Wilj

iid

N (0,

)w2
Nl-1

and

bias Bil iid N (0, b2), where N (µ, 2) denotes the normal distribution of mean µ and variance 2. For some input a  Rd, the propagation of this input through the network is given for an activation

function  : R  R by

d
yi1(a) = Wi1j aj + Bi1,
j=1

Nl-1

yil(a) =

Wilj (yjl-1(a)) + Bil,

j=1

for l  2.

(1)

Throughout the paper we assume that for all l the processes yil(.) are independent (across i) centred
Gaussian processes with covariance kernels l and write accordingly yil ind GP(0, l). This is an idealized version of the true processes corresponding to choosing Nl-1 = + (which implies, using Central Limit Theorem, that yil(a) is a Gaussian variable for any input a). The approximation of yil(.) by a Gaussian process was first proposed by Neal (1995) in the single layer case and has been recently extended to the multiple layer case by Lee et al. (2018) and Matthews et al. (2018). We recall here the expressions of the limiting Gaussian process kernels. For any input a  Rd, E[yil(a)] = 0 so that for any inputs a, b  Rd

l(a, b) = E[yil(a)yil(b)] = b2 + w2 Eyil-1GP (0,l-1)[(yil-1(a))(yil-1(b))] = b2 + w2 F(l-1(a, a), l-1(a, b), l-1(b, b)),

where F is a function that depends only on . This gives a recursion to calculate the kernel l; see,
e.g., Lee et al. (2018) for more details. We can also express the kernel l in terms of the correlation cal b in the lth layer used in the rest of this paper

qal b := l(a, b) = E[yil(a)yil(b)] = b2 + w2 E[( qal-1Z1)( qbl-1(cal-b 1Z1 + 1 - (cal-b 1)2Z2))]

where qal-1 := qal-a1, resp. cal-b 1 := qal-b 1/ qal-1qbl-1, is the variance, resp. correlation, in the

(l - 1)th layer and Z1, Z2 are independent standard Gaussian random variables. when it propagates through the network. qal is updated through the layers by the recursive formula qal = F (qal-1), where

F is the `variance function' given by

F

(x)

=

b2

+

w2

 E[( xZ

)2

],

where

Z  N (0, 1).

(2)

Throughout the paper, Z, Z1, Z2 will always denote independent standard Gaussian variables.

2.2 LIMITING BEHAVIOUR OF THE VARIANCE AND COVARIANCE OPERATORS
We analyze here the limiting behaviour of qaL and caL,b as the network depth L goes to infinity under the assumption that  has a second derivative at least in the distribution sense1. From now ostnrwaiagrhdtsf,owrweawrdilllyawlshoeansscua1mb ew0it)h. oWutelofisrsstonfegeednetoradlietyfintheatthcea1bDom0a(isnismoilfaCr orensvuelrtgs ecnacnebaesosobctaiainteedd with an activation function .
1ReLU admits a Dirac mass in 0 as second derivative and so is covered by our developments.

2

Under review as a conference paper at ICLR 2019

(a) ReLU network

(b) Tanh network

Figure 1: Two draws of outputs for ReLU and Tanh networks with (b, w) = (1, 1)  D,var  D,corr. The output functions are almost constant.

Definition 1. Let  be an activation function, (b, w)  (R+)2. (i) (b, w) is in D,var (domain of convergence for the variance) if there exists K > 0, q  0 such that for any input a with qa1  K, liml qal = q. We denote by K,var(b, w) the maximal K satisfying this condition.
(ii) (b, w) is in D,corr (domain of convergence for the correlation) if there exists K > 0 such that for any two inputs a, b with qa1, qb1  K, liml cal b = 1. We denote by K,corr(b, w) the maximal K satisfying this condition.

Remark : Typically, q in Definition 1 is a fixed point of the variance function defined in equation 2.
Therefore, it is easy to see that for any (b, w) such that F is increasing and admits at least one fixed point, we have K,corr(b, w)  q where q is the minimal fixed point; i.e. q := min{x : F (x) = x}. Thus, if we re-scale the input data to have qa1  q, the variance qal converges to q. We can also re-scale the variance w of the first layer (only) to assume that qa1  q for all inputs a.

The next result gives sufficient conditions on (b, w) to be in the domains of convergence of .

Proposition 1. Let M := supx0E[| 2(xZ) +  (xZ)(xZ)|]. Assume M < , then for

w2

<

1 M

and

any

b,

we

have

(b, w)



D,var

and

K,var(b, w)

=





Let C, := supx,y0,|x-y|,c[0,1]E[| (xZ1) (y(cZ1 + 1 - c2Z2)|]. Assume C, <  for

some



>

0,

then

for

w2

<

min(

1 M

,

1 C

)

and

any

b,

we

have

(b, w)



D,var



D,corr

and

K,var(b, w) = K,corr(b, w) = .

The proof of Proposition 1 is straightforward. We prove that sup F (x) = w2 M and then apply the Banach fixed point theorem; similar ideas are used for C,.
Example : For ReLU activation function, we have MReLU = 2 and CReLU,  1 for any  > 0.
In the domain of convergence D,var  D,corr, for all a, b  Rd, yi(a) = yi(b) almost surely and the outputs of the network are constant functions. Figure 1 illustrates this behaviour for d = 2 for ReLU and Tanh using a network of depth L = 10 with Nl = 100 neurons per layer. The draws of outputs of these networks are indeed almost constant.

To refine this convergence analysis, Schoenholz et al. (2017) established the existence of q and c
such that |qal -q|  e-l/ q and |clab -1|  e-l/ c when fixed points exist. The quantities q and c are wacanildtlheodu`t=dbeepitnh1gs+ceaxlpew2osE'nse[inntci(aeltlhyqeZcyl)orespe(rteosqetZhn)et ]itrhtehliemdneipttsthh.eMtodoewrpehthipcrhsectcahilseeesvlyaa,rriieafngwcieeveawnnrdibtcyeorrr1el==atio-nw2lcEoag[n(p(r)o-pq1aZgaa)n2tde] c = - log(1)-1. The equation 1 = 1 corresponds to an infinite depth scale of the correlation.
It is called the edge of chaos as it separates two phases: an ordered phase where the correlation

3

Under review as a conference paper at ICLR 2019

converges to 1 if 1 < 1 and a chaotic phase where 1 > 1 and the correlations do not converge to 1. In this chaotic regime, it has been observed in Schoenholz et al. (2017) that the correlations converge to some random value c < 1 when (x) = Tanh(x) and that c is independent of the correlation between the inputs. This means that very close inputs (in terms of correlation) lead to very different outputs. Therefore, in the chaotic phase, the output function of the neural network is non-continuous everywhere.

Definition 2. For EOC, is the set of

(b, w) values of

 D,var, let q be the (b, w) satisfying 1

l=imitw2inEg[va(riaqnZce)22.]

The Edge = 1.

of

Chaos,

hereafter

To further study the EOC regime, the next lemma introduces a function f called the `correlation

function' simplifying the analysis of the correlations. It states that the correlations have the same asymptotic behaviour as the time-homogeneous dynamical system cla+b1 = f (clab).

Lemma 1. Let (b, w)  D,var  D,corr such that q > 0, a, b  Rd and  an activation function

such f (x)

t=hat b2s+upw2xE[S(E[qZ(1x)Z(q)2q](x<Z1+f1o-rxa2Zll2

compact )) . Then

sets S. liml

Define fl supx[0,1]

by |fl

cal+b 1 = (x) - f

fl(clab) and (x)| = 0.

f

by

The condition on  in Lemma 1 is violated only by activation functions with exponential growth (which are not used in practice), so from now onwards, we use this approximation in our analysis. Note that being on the EOC is equivalent to (b, w) satisfying f (1) = 1. In the next section, we analyze this phase transition carefully for a large class of activation functions.

3 EDGE OF CHAOS

To illustrate the effect of the initialization on the EOC, we plot
in Figure 2 the output of a ReLU neural network with 20 layers Figure 2: A draw from the output and 100 neurons per layer with parameters (b2, w2 ) = (0, 2) function of a ReLu network with (as we will see later EOC = {(0, 2)} for ReLU). Unlike 20 layers, 100 neurons per layer, the output in Figure 1, this output displays much more vari- (b2, w2 ) = (0, 2) (edge of chaos) ability. However, we will prove here that the correlations still
converges to 1 even in the EOC regime, albeit at a slower rate.

3.1 RELU-LIKE ACTIVATION FUNCTIONS

We consider activation functions  of the form: (x) = x
if x > 0 and (x) = x if x  0. ReLU corresponds to
 = 1 and  = 0. For this class of activation functions, we see (Proposition 2) that the variance is unchanged (qal = qa1) on the EOC, so that q does not formally exist in the sense that the limit of qal depends on a. However, this does not impact the analysis of the correlations.

Proposition 2. Let  be a ReLU-like function with  and 

defined above. Then for any w <

2 2 + 2

and b



0,

we

have (b, w)  D,var with K,var(b, w) = . Moreover EOC = {(0,  1 )} and, on the EOC, F (x) = x
E[ (Z)2]

for any x  0.

This class of activation functions has the interesting property of preserving the variance across layers when the network is initialized on the EOC. However, we show in Proposition 3 below that, even in the EOC regime, the correlations converge to 1 but at a slower rate. We only present the result for ReLU but the generalization to the whole class is straightforward.

Example initialize

: a

RReeLLUU:nTehtweoErOk Cwiitshrethdeucpeadratomtehteerssin(glb2e,tonw2 ()=b2,

w2 ) = (0, 2).

(0, 2), which means we should This result coincides with the

2The limiting variance is a function of (b, w) but we do not emphasize it notationally.

4

Under review as a conference paper at ICLR 2019

(a) Convergence of correlation clab to 1 with c0ab = 0.1

(b) Correlation function f

Figure 3: Impact of the initialization on the EOC for a ReLU network

recommendation of He et al. (2015) whose objective was to make the variance constant as the input

propagates but did not analyze the propagation of the correlations. Klambauer et al. (2017) also

performed a similar analysis by using the "Scaled Exponential Linear Unit" activation (SELU) that

makes it possible to center the mean and normalize the variance of the post-activation (y). The

propagation of the correlation was not discussed therein either. In the next result, we present the

correlation function corresponding to ReLU networks. This was first obtained in Cho & Saul (2009).

We present an alternative derivation of this result and further show that the correlations converge to 1 at a polynomial rate of 1/l2 instead of an exponential rate.

Proposition 3 (ReLU kernel). Consider a ReLU network with parameters (b2, w2 ) = (0, 2) on the

EOC.We have



(i)

for

x



[0, 1],

f (x)

=

1 

x

arcsin(x)

+

1 

1

-

x2

+

1 2

x,

ii)

for

any

(a, b),

liml

clab

=

1

and

1

-

clab



92 2l2

as

l



.

Figure 3 displays the correlation function f with two different sets of parameters (b, w). The red graph corresponds to the EOC (b2, w2 ) = (0, 2), and the blue one corresponds to an ordered phase (b, w) = (1, 1). In unreported experiments, we observed that numerical convergence towards 1 for l  50 on the EOC. As the variance qal is preserved by the network (qal = qa1 = 2 a 2/d) and the correlations clab converge to 1 as l increases, the output function is of the form C · a for a constant C (notice that in Figure 2, we start observing this effect for depth 20).

3.2 A BETTER CLASS OF ACTIVATION FUNCTIONS

We now introduce a set of sufficient conditions for activation functions which ensures that it is then
possible to tune (b, w) to slow the convergence of the correlations to 1. This is achieved by making the correlation function f sufficiently close to the identity function.

Proposition 4 (Main Result). Let  be an activation function. Assume that (i) (0) = 0, and  has right and left derivatives in zero and  (0+) = 0 or  (0-) = 0, and there

exists k > 0 such that

(x) x

 k.

(ii) There exists A > 0 such that for any b  [0, A], there exists w > 0 such that (b, w)  EOC.

(iii) For any b  [0, A], the function F with parameters (b, w)  EOC is non-decreasing and

limb0 q = 0 where q is the minimal fixed point of F , q := inf{x : F (x) = x}.

(iv) For any b  [0, A], the correlation function f with parameters (b, w)  EOC introduced in

Lemma 1 is convex.

Then, for any b  [0, A], we have K,var(b, w)  q, and

lim sup |f (x) - x| = 0.

(b

b 0 ,w )EOC

x[0,1]

Note that ReLU does not satisfy the condition (ii) since the EOC in this case is the singleton (b2, w2 ) = (0, 2). The result of Proposition 4 states that we can make f (x) close to x by considering b  0. However, this is under condition (iii) which states that limb0 q = 0. Therefore, practically, we cannot take b too small. One might wonder whether condition (iii) is necessary for
this result to hold. The next lemma shows that removing this condition results in a useless class of
activation functions.

5

Under review as a conference paper at ICLR 2019

(a) The correlation function f of a Swish network for different values of b
(b) A draw from the output function of a Swish network with depth 30 and width 100 on the edge of chaos for b = 0.2
Figure 4: Correlation function and a draw of the output for a Swish network

Lemma 2. Under the conditions of Proposition 4, the only change being limb0 q > 0, the result of Proposition 4 holds if only if the activation function is linear.

The next proposition gives sufficient conditions for bounded activation functions to satisfy all the conditions of Proposition 4.
Proposition 5. Let  be a bounded function such that (0) = 0,  (0) > 0,  (x)  0, (-x) = -(x), x(x) > 0 and x (x) < 0 for x = 0, and  satisfies (ii) in Proposition 4. Then,  satisfies all the conditions of Proposition 4.

The conditions in Proposition 5 are easy to verify and are, for example, satisfied by Tanh and Arctan. We can also replace the assumption " satisfies (ii) in Proposition 4" by a sufficient condition (see Proposition 7 in the Supplementary Material). Tanh-like activation functions provide better information flow in deep networks compared to ReLU-like functions. However, these functions suffer from the vanishing gradient problem during back-propagation; see, e.g., Pascanu et al. (2013) and Kolen & Kremer (2001). Thus, an activation function that satisfies the conditions of Proposition 4 (in order to have a good 'information flow') and does not suffer from the vanishing gradient issue is expected to perform better than ReLU. Swish is a good candidate.

Proposition 6.

The Swish activation function swish(x) = x · sigmoid(x) =

x 1+e-x

satisfies all the

conditions of Proposition 4.

It is clear that Swish does not suffer from the vanishing gradient problem as it has a gradient close
to 1 for large inputs like ReLU. Figure 4 (a) displays f for Swish for different values of b. We see that f is indeed approaching the identity function when b is small, preventing the correlations from converging to 1. Figure 4(b) displays a draw of the output of a neural network of depth 30 and width
100 with Swish activation, and b = 0.2. The outputs displays much more variability than the ones of the ReLU network with the same architecture. We present in Table 1 some values of (b, w) on the EOC as well as the corresponding limiting variance for Swish. As condition (iii) of Proposition
4 is satisfied, the limiting variance q decreases with b.

Table 1: Values of (b, w) on the EOC and limiting variance q for Swish
b 0.1 0.2 0.3 0.4 0.5 w 1.845 1.718 1.616 1.537 1.485 q 0.14 0.44 0.61 1.01 2.13

6

Under review as a conference paper at ICLR 2019

Other activation functions that have been shown to outperform empirically ReLU such as ELU (Clevert et al. (2016)), SELU (Klambauer et al. (2017)) and Softplus also satisfy the conditions of Proposition 4 (see Supplementary Material for ELU). The comparison of activation functions satisfying the conditions of Proposition 4 remains an open question.

4 EXPERIMENTAL RESULTS

We demonstrate empirically our results on the MNIST dataset. In all the figures below, we compare the learning speed (test accuracy with respect to the number of epochs/iterations) for different activation functions and initialization parameters. We use the Adam optimizer with learning rate lr = 0.001. The Python code to reproduce all the experiments will be made available on-line.

Initialization on the Edge of Chaos We initialize randomly the deep network by sampling Wilj iid

N (0, w2 /Nl-1) and Bil iid N (0, b2). In Figure 5, we compare the learning speed of a Swish network for different choices of random initialization. Any initialization other than on the edge of chaos

results in the optimization algorithm being stuck eventually at a very poor test accuracy of  0.1 as

the depth L increases (equivalent to selecting the output uniformly at random). To understand what is

happening in this case, let us recall how the optimization algorithm works. Let {(Xi, Yi), 1  i  N }

be the MNIST dataset. The loss we optimize is given by L(w, b) =

N i=1

(yL(Xi), Yi)/N where

yL(x) is the output of the network, and is the categorical cross-entropy loss. In the ordered phase,

we know that the output converges exponentially to a fixed value (same value for all Xi), thus a small

change in w and b will not change significantly the value of the loss function, therefore the gradient

is approximately zero and the gradient descent algorithm will be stuck around the initial value.

(a) width = 30, depth = 20

(b) width = 80, depth = 40

Figure 5: Impact of the initialization on the edge of chaos for Swish network

ReLU versus Tanh We proved in Section 3.2 that the Tanh activation guarantees better information propagation through the network when initialized on the EOC. However, Tanh suffers

(a) width = 10, depth = 5

(b) width = 80, depth = 40

Figure 6: Comparaison of ReLu and Tanh learning curves for different widths and depths

7

Under review as a conference paper at ICLR 2019
from the vanishing gradient problem. Consequently, we expect Tanh to perform better than ReLU for shallow networks as opposed to deep networks, where the problem of the vanishing gradient is not encountered. Numerical results confirm this fact. Figure 6 shows curves of validation accuracy with confidence interval 90% (30 simulations). For depth 5, the learning algorithm converges faster for Tanh compared to ReLu. However, for deeper networks (L  40), Tanh is stuck at a very low test accuracy, this is due to the fact that a lot of parameters remain essentially unchanged because the gradient is very small.
ReLU versus Swish As established in Section 3.2, Swish, like Tanh, propagates the information better than ReLU and, contrary to Tanh, it does not suffer from the vanishing gradient problem. Hence our results suggest that Swish should perform better than ReLU, especially for deep architectures. Numerical results confirm this fact. Figure 7 shows curves of validation accuracy with confidence interval 90% (30 simulations). Swish performs clearly better than ReLU especially for depth 40. A comparative study of final accuracy is shown in Table 2. We observe a clear advantage for Swish, especially for large depths. Additional simulations results on diverse datasets demonstrating better performance of Swish over many other activation functions can be found in Ramachandran et al. (2017) (Notice that these authors have already implemented Swish in Tensorflow).

(a) width = 10, depth = 5

(b) width = 80, depth = 40

Figure 7: Convergence across iterations of the learning algorithm for ReLU and Swish networks

Table 2: Accuracy on test set for different values of (width, depth)
(10,5) (20,10) (40,30) (60,40) ReLU 94.01 96.01 96.51 91.45 Swish 94.46 96.34 97.09 97.14

5 CONCLUSION AND DISCUSSION
We have complemented here the analysis of Schoenholz et al. (2017) which shows that initializing networks on the EOC provides a better propagation of information across layers. In the ReLU case, such an initialization corresponds to the popular approach proposed in He et al. (2015). However, even on the EOC, the correlations still converge to 1 at a polynomial rate for ReLU networks. We have obtained a set of sufficient conditions for activation functions which further improve information propagation when the parameters (b, w) are on the EOC. The Tanh activation satisfied those conditions but, more interestingly, other functions which do not suffer from the vanishing/exploding gradient problems also verify them. This includes the Swish function used in Hendrycks & Gimpel (2016), Elfwing et al. (2017) and promoted in Ramachandran et al. (2017) but also ELU Clevert et al. (2016).
Our results have also interesting implications for Bayesian neural networks which have received renewed attention lately; see, e.g., Hernandez-Lobato & Adams (2015) and Lee et al. (2018). They show that if one assigns i.i.d. Gaussian prior distributions to the weights and biases, the resulting prior distribution will be concentrated on close to constant functions even on the EOC for ReLU-like activation functions. To obtain much richer priors, our results indicate that we need to select not only parameters (b, w) on the EOC but also an activation function satisfying Proposition 4.
8

Under review as a conference paper at ICLR 2019
REFERENCES
Y. Cho and L.K. Saul. Kernel methods for deep learning. Advances in Neural Information Processing Systems, 22:342­350, 2009.
D.A. Clevert, T. Unterthiner, and S. Hochreiter. Fast and accurate deep network learning by exponential linear units (elus). International Conference on Learning Representations, 2016.
S. Elfwing, E. Uchibe, and K. Doya. Sigmoid-weighted linear units for neural network function approximation in reinforcement learning. arXiv:1702.03118, 2017.
K. He, X. Zhang, S. Ren, and J. Sun. Delving deep into rectifiers: Surpassing human-level performance on imagenet classification. ICCV, 2015.
D.. Hendrycks and K. Gimpel. Bridging nonlinearities and stochastic regularizers with gaussian error linear units. arXiv:1606.08415, 2016.
J. M. Hernandez-Lobato and R.P. Adams. Probabilistic backpropagation for scalable learning of bayesian neural networks. ICML, 2015.
G. Klambauer, T. Unterthiner, and A. Mayr. Self-normalizing neural networks. Advances in Neural Information Processing Systems, 30, 2017.
J.F. Kolen and S.C. Kremer. Gradient flow in recurrent nets: The difficulty of learning longterm dependencies. A Field Guide to Dynamical Recurrent Network, Wiley-IEEE Press, pp. 464­, 2001.
Y. LeCun, L. Bottou, G. Orr, and K. Muller. Efficient backprop. Neural Networks: Tricks of the trade, Springer, 1998.
J. Lee, Y. Bahri, R. Novak, S.S. Schoenholz, J. Pennington, and J. Sohl-Dickstein. Deep neural networks as gaussian processes. 6th International Conference on Learning Representations, 2018.
A.G. Matthews, J. Hron, M. Rowland, R.E. Turner, and Z. Ghahramani. Gaussian process behaviour in wide deep neural networks. 6th International Conference on Learning Representations, 2018.
G.F. Montufar, R. Pascanu, K. Cho, and Y. Bengio. On the number of linear regions of deep neural networks. Advances in Neural Information Processing Systems, 27:2924­2932, 2014.
R.M. Neal. Bayesian learning for neural networks. Springer Science & Business Media, 118, 1995. R. Pascanu, T. Mikolov, and Y. Bengio. On the difficulty of training recurrent neural networks.
Proceedings of the 30th International Conference on Machine Learning, 28:1310­1318, 2013. B. Poole, S. Lahiri, M. Raghu, J. Sohl-Dickstein, and S. Ganguli. Exponential expressivity in deep
neural networks through transient chaos. 30th Conference on Neural Information Processing Systems, 2016. P. Ramachandran, B. Zoph, and Q.V. Le. Searching for activation functions. arXiv e-print 1710.05941, 2017. S.S. Schoenholz, J. Gilmer, S. Ganguli, and J. Sohl-Dickstein. Deep information propagation. 5th International Conference on Learning Representations, 2017.
9

Under review as a conference paper at ICLR 2019

A PROOFS
We provide in the supplementary material the proofs of the propositions presented in the main document, and we give additive theoretical and experimental results. For the sake of clarity we recall the propositions before giving their proofs.

A.1 CONVERGENCE TO THE FIXED POINT: PROPOSITION 1

Proposition 1. Let M := supx0E[| 2(xZ) +  (xZ)(xZ)|]. Suppose M < , then for

w2

<

1 M

and

any

b,

we

have

(b, w)



D,var

and

K,var(b, w)

=





Moreover, let C, := supx,y0,|x-y|,c[0,1]E[| (xZ1) (y(cZ1 + 1 - c2Z2)|]. Suppose

C,

<

 for some positive ,

then for w2

<

min(

1 M

,

1 C

)

and

any

b,

we have (b, w)



D,var  D,corr and K,var(b, w) = K,corr(b, w) = .

Proof. To abbreviate the notation, we use ql := qal for some fixed input a.

Convergence ql = F (ql-1)

of the variances: where,

We first consider the asymptotic

F

(x)

=

b2

+

w2

 E[( xZ

)2].

behaviour

of

ql

=

qal .

Recall

that

The first derivative of this function is given by:

F

(x)

=

w2 E[

Z x



 ( xZ)( xZ)]

=

w2 E[

 ( xZ

)2

+



 ( xZ)( xZ)]

(3)

where we used Gaussian integration by parts E[ZG(Z)] = E[G (Z)], an identify satisfied by any function G such that E[|G (Z)|] < .

Using the condition on , we see that for w2

<

1 M

,

the

function

F

is a contraction mapping,

and the Banach fixed-point theorem guarantees the existence of a unique fixed point q of F , with

liml+ ql = q. Note that this fixed point depends only on F , therefore, this is true for any input a,

and K,var(b, w) = .

Convergence of the covariances: Since M < , then for all a, b  Rd there exists l0 such that,

for all l > l0, | qal - qbl | < . Let l > l0, using Gaussian integration by parts, we have

dcla+b 1 dclab

= w2 E[| (

qal Z1) (

qbl (clabZ1 +

1 - (cal b)2Z2)|].

We cannot use the Banach fixed point theorem directly because the integrated function here depends on l through ql. For ease of notation, we write cl := clab, we have

|cl+1 - cl| = |

cl cl-1

dcl+1 dcl

(x)dx|



w2 C|cl

-

cl-1|.

Therefore,

for

w2

<

min(

1 M

,

1 C

),

cl

is

a

Cauchy

sequence

and

it

converges

to

a

limit

c



[0, 1]

.

At the limit

c

=

f (c)

=

b2

+

w2

 E[( qz1)( q(cz1

+

 1

-

c2z2)))] ,

q

The derivative of this function is given by

f

(x)

=

w2 E[

 ( qZ1)

 ( q(xZ1

+

 1

-

xZ2)]

By assumption on  and the choice of w, we have supx|f (x)| < 1, so that f is a contraction, and has a unique fixed point. Since f (1) = 1, c = 1. The above result is true for any a, b, therefore,
K,var(b, w) = K,corr(b, w) = .

10

Under review as a conference paper at ICLR 2019
As an illustration we plot in Figure 12 the variance for three different inputs with (b, w) = (1, 1), as a function of the layer l. In this example, the convergence for Tanh is faster than that of ReLU.

(a) ReLU

(b) Tanh

Figure 8: Convergence of the variance for three different inputs with (b, w) = (1, 1)

Lemma 1. Let (b, w)  D,var  D,corr such that q > 0, a, b  Rd and  an activation function

such f (x)

t=hat b2s+upw2xE[K(Eq[Z(1x)Z(q)2q](x<Z1+f1o-rxa2Zll2c))o.mTphaecnt

sets K. liml

Define fl by cal+,b1 = supx[0,1] |fl(x) - f

fl(cal ,b) and (x)| = 0.

f

by

Proof. For x  [0, 1], we have

fl(x) - f (x) = (

1 qal qbl

-

1 q

)(b2

+

w2 E[(

qal Z1)(

qbl u2(x))])

+

w2 q

(E[(

qal Z1)(

qbl u2

(x))]

-

 E[( qZ1)( qu2(x))]),



where u2(x) := xZ1 + 1 - x2Z2. The first term goes to zero uniformly in x using the condition

on  and Cauchy-Schwartz inequality. As for the second term, it can be written as

E[((

qal Z1

)

-

 ( qZ1

))(

qbl

u2(x))]

+

 E[( qZ1

)((

qbl

u2(x))

-

 ( qu2(x)))]

again, using Cauchy-Schwartz and the condition on , both terms can be controlled uniformly in x by an integrable upper bound. We conclude using the Dominated convergence.

A.2 RESULTS FOR RELU-LIKE ACTIVATION FUNCTIONS: PROOF OF PROPOSITIONS 2 AND 3

Proposition 2. Let  be a ReLU-like function with  and  defined above. Then for any w <

2 2 + 2

and

b



0,

we

have

(b, w)



D,var

with

K,var(b, w)

=

.

Moreover

EOC

=

{(0,  1 )} and, on the EOC, F (x) = x for any x  0.
E[ (Z)2]

Proof. We write ql = qal throughout the proof. Note first that the variance satisfies the recursion:

ql+1

=

b2

+

w2 E[(Z)2]ql

=

b2

+

w2

2

+ 2

2

ql.

(4)

For all w <

2 2 + 2

,

q

=

b2

1 - w2 (2 + 2)/2 -1 is a fixed point. This is true for any input,

therefore K,var(b, w) =  and (i) is proved.

Now, the EOC equation is given by 1

=

w2 E[ (Z)2]

=

w2

2 + 2 2

.

Therefore, w2

=

2

2 +2

.

Replacing w2 by its critical value in equation 4 yields

ql+1 = b2 + ql.

11

Under review as a conference paper at ICLR 2019

Ta hsuinsgqle=poibn2 t+(qb2i,faw2n)d

only if b = (0, E[

= 0, otherwise ql (Z)2]-1), and the

diverges to infinity. So the variance does not depend

frontier on l.

is

reduced

to

Proposition 3 (ReLU kernel). Consider a ReLU network with parameters (b2, w2 ) = (0, 2) on the

EOC.We have



(i)

for

x



[0, 1],

f (x)

=

1 

x

arcsin(x)

+

1 

1

-

x2

+

1 2

x,

ii)

for

any

(a, b),

liml

clab

=

1

and

1

-

cal b



92 2l2

as

l



.

 Proof. In this case the correlation function f is given by f (x) = 2E[(Z1)+(xZ1 + 1 - x2Z2)+] where (x)+ := x1x>0.

· Let x  [0, 1], note that f is differentiable and satisfies,

f

(x)

=

2E[1Z1

>0

1xZ1

 + 1-x2

Z2

>0

],

which is also differentiable. Simple algebra leads to

f "(x) =  1 .  1 - x2

Since

arcsin

(x)

=

1 1-x2

and

f

(0)

=

1/2,

11 f (x) = arcsin(x) + .
2

 We conclude using the fact that arcsin = x arcsin + 1 - x2 and f (1) = 1.

· We first derive a Taylor expansion of f near 1. Consider the change of variable x = 1 - t2

with t close to 0, then

arcsin(1

-

t2)

=



-

 2t

-

 2 t3

+

O(t5),

2 12

so that

arcsin(x)

=



-

 2(1

-

x)1/2

-

 2 (1

-

x)3/2

+

O((1

-

x)5/2),

2 12

and

x arcsin(x)

=



-

 2(1

-

x)1/2

+

 11 2
(1

-

x)3/2

+

O((1

-

x)5/2).

2 12

Since

1

-

x2

=

 2(1

-

x)1/2

-

 2 (1

-

x)3/2

+

O((1

-

x)5/2),

4

we obtain that



f (x)

=

2 x+

2 (1 - x)3/2 + O((1 - x)5/2).

x1-

3

(5)

Since (f (x) - x)

=

1 

(arcsin(x)

-

 2

)

<

0

and

f (1)

=

1,

for

all

x



[0,

1[,

f (x)

>

x.

If cl < cl+1 then by taking the image by f (which is increasing because f  0) we have

that cl+1 < cl+2, and we know that c1 = f (c0)  c0, so by induction the sequence cl is

increasing, and therefore it converges (because it is bounded) to the fixed point of f which

is 1.



Now

let

l

:=

1

-

cal b

for

a, b

fixed.

We

note

s

=

22 3

,

from

the

series

expansion

we

have

that l+1 = l - sl3/2 + O(l5/2) so that

l-+11/2

=

l-1/2(1

-

sl1/2

+

O(l3/2))-1/2

=

l-1/2(1

+

s 2

l1/2

+

O(l3/2))

=

l-1/2

+

s 2

+

O(l).

12

Under review as a conference paper at ICLR 2019

Thus, as l goes to infinity

l-+11/2

- l-1/2



s 2

and by summing and equivalence of positive divergent series

l-1/2



s l,
2

which terminates the proof.

A.3 A BETTER CLASS OF ACTIVATION FUNCTIONS: PROOFS OF PROPOSITIONS 4, 5, 6 AND LEMMA 2

Proposition 4 function F (x)

(main := b2

+resuw2ltE).[L(et xZb)e2a].nAascstuivmaetitohnatfunction.

Recall

the

definition

of

the

variance

(i) (0) = 0, and  has right and left derivatives in zero and at least one of them is different from

zero ( (0+) = 0 or  (0-) = 0), and there exists K > 0 such that

(x) x

 K.

(ii) There exists A > 0 such that for any b  [0, A], there exists w,EOC > 0 such that (b, w,EOC) 

EOC.

(iii) For any b  [0, A], the function F with parameters (b, w,EOC) is non-decreasing and limb0 q = 0 where q is the minimal fixed point of F , q := inf{x : F (x) = x}). (iv) For any b  [0, A], the correlation function f with parameters (b, w,EOC) introduced in

Lemma 1 is convex.

Then, for any b  [0, A], we have K,var(b, w)  q, and

lim sup |f (x) - x| = 0.

(b

b 0 ,w )EOC

x[0,1]

Proof. We first prove that K,var(b, w)  q. We assume that b > 0, the case b = 0 is trivial since in this case q = 0 (the output of the network is zero in this case).
Since F is continuous and F (0) = b2 > 0, we have x  F (x)  q for all x  [0, q]. Using the fact that F is non-decreasing for any input a such that qa1  q, we have ql is increasing and converges to the fixed point q. Therefore K,var(b, w)  q.
Now we prove that on the edge of chaos, we have

lim b2 = 0. b0 q

(6)

The

EOC

equation

is

given

by

w2 E[

 ( qZ

)2]

=

1.

By

taking

the

limit

b



0

on

the

edge

of

chaos, and using the fact that limb0 q

=

0,

we

have

w2



(0+ )2 + 2

(0- )2

=

1.

Moreover q

verifies

F (q) q

=

1

=

b2 q

+



w2

E[(

(

qZ q

)

)2],

so that by taking the limit b  0, and using the dominated convergence theorem, we have that

1 = limb0

b2 q

+

w2



(0+ )2 + 2

(0- )2

= limb0

b2 q

+ 1 and equation 6 holds.

Finally since f is strictly convex, for all x  [0, 1] f (x)  f (1) = 1 if (b, w)  EOC. Therefore

0



f (x) - x



f (0)

=

b2 q

,

we

conclude

using

the

fact

that

limb0

b2 q

=

0.

Note however that for all b > 0, if (b, w)  EOC, for any inputs a, b, we have liml cla,b = 1. Indeed, since f is usually strictly convex (otherwise, f would be equal to identity on at least a segment of [0, 1]) and f (1) = 1, we have that f is a contraction (because f  0), therefore the correlation
converges to the unique fixed point of f which is 1. Therefore, in most of the cases, the result of
Proposition 4 should be seen as a way of slowing down the convergence of the correlation to 1.

13

Under review as a conference paper at ICLR 2019

Lemma 2. Under the conditions of Proposition 4, the only change being limb0 q > 0, the result of Proposition 4 holds only if the activation function is linear.

Proof. f (0)

Using the convexity of = f (1) = 1, which is

feqaunidvatlheentretosuElt[of(PrqoZpo)s2i]tio=n

E4,[w(ehqaZve)]2inwthheiclhimimit plibestha0t,

var( ( qZ)) = 0. Therefore there exists a constant a1 such that  ( qZ) = a1 almost surely. This

implies  = a1 almost everywhere.

Proposition 5. Let  be a bounded function such that (0) = 0,  (0) > 0,  (x)  0, (-x) = -(x), x(x) > 0 and x (x) < 0 for x = 0, and  satisfies (ii) in Proposition 4. Then,  satisfies
all the conditions of Proposition 4.

Proof. Let  be an activation function that satisfies the conditions of Proposition 5.

(i) we have (0) = 0 and  (0) > 0. Since  is bounded and 0 <  (0) < , then there exists K

such that

(x) x

 K.

(ii) The condition (ii) is satisfied by assumption.

(iii) Let b > 0 and w > 0. Using equation 3 together with  > 0, we have F (x)  0 so that F is non-decreasing. Moreover, we have F (R+)  [B, C] := [b2, b2 + w2 M 2], therefore any fixed point of F should be in [B, C]. We have F (B)  B and F (C)  C and F is strictly increasing,

therefore, there exists a fixed point q of F in [B, C]. Now we prove that

the EOC equation, q satisfies the equation

e(x)

:=

x

-

 E[( xZ

)2

]

E[ ( xZ)2]

is

increasing

near

q 0

= b2 + EE[[((qqZZ))22]] . which means it is an

Now let's injection

limb0 q = 0. Using prove that the function
near 0, this is sufficient

to conclude (because we take q to be the minimal fixed point). After some calculus, we have

E[ e (x) = -

 ( xZ)(( xZ)E[

 ( xZ

)2

]



-

Z x



 ( xZ

 )E[( xZ

)2

])]

E[ ( xZ)2]

tUos-in2gTa(y0l)o2rex(p0a)n2sxionxne+arO0(,xa2ft)e,rthaedreetfaoirleedthbeuftuunncetniolinghetiesniinncgrecaalscinuglatnieoanrt0h.e numerator is equal

(iv)

Finally,

using

the

notations

U1

:=

 qZ1

and

U2(x)

=

 q(xZ1

+

 1-

x2Z2),

the

first

and

second derivatives of the correlation function are given by

f (x) = w2 E[ (U1) (U2(x))], f (x) = w2 qE[ (U1) (U2(x))]

where we used Gaussian integration by parts. Let x > 0, we have that

E[ (U1) (U2(x))] = E[1{U10} (U1) (U2(x))] + E[1{U10} (U1) (U2(x))]
= 2E[1{U10} (U1) (U2(x))]
where we used the fact that (Z1, Z2) = (-Z1, -Z2) (in distribution) and  (-y) = - (y) for any y. Using x (x)  0, we have 1{u10} (u1)  0. We also have for all y > 0, E[ (U2(x))|U1 = y] < 0, this is a consequence of the fact that  is an odd function and that for x > 0 and y > 0, the mapping z2  xy + 1 - x2z2 moves the center of the Gaussian distribution to a strictly positive number, we conclude that f (x) > 0 almost everywhere and assumption (iii) of Proposition 4 is verified.

Proposition 6.

The Swish activation function swish(x) = x · sigmoid(x) =

x 1+e-x

satisfies all the

conditions of Proposition 4.

14

Under review as a conference paper at ICLR 2019

Figure 9: Graphs of ReLU and Swish

Proof. To abbreviate notation, we note  := Swish = xex/(1 + ex) and h := ex/(1 + ex) is the Sigmoid function. This proof should be seen as a sketch of the ideas and not a rigourous proof.

·

we have (0) = 0 and  (0) =

1 2

and

(x) x

1

· As illustrated in Table 1 in the main text, it is easy to see numerically that (ii) is satisfied. Moreover, we observe that limb0 q = 0, which proves the second part of the (iii).

· Now we prove that F > 0, we note g(x) := x (x)(x). We have

g(x)

=

x2

(1

+ e-x + xe-x) (1 + e-x)3

Define G by

G(x) =

g(x) -g(-x)

if x  0 if x > 0

so that G(-x) = -G(x) for all x  R and g(x)  G(x) for all x  0. Let x > 0, then g(x) > G(x)  1 + e-x + xe-x  e-3x(-1 - ex + xex)

which holds true for any positive number x. We thus have g(x) > G(x) for all real numbers x. Therefore E[g( xZ)] > 0 almost everywhere and F > 0. The second part of (iii) was already proven above.
· Let b > 0 and w > 0 such that q exists. Recall that
f (x) = w2 qE[ (U1) (U2(x))]
In Figure 10, we show the graph of E[ (U1) (U2(x))] for different values of q (from 0.1 to 10, the darkest line being for q = 10). A rigorous proof can be done but is omitted here.

15

Under review as a conference paper at ICLR 2019

Figure 10: graphs of E[ (U1) (U2(x))] for different values of q (from 0.1 to 10, the darkest line corresponds to q = 10)

We observe that f has very small values when q is large, this is a result of the fact that  is concentrated around 0.

Remark

:

On

the

edge

of

chaos,

we

have

w2 E[

 (q

Z

)2]

=

1.

Recall

that

F

can also be expressed

as

F

(x)

=

w2 (E[

 ( xZ

)2]

+

E[

 ( xZ)( xZ)]),

this yields The term E[

(qZ

)(qZ

F (q) = )] is very

1 + w2 E[

 ( qZ

small compared to

 )( qZ)]. 1 ( 0.01),

therefore

F

(q)  1.

(7)

Notice also that the theoretical results corresponds to the equivalent Gaussian process, which is just

an approximation of the neural network. Thus, using a value of (b, w) close to the EOC should not essentially change the quality of the result.

B SUPPLEMENTARY THEORETICAL RESULTS

B.1 SUFFICIENT CONDITIONS FOR BOUNDED ACTIVATION FUNCTIONS
We can replace the conditions " satisfies (ii)" in Proposition 5 by a sufficient condition. However, this condition is not satisfied by Tanh.
Proposition 7. Let  be a bounded function such that (0) = 0,  (0) > 0,  (x)  0, (-x) = -(x), x(x) > 0 and x (x) < 0 for x = 0, and |E (xZ)2| |x|-2 for large x and some   (0, 1). Then,  satisfies all the conditions of Proposition 4.

Proof. Let  be an activation function that satisfies the conditions of Proposition 7. The proof is

similar to the one of 5, we only need to show that having |E (xZ)2| |x|-2 for large x and some

  (0, 1) implies that (ii) of 4 is verified.

We the

have term

thw2a|tEw2 (|EqZ()2q| Zta)k2e|

w2 q-2 = w2 (b2 + w2 E[(qZ)2])-, so that we any value between 0 and . Therefore, there exists w

can make such that

(b, w)  EOC, and assumption (ii) of Proposition 4 holds.

B.2 IMPACT OF SMOOTHNESS
In the proof of Proposition 5, we used the condition on  (odd function) to prove that f > 0, however, in some cases when we can explicitly calculate f , we do not need  to be defined. This is the case for Hard-Tanh, which is a piecewise-linear version of Tanh. We give an explicit calculation
16

Under review as a conference paper at ICLR 2019

of f for the Hard-Tanh activation function which we note HT in what follows. We compare the performance of HT and Tanh based on a metric which we will define later. HT is given by
-1 if x < -1  HT (x) = x if -1  x  1 1 if x > 1
Recall the propagation of the variance ql
ql+1 = b2 + w2 E(HT ( qlZ)2)

where HT is the Hard-Tanh function. We have

E(HT (

q l Z )2 )

=

E(1Z<-

1
ql

)

+

E(1-1/ql

<Z


<1/ ql

Z

2

)

+

E(1Z


>1/ ql

)

=1-

2

exp(- 

1 2ql

)

ql 2

This yields

ql+1 = g(ql)

where

g(x)

=

b2

+

w2 (1

-

2 x

exp(-

1 x

)

)

2

- EDGE OF CHAOS :

TEo(HstTud(ytqhZe

correlation )2) = E(1-

behaviour, )1q <Z< 1q

we will assume that the variance converges to q. We have = 2( 1q )-1 (where  is the cumulative distribution function

of a standard normal variable). The edge of chaos is then given by the equation w2 (2( 1q ) - 1) = 1.

We fix w to its value on the edge.

Now let a and b be any two inputs. We have

cl+1 = f (cl)

where

f (x) = b2 + w2 E[(U1)(U2(x))] q

with

U1

:=

 qZ1,

and

U2(x)

:=

 q(xZ1

+

 1

-

x2Z2).

Lemma 3. Suppose ql converges to a fixed point q > 0. Then,

x  [0, 1], f (x) = w2

(e - e )-

1 q(1+x)

-

1 q(1-x)

 1 - x2

Proof. We note  := 1/q. For x  [0, 1[, we have that :

f

(x)

=

w2 E[1-<Z1<

×

1-<xZ1

 + 1-x2

Z2

<

]

=

w2 E[1-<Z1<

×

(1-<xZ1

 + 1-x2

Z2

-

1<xZ1

 + 1-x2

Z2

)]

17

Under review as a conference paper at ICLR 2019

Figure 11: The correlation function on the edge of order-to-chaos for a Tanh network with small values of b

We

deal

with

the

first

part

f1(x)

=

w2 E[1-<Z1<

×

1-<xZ1

 + 1-x2

Z2

],

we

have

that

:

f1(x)

=

w2 E[1-<Z1<

×

 1

1 -

x2 (Z1

-

x 1-

x2

Z2

)-=xZ1

 + 1-x2

Z2

]

=

w2 2

E[1-<Z1

<

×

1 1-

x2

Z1 + x 1 - x2

exp(-

(xZ1 + )2 2(1 - x2)

)]

= w2 2 1 - x2

 -

z1 + x 1 - x2

exp(- z12

+ 2xz1 + 2(1 - x2)

2

)dz1

= w2

(e-

2 1+x

-

e-

2 1-x

)

2 1 - x2

we show a similar result for the second part and we conclude.

We proved that f > 0 for Hard-Tanh, all other conditions of proposition 5 (excluding the

conditions on  since those were only used to prove f > 0) are verified, therefore the result of

Proposition 4 holds for Hard-Tanh. we want to compare Tanh and Hard-Tanh when b is small

since this is the important case. The proof of Proposition 4 gives us an idea on how to compare

them,

the

ratio

b2 q

controls

the

quality

of approximation

of f by

the identity function, so

a

smaller

ratio means a better approximation. Figure 2 shows that Tanh outperforms Hard-Tanh in this

sense. This also means that for the same quality of approximation, we have bigger q (bigger

output variance) with Tanh compared to Hard-Tanh. This can particularly be due to the non-

smoothness of Hard-Tanh, which slows down the dominated convergence in the proof of Proposition 4.

C SUPPLEMENTARY EXPERIMENTAL RESULTS

C.1 ELU ACTIVATION

We show numerically that the activation function ELU defined by (x) = (ex - 1)1x<0 + x1x0

satisfies the conditions of Proposition 4. We have (x) = 0,  (0+) = 1,  (0-) = 1 and

(x) x

 1.

Other conditions of Proposition 4 are shown numerically in graphs below.

18

Under review as a conference paper at ICLR 2019

(a) EOC curve

(b) Function F for (b, w) = (0.2, 1.23)

(c) Function f for (b, w) = (0.2, 1.23)

(d) q as a function of b

Figure 12: Experimental results for ELU activation

Figure 12a shows the EOC curve (condition (ii) is satisfied). Figure 12b shows that is non-decreasing and Figure 12d illustrates the fact that limb0 q = 0. Finally, Figure 12c shows that function f is convex. Although the figures of F and f are shown just for one value of (b, w), the results are true for any value of (b, w) on the EOC.
C.2 WHAT HAPPENS WHEN THE DEPTH IS LARGER THAN THE WIDTH?
Table 2 presents a comparative analysis of the validation accuracy of ReLU and Swish when the depth is larger than the width, in which case the approximation by a Gaussian process is not accurate (notice that in the approximation of a neural network by a Gaussian process, we first let Nl  , then we consider the limit of large L). ReLU tends to outperforms Swish when the width is smaller than the depth and both are small, however, we still observe a clear advantage of Swish for deeper architectures.
Table 3: Validation accuracy for different values of (width, depth)
(5,10) (10,20) (30,40) (40,50)
ReLU 86.65 93.76 93.59 90.77 Swish 86.56 93.21 96.78 97.08

19

