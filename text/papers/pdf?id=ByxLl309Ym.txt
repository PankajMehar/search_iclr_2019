Under review as a conference paper at ICLR 2019
CONDITIONAL INFERENCE IN PRE-TRAINED VARIATIONAL AUTOENCODERS VIA CROSS-CODING
Anonymous authors Paper under double-blind review
ABSTRACT
Variational Autoencoders (VAEs) are a popular generative model, but one in which conditional inference can be challenging. If the decomposition into query and evidence variables is fixed, conditional VAEs provide an attractive solution. To support arbitrary queries, one is generally reduced to Markov Chain Monte Carlo sampling methods that can suffer from long mixing times. In this paper, we propose an idea we term cross-coding to approximate the distribution over the latent variables after conditioning on an evidence assignment to some subset of the variables. This allows generating query samples without retraining the full VAE. We experimentally evaluate three variations of cross-coding showing that (i) they can be quickly optimized for different decompositions of evidence and query and (ii) they quantitatively and qualitatively outperform Hamiltonian Monte Carlo.
1 INTRODUCTION
Variational Autoencoders (VAEs) (Kingma & Welling, 2014) are a popular deep generative model with numerous extensions including variations for planar flow (Rezende & Mohamed, 2015), inverse autoregressive flow (Kingma et al., 2016), importance weighting (Burda et al., 2016), ladder networks (Maaløe et al., 2016), and discrete latent spaces (Rolfe, 2017) to name just a few. Unfortunately, existing methods for conditional inference in VAEs are limited. Conditional VAEs (CVAEs) (Sohn et al., 2015) allow VAE training conditioned on a fixed decomposition of evidence and query, but are computationally impractical when varying queries are made. Alternatively, Markov Chain Monte Carlo methods such as Hamiltonian Monte Carlo (HMC) (Girolami & Calderhead, 2011; Daniel Levy, 2018) are difficult to adapt to these problems, and can suffer from long mixing times as we show empirically. To remedy the limitations of existing methods for conditional inference in VAEs, we aim to approximate the distribution over the latent variables after conditioning on an evidence assignment through a variational Bayesian methodology. In doing this, we reuse the decoder of the VAE and show that the error of the distribution over query variables is controlled by that over latent variables via a fortuitous cancellation in the KL-divergence. This avoids the computational expense of re-training the decoder as done by the CVAE approach. We term the network that generates the conditional latent distribution the cross-coder. We experiment with two cross-coding alternatives: Gaussian variational inference via a linear transform (GVI) and Normalizing Flows (NF). We also provide some comparison to a fully connected network (FCN), which suffers from some technical and computational issues but provides a useful point of reference for experimental comparison purposes. Overall, our results show that the GVI and NF variants of cross-coding can be optimized quickly for arbitrary decompositions of query and evidence and compare favorably against a ground truth provided by rejection sampling for low latent dimensionality. For high dimensionality, we observe that HMC often fails to mix despite our systematic efforts to tune its parameters and hence demonstrates poor performance compared to cross-coding in both quantitative and qualitative evaluation.
1

Under review as a conference paper at ICLR 2019

Algorithm 1 Conditional Inference via Cross-coding.

Input (a) Pre-trained VAE p(z)p(t|z) with p(t|z) based on Decoder(z). (Encoder ignored.) (b) Single query x (any subset of t) for which to predict y. (Rest of t.)

Optimize Define q( )q(z| ) with q(z| ) based on XCoder( ). Find  to maximize
C-ELBO[q(Z) p(Z, x)] (Defined in Theorem 2). Estimate stochastic gradients by drawing random  q( ) and using the reparameterization trick.

Predict Draw a sample {zm}mM=1  q(z) by setting zm = XCoder( m) for m  q( ). Predict

p (y|x)



1 M

M m=1

p (y|zm ).

(Justified

since

the

optimization

phase

tightened

a

bound

(Lemma 1) on the divergence between q(z)p(y|z)dz and p(y|x) )

Figure 1: Proposed Cross-coding framework for conditional inference with variational auto-encoders. Arrow and text colors are aligned with the description in Algorithm 1, where t = (x, y).

2 BACKGROUND

2.1 VARIATIONAL AUTO-ENCODERS

One way to define an expressive generative model p(t) is to introduce latent variables z. Variational Auto-Encoders (VAEs) (Kingma & Welling, 2014) model p(z) as a simple fixed Gaussian distribution. Then, for real t, p(t|z)is a Gaussian with the mean determined by a "decoder" network as

p(t|z) = N (t; Decoder(z), 2I).

(1)

If t is binary, a product of independent Bernoulli's is parameterized by a sigmoidally transformed decoder. If the decoder network has high capacity, the marginal distribution p(t) can represent a wide range of distributions. In principle, one might wish to train such a model by (regularized) maximum likelihood. Unfortunately, the marginal p(t) is intractable. However, a classic idea (Saul et al., 1996) is to use variational inference to lower-bound it. For any distributions p and q,

log p(t) = log

z

p (t,

z)dz

=

Eq(Z)

log

p(Z, t) q(Z)

+K L[q (Z)||p (Z|t)].

(2)

ELBO[q(Z) p(Z,t)]

Since the KL-divergence is non-negative, the "evidence lower bound" (ELBO) lower bounds log p(t). Thus, as a surrogate to maximizing the likelihood over  one can maximize the ELBO over to  and  simultaneously.
VAEs define q(z) as the marginal of q(t)q(z|t) where q(t) is simple and fixed and q(z|t) = N (z; Encoder(t)) is a Gaussian with a mean and covariance both determined by an "encoder" network.

2

Under review as a conference paper at ICLR 2019

2.2 THE CONDITIONAL INFERENCE PROBLEM
In this paper, we assume a VAE has been pre-trained. Then, at test time, some arbitrary subset x of t is observed as evidence, and the goal is to predict the distribution of the non-observed y where the decomposition t = (x, y) is unpredictable. If this decomposition of t into evidence and query variables is fixed and known ahead of time, a natural solution is to train an explicit conditional model, the approach taken by Conditional Variational Autoencoders(Sohn et al., 2015). We focus on supporting arbitrary queries, where training a conditional model for each possible decomposition t = (x, y) is infeasible.

3 CONDITIONAL INFERENCE ON VARIATIONAL AUTO-ENCODERS

We now turn to the details of conditional inference. We assume we have pretrained a VAE and now wish to approximate the distribution p(y|x) where x is some new "test" input not known at VAE training time. Unfortunately, exact inference is difficult, since computing this probability exactly
would require marginalizing out z.

3.1 EXPLOITING FACTORIZATION IN THE OUTPUT

One helpful property comes from the fact that in a VAE, the conditional distribution over the output (Eq. 1) has a diagonal covariance, which leads to the following decomposition:
Observation 1 The distribution of a VAE can be factorized as p(x, y, z) = p(z)p(x|z)p(y|z).
Since x and y are conditionally independent given z, the conditional of y given x can be written as

p(y|x) = p(z, y|x)pdz = p(z|x)p(y|z)dz.
zz

(3)

Here, p(y|z) can easily be evaluated or simulated. However p(z|x) is much more difficult to work with since it involves "inverting" the decoder. This factorization can also be exploited by
Markov chain Monte Carlo methods (MCMC), such as Hamiltonian Monte Carlo (HMC) (Girolami
& Calderhead, 2011; Daniel Levy, 2018). In this case, it allows the Markov chain to be defined over z alone, rather than z and y together. That is, one can use MCMC to attempt sampling from p(z|x), and then draw exact samples from p(y|z) just by evaluating the decoder network at each of the samples of z. The experiments using MCMC in Section 4 use this strategy.

3.2 VARIATIONAL INFERENCE BOUNDS

The basic idea of variational inference (VI) is to posit some distribution q, and optimize  to make
it match the target distribution as closely as possible. So, in principle, the goal of VI would be to minimize KL[q(Y) p(Y|x)]. For an arbitrary distribution q this divergence would be difficult to work with due to the need to marginalize out z in p as in Eq. 3.

However, if q is chosen carefully, then the above divergence can be upper-bounded by one defined directly over Z. Specifically, we will choose q so that the dependence of y on z under q is the same as under p (both determined by the "decoder").
Lemma 1. Suppose we choose q(z, y) = q(z)p(y|z). Then

KL[q(Y) p(Y|x)]  KL[q(Z) p(Z|x)].

(4)

This is proven in the Appendix. The result follows from using the chain rule of KL-divergence (Cover & Thomas, 2006) to bound the divergence over y by the divergence jointly over y and z. Then the common factors in q and p mean this simplifies into a divergence over z alone.

Given this Lemma, it makes sense to seek a distribution q such that the divergence on the right-hand side of Eq. 4 is as low as possible. To minimize this divergence, consider the decomposition

log

p (x)

=

Eq(Z)

log

p(Z, x) q (Z)

+K L[q (Z)||p (Z|x)],

(5)

C-ELBO[q(Z) p(Z,x)]

3

Under review as a conference paper at ICLR 2019

which is analogous to Eq. 2. Here, we call the first term the "conditional ELBO" (C-ELBO) to reflect that maximizing it is equivalent to minimizing an upper bound on KL[q(Y) p(Y|x)].

3.3 INFERENCE VIA CROSS-CODING

The previous section says that we should seek a distribution q to approximate p(z|x). Although the latent distribution p(z) may be simple, the conditional distribution p(z|x) is typically complex
and often multimodal (cf. Fig. 3).

To define a variational distribution satisfying the conditions of Lemma 1, we propose to draw from some fixed base density q( ) and then use a network with parameters  to map to the latent space z so that the marginal q(z) is expressive. The conditional of y given z is exactly as in p. The full variational distribution is therefore

q( , z, y) = q( )q(z| )p(y|z) with q(z| ) = (z - XCoder( )),

(6)

where  is a multivariate delta function. We call this network a "Cross-coder" to emphasize that the parameters  are fit so that q(Z) matches p(Z|x), and so that z, when "decoded" using , will predict y given x.
Theorem 2. If q is as defined in Eq. 6 and XCoder( ) is one-to-one for all , the C-ELBO from Eq. 5 becomes

C-ELBO[q(Z) p(Z, x)] = Eq( ) [log p(XCoder( ), x) + log |XCoder( )|] + H[q( )],

where H[q( )] is the (fixed) entropy of q( ),  is the Jacobian with respect to , and | · | is the determinant.

Informally, this result can be proven as follows: the C-ELBO was defined on z alone, while our definition of q in Eq. 6 also involves y and . Marginalizing out y is trivial. Then, since z and are deterministically related under q one can change variables to convert the expectation over z to one over , leaving the log-determinant Jacobian as an artifact of the entropy of q(z).
This objective is related to the "triple ELBO" used by Vedantam et al. (2017) for a situation with a small number of fixed decompositions of t into (x, y). Algorithmically, the approaches are quite different since they pre-train a single network for each subset of t, which can be used for any x with that pattern, and a futher product of experts approximation is used for novel missing features at test time. We assume arbitrary queries and so pre-training is inapplicable and novel missing features pose no issue. Still, our bounding justification may provide additional insight for their approach.

3.4 CROSS-CODERS

We explore the following two candidiate Cross-Coders.

Gaussian Variational Inference (GVI): The GVI XCoder linearly warps a spherical Gaussian over into an arbitrary Gaussian z:

XCoder( ) = W + b, where log |XCoder( )| = log |W| ,

(7)

where  = (W, b) for a square matrix W and a mean vector b. While projected gradient descent can be used to maintain invertibility of W , we did not encounter issues with non-invertible W requiring
projection during our experiments.

Normalizing Flows (NF): A normalizing flow (Rezende & Mohamed, 2015) projects a probability

density through a sequence of easy computable and invertible mappings. By stacking multiple

mappings, the transformation can be complex. We use the special structured network called Planar

Normalizing Flow:

hi = fi(hi-1) = hi-1 + uig(hTi-1wi + bi),

(8)

for all i, where h0 = , i is the layer id, w and u are vectors, and the output dimension is exactly same with the input dimension. Using  for function composition, the XCoder is given as

XCoder( ) = fk  fk-1 · · · f1( ),

where

k
log |XCoder( )| = log |fi|. (9)
i=1

4

Under review as a conference paper at ICLR 2019
The bound in Theorem 2 requires that XCoder is invertible. Nevertheless, we find Fully Connected Networks (FCNs) useful for comparison in low-dimensional visualizations. Here, the Jacobian must be calculated using separate gradient calls for each ouput variable, and the lack of invertibility prevents the C-ELBO bound from being correct.
We summarize our approach in Algorithm 1. In brief, we define a variational distribution q( , z) = q( )q(z| ) and optimize  so that q(z) is close to p(z|x). The variational distribution includes a "CrossCoder" as q(z| ) = (z - XCoder( )). The algorithm uses stochastic gradient decent on the C-ELBO with gradients estimated using Monte Carlo samples of and the reparameterization trick (Kingma & Welling, 2014; Titsias & Lázaro-Gredilla, 2014; Rezende et al., 2014). After inference, the original VAE distribution q(y|z) = p(y|z) gives samples over the query variables.
4 EXPERIMENTS
Having defined our cross-coding methodology for conditional inference with pre-trained VAEs, we now proceed to empirically evaluate our three previously defined XCoder instantiations and compare them with (Markov chain) Monte Carlo (MCMC) sampling approaches on three different pre-trained VAEs. Below we discuss our datasets and methodology followed by our experimental results.
4.1 DATASETS AND PRE-TRAINED VAES
MNIST is the well-known benchmark handwritten digit dataset (LeCun & Cortes, 2010). We use a pre-trained VAE with a fully connected encoder and decoder each with one hidden layer of 64 ReLU units, a final sigmoid layer with Bernoulli likelihood, and 2 latent dimensions for z.1 The VAE has been trained on 60,000 black and white binary thresholded images of size 28 × 28. The limitation to 2 dimensions allows us to visualize the conditional latent distribution of all methods and compare to the ground truth through a fine-grained discretization of z.
Anime is a dataset of animated character faces (Jin et al., 2017). We use a pre-trained VAE with convolutional encoder and deconvolutional decoder, each with 4 layers. The decoder contains respective channel sizes (256, 128, 32, 3) each using 5 × 5 filters of stride 2 and ReLU activations followed by batch norm layers. The VAE has a final tanh layer with Gaussian likelihood, and 64 latent dimensions for z.2 The VAE has been trained on 20000 images encoded in RGB of size 64 × 64 × 3.
CelebA dataset (Liu et al., 2015) is a benchmark dataset of images of celebrity faces. We use a pre-trained VAE with a structure that exactly matches the Anime VAE provided above, except that it uses 100 latent dimensions for z.3 The VAE has been trained on 200,000 images encoded in RGB of size 64 × 64 × 3.
4.2 METHODS COMPARED
For sampling approaches, we evaluate rejection sampling (RS), which is only feasible for our MNIST VAE with a 2-dimensional latent embedding for z. We also compare to the MCMC method of Hamiltonian Monte Carlo (HMC) (Girolami & Calderhead, 2011; Daniel Levy, 2018). Both sampling methods exploit the VAE decomposition and sampling methodology described in Section 3.1.
We went to great effort to tune the parameters of HMC. For MNIST, with low dimensions, this was generally feasible, with a few exceptions as noted in Figure 4(b). For the high-dimensional latent space of the Anime and CelebA VAEs, finding parameters to achieve good mixing was often impossible, leading to poor performance. Section 6.4 of the Appendix discusses this in detail.
For the cross-coding methods, we use the three XCoder variants described in Section 3.3: Gaussian Variational Inference (GVI), Planar Normalizing Flow (NF), and a Fully Connected Neural Network (FCN). By definition, the latent dimensionality of must match the latent dimensionality of z for each pre-trained VAE. Given evidence as described in the experiments, all cross-coders were trained as described in Algorithm 1. We could not train the FCN XCoder for conditional inference in Anime and
1 https://github.com/kvfrans/variational-autoencoder 2 URL for pre-trained VAE suppressed for anonymous review. 3 https://github.com/yzwxx/vae-celebA
5

Under review as a conference paper at ICLR 2019

CelebA due to the infeasibility of computing the Jacobian for the respective latent dimensionalities of these two VAEs.
In preliminary experiments, we considered the alternating sampling approach suggested by (Rezende et al., 2014, Appendix F), but found it to perform very poorly when the evidence is ambiguous. We provide a thorough analysis of this in Section 6.3 of the Appendix comparing results on MNIST with various fractions of the input taken as evidence. In summary, Rezende's alternation method produces reasonable results when a large fraction of pixels are observed, so the posterior is highly concentrated. When less than around 40% are observed, however, performance rapidly degrades.
4.3 EVALUATION METHODOLOGY
We experiment with a variety of evidence sets to demonstrate the efficiency and flexibility of our cross-coding methodology for arbitrary conditional inference queries in pre-trained VAEs. All crosscoding optimization and inference takes (typically well) under 32 seconds per evidence set for all experiments running on an Intel Xeon E5-1620 v4 CPU with 4 cores, 16Gb of RAM, and an NVIDIA GTX1080 GPU. A detailed running time comparison is provided in Section 6.5 of the Appendix.
Qualitatively, we visually examine the 2D latent distribution of z conditioned on the evidence for the special case of MNIST, which has low enough latent dimensionality to enable us to obtain ground truth through discretization. For all experiments, we qualitatively assess sampled query images generated for each evidence set to assess both the coverage of the distribution and the quality of match between the query samples and the evidence, which is fixed in the displayed images.
Quantitatively, we evaluate the performance of the proposed framework and candidate inference methods through the following two metrics.
C-ELBO: As a comparative measure of inference quality for each of the XCoder methods, we provide pairwise scatterplots of the C-ELBO as defined in 5 for a variety of different evidence sets
Query Marginal Likelihood: For each conditional inference evaluation, we randomly select an image and then a subset of that image as evidence x and the remaining pixels y as the ground truth query assignment. Given this, we can evaluate the marginal likelihood of the query y as follows:
log p(y) = log EZ[p(y|Z)]
4.4 CONDITIONAL INFERENCE ON MNIST
(x,y) y
x

(a) Data

(b) GVI

(c) NF

(d) FCN

(e) HMC

(f) RS (Exact)

Figure 2: One conditional inference example for MNIST. In all plots, the evidence subset has white replaced with orange and black replaced with blue. (a) The original digit t, the subset selected for evidence x, and the remaining ground truth query y. (b­f) Nine sample queries from method.

For conditional inference in MNIST, we begin with Figure 2, which shows one example of conditional inference in the pre-trained MNIST model using the different inference methods. While the original image used to generate the evidence represents the digit 3, the evidence is very sparse allowing the plausible generation of other digits. It is easy to see that most of the methods can handle this simple conditional inference, with only GVI producing some samples that do not match the evidence well in this VAE with 2 latent dimensions.
To provide additional insight into Figure 2, we now turn to Figure 3, where we visually compare the true conditional latent distribution p(z|x) (leftmost) with the corresponding distributions of each of the inference methods. At a first glance, we note that the true distribution is both multimodal and non-Gaussian. We see that GVI covers some mass not present in the true distribution that explains its

6

Under review as a conference paper at ICLR 2019

0.5 True distribution

0.5

0.0 0.0

0.5 0.5

1.0 1.0

1.5 1.5

2.0 1 0 1 2 3 2.0 1

GVI samples
012

0.5 0.0 0.5 1.0 1.5 3 2.0 1

NF samples
012

0.5 0.0 0.5 1.0 1.5 3 2.0 1

FCN samples
012

0.5 0.0 0.5 1.0 1.5 3 2.0 1

HMC samples
012

0.5 0.0 0.5 1.0 1.5 3 2.0 1

RS samples
012

3

Figure 3: p(z|x) for the MNIST example in Figure 2. The contour plot (left) shows the true distribution. The remaining plots show samples from each method overlaid on the true distribution.

relatively poor performance in Figure 2(b). All remaining methods (both XCoder and sampling) do a reasonable job of covering the irregular shape and mass of the true distribution.

FCN 80 60 40 20
GVI 80 60 40 20
GVI 80 60 40 20
Query Marginal Likelihood GVI NF HMC FCN RS

20 20 20 40 40 40 60 60 60 80 80 80
NF NF FCN
(a) Pairwise C-ELBO Comparison

0 100 200 300 400
Method
(b) Query Marginal Likelihood

Figure 4: (a) Pairwise C-ELBO comparison of different XCoder methods evaluated over the 50 randomly generated evidence sets for MNIST. (b) Violin (distribution) plots of the Query Marginal Likelihood for the same 50 evidence sets from (a), with each likelihood expectation generated from 500 samples. For both metrics, higher is better.

We now proceed to a quantitative comparison of performance on MNIST over 50 randomly generated queries. In Figure 4(a), we present a pairwise comparison of the performance of each XCoder method on 50 randomly generated evidence sets. Noting that higher is better, we observe that FCN and NF perform comparably and generally outperform GVI. In Figure 4(b), we examine the Query Marginal Likelihood distribution for the same 50 evidence sets from (a) with each likelihood expectation generated from 500 samples. Again, noting that higher is better, here we see that RS slightly edges out all other methods with all XCoders generally performing comparably. HMC performs worst here, where we remark that inadequate coverage of the latent z due to poor mixing properties leads to over-concentration on y leading to a long tail in a few cases with poor coverage. We will see that these issues with HMC mixing become much more pronounced as we move to experiments in VAEs with higher latent dimensionality in the next section.

4.5 CONDITIONAL INFERENCE ON ANIME AND CELEBA
Now we proceed to our larger VAEs for Anime and CelebA with respective latent dimensionality of 64 and 100 that allow us to work with larger and more visually complex RGB images. In these cases, FCN could not be applied due to the infeasibilty of computing the Jacobian and RS is also infeasible for such high dimensionality. Hence, we only compare the two XCoders GVI and NF with HMC.
We now continue to a qualitative and quantitative performance analysis of conditional inference for the Anime and CelebA VAEs. Qualitatively, in Figure 5 for Anime, we see that inference for both the NF XCoder and HMC show little identifiable variation and seem to have collapsed into a single latent mode. In contrast, GVI appears to show better coverage, generating a wide range of faces that generally match very well with the superimposed evidence. For Figure 6, HMC still performs poorly, but NF appears to perform much better, with both XCoders GVI and NF generating a wide range of faces that match the superimposed evidence, with perhaps slightly more face diversity for GVI.
Quantitatively, Figure 7 strongly reflects the qualitative visual observations above. In short for the XCoders, GVI solidly outperforms NF on the C-ELBO comparison. For all methods evaluated on

7

Under review as a conference paper at ICLR 2019 (x,y) y x

(a) Data

(b) GVI Samples

(c) NF Samples

(d) HMC Samples

Figure 5: One conditional inference example for Anime. (a) The original image t, the subset selected for evidence x, and the remaining ground truth query y. (b­d) 25 sample queries from each method with the evidence superimposed on each image. (c,d) NF and HMC demonstrate poor coverage.
(x,y) y

x

(a) Data

(b) GVI Samples

(c) NF Samples

(d) HMC Samples

Figure 6: One conditional inference example for CelebA. (a) The original image t, the subset selected for evidence x, and the remaining ground truth query y. (b­d) 25 sample queries from each method with the evidence superimposed on each image. (d) HMC demonstrates poor coverage.

GVI -1500000 -1000000 -500000
0 Query Marginal Likelihood
GVI NF HMC
GVI 1500 1000 500
0 Query Marginal Likelihood
GVI NF HMC

0 -500000 -1000000 -1500000

×107 0.0 -0.2 -0.4 -0.6 -0.8 -1.0 -1.2

0 500 1000 1500

1e7 0 1 2 3 4

NF Method

Pairwise C-ELBO Comparison

Query Marginal Likelihood

(a) Anime

NF Method

Pairwise C-ELBO Comparison

Query Marginal Likelihood

(b) CelebA

Figure 7: (left)(a,b) Pairwise C-ELBO comparison of GVI vs. FCN and (right)(a,b) Violin (distribution) plots of the Query Marginal Likelihood for (a) Anime and (b) CelebA. Evaluation details match those of Fig. 4 except with 25 conditional inference queries. For both metrics, higher is better.

Query Marginal Likelihood, GVI outperforms both NF and HMC on Anime, while for CelebA GVI performs comparably to (if not slightly worse) than NF, with both solidly outperforming HMC.

5 CONCLUSION
We introduced Cross-coding, a novel variational inference method for conditional queries in pretrained VAEs that does not require retraining the decoder. Using three VAEs pre-trained on different datasets, we demonstrated that the Gaussian Variational Inference (GVI) and Normalizing Flows (NF) cross-coders generally outperform Hamiltonian Monte Carlo both qualitatively and quantitively, thus providing a novel and efficient tool for conditional inference in VAEs with arbitrary queries.

8

Under review as a conference paper at ICLR 2019
REFERENCES
Yuri Burda, Roger Grosse, and Ruslan Salakhutdinov. Importance weighted autoencoders. International Conference on Learning Representations (ICLR), 2016.
Thomas M Cover and Joy A Thomas. Elements of information theory 2nd edition, thm 2.5.3. 2006.
Jascha Sohl-Dickstein Daniel Levy, Matthew D. Hoffman. Generalizing hamiltonian monte carlo with neural networks. The Sixth International Conference on Learning Representations (ICLR), 2018.
Mark Girolami and Ben Calderhead. Riemann manifold langevin and hamiltonian monte carlo methods. Journal of the Royal Statistical Society: Series B (Statistical Methodology), 73(2): 123­214, 2011.
Yanghua Jin, Jiakai Zhang, Minjun Li, Yingtao Tian, Huachun Zhu, and Zhihao Fang. Towards the automatic anime characters creation with generative adversarial networks. arXiv preprint arXiv:1708.05509, 2017.
Wilfred Kaplan. Advanced calculus. Cambridge, Mass., Addison-Wesley Press, 1952.
Diederik P Kingma and Max Welling. Auto-encoding variational bayes. International Conference on Learning Representations (ICLR), 2014.
Diederik P Kingma, Tim Salimans, Rafal Jozefowicz, Xi Chen, Ilya Sutskever, and Max Welling. Improved variational inference with inverse autoregressive flow. In Advances in Neural Information Processing Systems (NIPS), pp. 4743­4751, 2016.
Yann LeCun and Corinna Cortes. MNIST handwritten digit database. 2010. URL http://yann. lecun.com/exdb/mnist/.
Dong C Liu and Jorge Nocedal. On the limited memory bfgs method for large scale optimization. Mathematical programming, 45(1-3):503­528, 1989.
Ziwei Liu, Ping Luo, Xiaogang Wang, and Xiaoou Tang. Deep learning face attributes in the wild. In Proceedings of International Conference on Computer Vision (ICCV), 2015.
Lars Maaløe, Casper Kaae Sønderby, Søren Kaae Sønderby, and Ole Winther. Auxiliary deep generative models. 33rd International Conference on Machine Learning (ICML), 2016.
Danilo Rezende and Shakir Mohamed. Variational inference with normalizing flows. In International Conference on Machine Learning (ICML), pp. 1530­1538, 2015.
Danilo Jimenez Rezende, Shakir Mohamed, and Daan Wierstra. Stochastic backpropagation and approximate inference in deep generative models. In Proceedings of the 31th International Conference on Machine Learning (ICML), pp. 1278­1286, 2014.
Jason Tyler Rolfe. Discrete variational autoencoders. International Conference on Learning Representations (ICLR), 2017.
Lawrence K. Saul, Tommi S. Jaakkola, and Michael I. Jordan. Mean field theory for sigmoid belief networks. J. Artif. Intell. Res., 4:61­76, 1996.
Kihyuk Sohn, Honglak Lee, and Xinchen Yan. Learning structured output representation using deep conditional generative models. In Advances in Neural Information Processing Systems (NIPS), pp. 3483­3491, 2015.
Michalis K. Titsias and Miguel Lázaro-Gredilla. Doubly stochastic variational bayes for nonconjugate inference. In Proceedings of the 31th International Conference on Machine Learning (ICML), pp. 1971­1979, 2014.
Ramakrishna Vedantam, Ian Fischer, Jonathan Huang, and Kevin Murphy. Generative models of visually grounded imagination. International Conference on Learning Representations (ICLR), 2017.
9

Under review as a conference paper at ICLR 2019

6 APPENDIX
6.1 PROOFS
Proof Of Lemma 1. To show this, we first note that the joint divergence over Y and Z is equivalent to one over Z only.
KL[q(Y, Z) p(Y, Z|x)] = KL[q(Z) p(Z|x)] + KL[q(Y|Z) p(Y|Z, x)] by the chain rule of KL-divergence
= KL[q(Z) p(Z|x)] + KL[q(Y|Z) p(Y|Z)] since YX|Z in both q and p
= KL[q(Z) p(Z|x)] since q(y|z) = p(y|z)
Then, the result follows just from observing (again by the chain rule of KL-divergence) that
KL[q(Y) p(Y|x)]  KL[q(Y, Z) p(Y, Z|x)].

Proof of Theorem 2 . For the purpose of this proof, use c to denote CrossEncoder. Firstly, note that the marginal density of q(z|x) is (via the standard formula for a change of variables (Kaplan,
1952)) q(z = c( )) |c( )| = q( )

Thus, we can write

C-ELBO[q(Z) p(Z, x)]

=

Eq (Z)

log

p(Z, x) q (Z)

=

Eq(

)

log

p(Z = c( ), x) q(Z = c( ))

=

Eq(

)

log

p(Z = c( ), x) q( )/ |c( )|

= Eq( ) [log p(c( ), x) + log |c( )|] + Hq[ ].

6.2 PRELIMINARY CHECK OF INFERENCE METHODS

True distribution

6

4

2

0

2

4

6

50

5

True distribution samples

6

4

2

0

2

4

6

50

5

GVI samples MMD: 0.546203136444

6

4

2

0

2

4

6 5

0

5

NF samples MMD: 0.189971193671

6

4

2

0

2

4

6

50

5

FCN samples MMD: 0.101898528636

6

4

2

0

2

4

6

50

5

HMC samples MMD: 0.449853453427

6

4

2

0

2

4

6

50

5

Figure 8: Comparison of different inference methods on modeling a Gaussian mixture model distribution. The true distribution samples are directly sampled from a Gaussian mixture model. Maximum mean discrepancy (MMD) values given in the plot titles are generated relative to the true sample distribution.

In this experiment, we do not use a VAE, but instead simply model a complex latent 2D multimodal distribution over z as a Gaussian mixture model to evaluate the ability of each conditional inference method to accurately draw samples from this complex distribution. In general, Figure 8 shows that while the XCoders NF and FCN work well here, GVI (by definition) cannot model this multimodal distribution and HMC draws too few samples from the disconnected mode compared to the true sample distribution, indicating slight failure to mix well.

10

Under review as a conference paper at ICLR 2019

Method
Mean Square Error

Evidence Rezende
GVI FCN
NF

0.10

Rezende GVI

NF

0.08

FCN HMC

Reject

0.06

0.04

HMC
RS 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 Percentage of Observation
(a) Conditional Inference Example

0.02 0.00
0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 Percentage of Observation
(b) Mean Squared Error of Query Variables

Figure 9: Comparison of different conditional inference methods include the Rezende method on the MNIST dataset. (a) Shows one intuitive example. The first row shows the evidence observed, and the following rows show the mean of generated samples from the different algorithms. We note that with very high evidence, the posterior becomes extremely concentrated, meaning the rejection rates for rejection sampling become impractical. (b) The mean squared error between query variables of the original image and the generated samples of different algorithms. The results and standard deviations at each observation percentage come from 50 independent randomly selected queries.

6.3 COMPARISON TO REZENDE ALTERNATION
We compare to the alternating sampling approach of Rezende et al. (2014) (Appendix Section F) which is essentially an approximation of block Gibbs sampling. We call it the "Rezende method" in the following. This method does not asymptotically sample from the conditional distribution since the step sampling the latent variables given the query variables are approximated using the encoder.
Figure 9(a) shows one experiment comparing all candidate algorithms including the Rezende method. We noticed that it fails to generate images that match the evidence when less than 40% of pixels are observed as evidence, while it makes reasonable predictions when the observation rate is higher. Figure 9(b) shows this result is consistent over 50 randomly selected queries.
6.4 SYSTEMATIC HMC TUNING ANALYSIS FOR ANIME AND CELEBA
1.00 1.00 0.75 0.75 0.50 0.50 0.25 0.25 0.00 0.00

Accept Rate Accept Rate

0000000000000.............00000000000000000000010000001030040162086114064321108662455001702 0000000000000.............00000000000000000000001000064321000000143208611406111652652000784

Epsilon

Epsilon

(a) Anime

(b) CelebA

Figure 10: Boxplots of acceptance rate distribution of HMC for 30 Markov Chains vs different on (a) Anime and (b) CelebA. Each Markov chain ran for 10,000 burn-in samples with 10 leapfrog steps per iteration.

While tuning HMC in lower dimensions was generally feasible for MNIST with a few exceptions noted in previous discussion of Figure 4(b), we observed that HMC becomes very difficult to tune in the Anime and CelebA VAEs with higher latent dimensionality. To illustrate these HMC tuning difficulties, we present a summary of our systematic efforts to tune HMC on Anime and CelebA in Figure 10 with boxplots of the acceptance rate distribution of HMC for 30 Markov Chains vs different on (a) Anime and (b) CelebA. We ran each Markov chain for 10,000 burn-in samples

11

Under review as a conference paper at ICLR 2019

with 10 leapfrog steps per iteration; we tried 3 different standard leapfrog step settings of {5, 10, 30}, finding that 10 leapfrog steps provided the best performance across a range of and hence chosen for Figure 10.
In short, Figure 10 shows that only a very narrow band of lead to a reasonable acceptance rate for good mixing properties of HMC. Even then, however, the distribution of acceptance rates for any particular Markov Chain for a good is still highly unpredictable as given by the quartile ranges of the boxplot. In summary, we found that despite our systematic efforts to tune HMC for higher dimensional problems, it was difficult to achieve a good mixing rate and overall contributes to the generally poor performance observed for HMC on Anime and CelebA that we discuss next.

6.5 COMPARISON OF RUNNING TIME
The running time of conditional inference with XCoding varies with the complexity of XCoders, the optimization algorithm used, and the complexity of the pretrained Decoder. We found that L-BFGS(Liu & Nocedal, 1989) consistently converged fastest and with the best results in comparison to SGD, Adam, Adadelta, and RMSProp. Table 1, which follows, shows the computation time for each of the three candidate XCoders (FCN is only applicable to MNIST) as well as HMC and Rejection Sampling (RS is only applicable for MNIST).
Table 1: Average running Time (in seconds) of experiments. We use L-BFGS for XCoders in this table. For HMC, we predefine the burn-in (optimization) iterations to be 1000 for all datasets. For all methods, the sample size is 500.

Period

MNIST

Amine

CelebA

- GVI NF FCN HMC RS GVI NF HMC GVI NF HMC

Optimization 0.36 2.79 5.26 34.92 - 2.52 4.22 81.3 31.45 9.95 224.5 Prediction < 0.04 < 0.04 < 0.04 2 0.19 < 0.08 < 0.08 2 < 0.37 < 0.37 2

6.6 QUALITY OF THE PRE-TRAINED VAE MODELS To assess the quality of the pre-trained VAE models, we show 100 samples from each in Figure 11.

(a) MNIST

(b) Anime

(c) CelebA

Figure 11: Samples from each of the pre-trained VAE models.

12

Under review as a conference paper at ICLR 2019

6.7 MORE INFERENCE EXAMPLES In Figures 12 and 13, we show two additional examples of conditional inference matching the structure of experiments shown in Figures 5 and 6 in the main text. Overall, we observe the same general trends as discussed in the main text for Figures 5 and 6.
(x,y) y
x

(a) Data

(b) GVI Samples

(c) NF Samples

(d) HMC Samples

Figure 12: Another conditional inference example on Anime dataset

(x,y) y

x

(a) Data

(b) GVI Samples

(c) NF Samples

(d) HMC Samples

Figure 13: Another conditional inference example on CelebA dataset.

13

