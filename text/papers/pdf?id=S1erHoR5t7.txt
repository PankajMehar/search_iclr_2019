Under review as a conference paper at ICLR 2019
THE RELATIVISTIC DISCRIMINATOR: A KEY ELEMENT MISSING FROM STANDARD GAN
Anonymous authors Paper under double-blind review
ABSTRACT
In standard generative adversarial network (SGAN), the discriminator D estimates the probability that the input data is real. The generator G is trained to increase the probability that fake data is real. We argue that it should also simultaneously decrease the probability that real data is real because 1) this would account for a priori knowledge that half of the data in the mini-batch is fake, 2) this would be observed with divergence minimization, and 3) in optimal settings, SGAN would be equivalent to integral probability metric (IPM) GANs. We show that this property can be induced by using a "relativistic discriminator" which estimate the probability that the given real data is more realistic than a randomly sampled fake data. We also present a variant in which the discriminator estimate the probability that the given real data is more realistic than fake data, on average. We generalize both approaches to non-standard GAN loss functions and we refer to them respectively as Relativistic GANs (RGANs) and Relativistic average GANs (RaGANs). We show that IPM-based GANs are a subset of RGANs which use the identity function. Empirically, we observe that 1) RGANs and RaGANs are significantly more stable and generate higher quality data samples than their non-relativistic counterparts, 2) Standard RaGAN with gradient penalty generate data of better quality than WGAN-GP while only requiring a single discriminator update per generator update (reducing the time taken for reaching the state-of-the-art by 400%), and 3) RaGANs are able to generate plausible high resolutions images (256x256) from a very small sample (N=2011), while GAN and LSGAN cannot; these images are of significantly better quality than the ones generated by WGAN-GP and SGAN with spectral normalization.
1 INTRODUCTION
Generative adversarial networks (GANs) (Hong et al., 2017) form a broad class of generative models in which a game is played between two competing neural networks, the discriminator D and the generator G. D is trained to discriminate real from fake data, while G is trained to generate fake data that D will mistakenly recognize as real. In the original GAN by Goodfellow et al. (2014), which we refer to as Standard GAN (SGAN), D is a classifier, thus it is predicting the probability that the input data is real. When D is optimal, the loss function of SGAN is approximately equal to the Jensen­Shannon divergence (JSD) (Goodfellow et al., 2014).
SGAN has two variants for the generator loss functions: saturating and non-saturating. In practice, the former has been found to be very unstable, while the latter has been found to more stable (Goodfellow et al., 2014). Under certain conditions, Arjovsky & Bottou (2017) proved that, if real and fake data are perfectly classified, the saturating loss has zero gradient and the non-saturating loss has non-zero but volatile gradient. In practice, this mean that the discriminator in SGAN often cannot be trained to optimality or with a too high learning rate; otherwise, gradients may vanish and, if so, training will stop. This problem is generally more noticeable in high-dimensional setting (e.g., high resolution images and discriminator architectures with high expressive power) given that there are more degrees of freedom available to reach perfect classification of the training set.
To improve on SGAN, many GAN variants have been suggested using different loss functions and discriminators that are not classifiers (e.g., LSGAN (Mao et al., 2017), WGAN (Arjovsky et al.,
1

Under review as a conference paper at ICLR 2019

2017)). Although these approaches have partially succeeded in improving stability and data quality, the large-scale study by Lucic et al. (2017) suggests that these approaches do not consistently improve on SGAN. Additionally, some of the most successful approaches, such as WGAN-GP (Gulrajani et al., 2017), are much more computationally demanding than SGAN.
Many of the recent successful GANs variants have been based on Integral probability metrics (IPMs) (Müller, 1997) (e.g., WGAN , WGAN-GP). In IPM-based GANs, the discriminator is real-valued and constrained to a specific class of function which regularize the discriminator. These IPM constraints have been shown to be beneficial even in non-IPM based GANs (e.g., spectral normalization (Miyato et al., 2018) improves stability and it consists in making the discriminator Lipschitz-1 which is the constraint of WGAN, the gradient penalty of WGAN-GP works as well with SGAN (Fedus et al., 2017)). Although this shows that certain IPM constraints improve the stability of GANs, it does not explain why IPM-based GANs generally provide increased stability over other metrics/divergences in GANs (e.g., JSD for SGAN, f -divergences for f -GANs (Nowozin et al., 2016)).
In this paper, we argue that non-IPM-based GANs are missing a key ingredient, a relativistic discriminator, which IPM-based GANs already possess. We show that a relativistic discriminator is necessary to make GANs analogous to divergence minimization and produce sensible predictions based on the a priori knowledge that half of the samples in the mini-batch are fake. We provide empirical evidence showing that GANs with a relativistic discriminator are more stable and produce data of higher quality.

2 BACKGROUND

2.1 GENERATIVE ADVERSARIAL NETWORKS

GANs can be defined very generally in terms of the discriminator in the following way:

LD = ExrP f~1(D(xr)) + EzPz f~2(D(G(z))) ,

(1)

and

LG = ExrP [g~1(D(xr))] + EzPz [g~2(D(G(z)))] ,

(2)

where f~1, f~2, g~1, g~2 are scalar-to-scalar functions, P is the distribution of real data, Pz is generally a multivariate normal distribution centered at 0 with variance 1, D(x) is the discriminator evaluated at x, G(z) is the generator evaluated at z (Q is the distribution of fake data, thus of G(z)). Note that, through the paper, we refer to real data as xr and fake data as xf . Without loss of generality, we assume that both LD and LG are loss functions to be minimized.
Most GANs can be separated into two classes: non-saturating and saturating loss functions. GANs with the saturating loss are such that g~1=-f~1 and g~2=-f~2, while GANs with the non-saturating loss are such that g~1=f~2 and g~2=f~1. Saturating GANs are most intuitive as they can be interpreted as alternating between maximizing and minimizing the same loss function. After training D to optimality, the loss function is generally an approximation of a divergence (e.g., Jensen­Shannon divergence (JSD) for SGAN (Goodfellow et al., 2014), f -divergences for F-GANs (Nowozin et al., 2016), and Wassertein distance for WGAN (Arjovsky et al., 2017)). Thus, training G to minimize LG can be roughly interpreted as minimizing the approximated divergence (although this is not technically true; see Jolicoeur-Martineau (2018)). On the other hand, non-saturating GANs can be thought as optimizing the same loss function, but swapping real data with fake data (and vice-versa). In this article, unless otherwise specified, we assume a non-saturating loss for all GANs.
SGAN assumes a cross-entropy loss, i.e., f~1(D(x)) = - log(D(x)) and f~2(D(x)) = - log(1 - D(x)), where D(x) = sigmoid(C(x)), and C(x) is the non-transformed discriminator output (which we call the critic as per Arjovsky et al. (2017)). In most GANs, C(x) can be interpreted as how realistic the input data is; a negative number means that the input data looks fake (e.g., in SGAN, D(x) = sigmoid(-5) = 0), while a positive number means that the input data looks real (e.g., in SGAN, D(x) = sigmoid(5) = 1).

2

Under review as a conference paper at ICLR 2019

2.2 INTEGRAL PROBABILITY METRICS
IPMs are statistical divergences represented mathematically as: IP MF (P||Q) = sup ExP[C(x)] - ExQ[C(x)],
C F
where F is a class of real-valued functions.
IPM-based GANs can be defined using equation 1 and 2 assuming f~1(D(x)) = g~2(D(x)) = -D(x) and f~2(D(x)) = g~1(D(x)) = D(x), where D(x) = C(x) (i.e., no transformation is applied). It can be observed that both discriminator and generator loss functions are unbounded and would diverge to - if optimized directly. However, IPMs assume that the discriminator is of a certain class of function that does not grow too quickly which prevent the loss functions from diverging. Each IPM applies a different constraint to the discriminator (e.g., WGAN assumes a Lipschitz D, WGAN-GP assumes that D has gradient norm equal to 1 around real and fake data).

3 MISSING PROPERTY OF SGAN

3.1 MISSING PROPERTY
We argue that the key missing property of SGAN is that the probability of real data being real (D(xr)) should decrease as the probability of fake data being real (D(xf )) increase. We provide three arguments suggesting that SGAN should have this property.

3.2 PRIOR KNOWLEDGE ARGUMENT
After training the generator, given that both real and fake samples look equally real, the critic values (C(x)) of real and fake data may be very close, i.e., C(xf )  C(xr) for most xr and xf . Considering the fact that the discriminator is always shown half real data and half fake data, if the discriminator perceive all samples shown as equally real, it should assume that each sample has probability .50 of being real. However, in SGAN and other non-IPM-based GANs, the discriminator ignores the fact that half the samples are fake. Thus, if all samples look real, D assumes incorrectly that they are indeed all real (D(x)  1 for all x). However, if D(xr) decreased as D(xf ) increased, we would have had that D(x)  .50 for all x, as expected.
Thus, unless one makes the task of the discriminator more difficult (using regularization or lower learning rates), the discriminator in SGAN does not make reasonable predictions. On the other hand, IPM-based GANs implicitly account for the fact that some of the samples must be fake because they compare how realistic real data is compared to fake data. This is the behavior that we would also want in non-IPM-based GANs.

3.3 DIVERGENCE MINIMIZATION ARGUMENT

In SGAN, when optimized, we have that the discriminator loss function is equal to the

Jensen­Shannon divergence (JSD) (Goodfellow et al., 2014). The JSD is minimized (JSD(P||Q) =

0)

when

D(xr )

=

D(xf )

=

1 2

for all

xr



P

and

xf



Q and

maximized (JSD(P||Q)

=

log(2))

when D(xr) = 1, D(xf ) = 0 for all xr  P and xf  Q. Thus, if we were directly minimizing the

divergence from maximum to minimum, we would expect D(xr) to smoothly decrease from 1 to .50

for most xr and D(xf ) to smoothly increase from 0 to .50 for most xf (Figure 1a). However, when minimizing the saturating loss in SGAN, we are only increasing D(xf ), we are not decreasing D(xr)

(Figure 1b). Furthermore, we are bringing D(xf ) closer to 1 rather than .50. This means that SGAN

dynamics are very different from the minimization of the JSD. To bring SGAN closer to divergence

minimization, training the generator should not only increase D(xf ) but also decrease D(xr) (Figure

1c).

3.4 GRADIENT ARGUMENT

Let's compare the gradient steps of standard GAN and IPM-based GANs for further insight. It can be

shown that the gradients of the discriminator and generator in non-saturating SGAN are respectively:

wLDGAN = -ExrP [(1 - D(xr))wC(xr)] + Exf Q [D(xf )wC(xf )] ,

(3)

3

Under review as a conference paper at ICLR 2019

(A) Divergence minimization 1

(B) Actual generator training 1

(C) Ideal generator training 1

Discriminator output D(x)

0.5 0.5 0.5

0 Beginning

0 End Beginning
Real data

End
Fake data

0 Beginning

End

Figure 1: Expected discriminator output of the real and fake data for the a) direct minimization of the Jensen­Shannon divergence, b) actual training of the generator to minimize its loss function, and c) ideal training of the generator to minimize its loss function (lines are dotted when they cross beyond the equilibrium to signify that this may or may not be necessary).

LGGAN = -EzPz [(1 - D(G(z)))xC(G(z))JG(z)] , where J is the Jacobian.

(4)

It can be shown that the gradients of the discriminator and generator in IPM-based GANs are

respectively:

wLIDP M = -ExrP[wC(xr)] + Exf Q [wC(xf )],

(5)

LGIP M = -EzPz [xC(G(z))JG(z)], where C(x)  F (the class of functions assigned by the IPM).

(6)

From these equations, it can be observed that SGAN leads to the same dynamics as IPM-based GANs when we have that:

1. D(xr) = 0, D(xf ) = 1 in the discriminator step of SGAN 2. D(xf ) = 0 in the generator step of SGAN. 3. C(x)  F

Assuming that the discriminator and generator are trained to optimality in each step and that it is possible to perfectly distinguish real from the fake data (strong assumption, but generally true early in training); we have that D(xr) = 1, D(xf ) = 0 in the generator step and that D(xr) = 1, D(xf ) = 1 in the discriminator step for most xr and xf (Figure 1b). Thus, the only missing assumption is that D(xr) = 0 in the discriminator step.
This means that SGAN could be equivalent to IPM-based GANs, in certain situations, if the generator could indirectly influence D(xr). Considering that IPM-based GANs are generally more stable than SGAN, it would be reasonable to expect that making SGAN closer to IPM-based GANs could improve its stability.

4 METHOD
4.1 RELATIVISTIC STANDARD GAN
In standard GAN, the discriminator can be defined, in term of the non-transformed layer C(x), as D(x) = sigmoid(C(x)). A simple way to make discriminator relativistic (i.e., having the output of D depends on both real and fake data) is to sample from real/fake data pairs x~ = (xr, xf ) and define it as D(x~) = sigmoid(C(xr) - C(xf )).
We can interpret this modification in the following way: the discriminator estimates the probability that the given real data is more realistic than a randomly sampled fake data. Similarly, we can

4

Under review as a conference paper at ICLR 2019

define Drev(x~) = sigmoid(C(xf ) - C(xr)) as the probability that the given fake data is more
realistic than a randomly sampled real data. An interesting property of this discriminator is that we
do not need to include Drev in the loss function through log(1 - Drev(x~)) because we have that 1 - Drev(x~) = 1 - sigmoid(C(xf ) - C(xr)) = sigmoid(C(xr) - C(xf )) = D(x~); thus, log(D(x~)) = log(1 - Drev(x~)).

The discriminator and generator (non-saturating) loss functions of the Relativistic Standard GAN (RSGAN) can be written as:

LDRSGAN = -E(xr,xf )(P,Q) [log(sigmoid(C(xr) - C(xf )))] .

(7)

LRGSGAN = -E(xr,xf )(P,Q) [log(sigmoid(C(xf ) - C(xr)))] .

(8)

4.2 RELATIVISTIC GANS

More generally, we consider any discriminator defined as a(C(xr)-C(xf )), where a is the activation function, to be relativistic. This means that almost any GAN can have a relativistic discriminator.
This forms a new class of models which we call Relativistic GANs (RGANs).

Most GANs can be parametrized very generally in terms of the critic:

LDGAN = ExrP [f1(C(xr))] + Exf Q [f2(C(xf ))]

(9)

and

LGGAN = ExrP [g1(C(xr))] + Exf Q [g2(C(xf ))] ,

(10)

where f1, f2, g1, g2 are scalar-to-scalar functions. If we use a relativistic discriminator, these GANs now have the following form:

LDRGAN = E(xr,xf )(P,Q) [f1(C(xr) - C(xf ))] + E(xr,xf )(P,Q) [f2(C(xf ) - C(xr))] (11)
and
LGRGAN = E(xr,xf )(P,Q) [g1(C(xr) - C(xf ))] + E(xr,xf )(P,Q) [g2(C(xf ) - C(xr))] . (12)
IPM-based GANs represent a special case of RGAN where f1(y) = g2(y) = -y and f2(y) = g1(y) = y. Importantly, g1 is normally ignored in GANs because its gradient is zero since the generator does not influence it. However, in RGANs, g1 is influenced by fake data, thus by the generator.

4.3 RELATIVISTIC AVERAGE GANS

As an alternative to the Relativistic Discriminator, we propose to use the Relativistic average Discriminator (RaD) which compares the critic of the input data to the average critic of samples of the opposite type. The discriminator loss function for this approach can be formulated as:

LDRaSGAN = -ExrP log D¯ (xr) ) - Exf Q log 1 - D¯ (xf ) ,

(13)

where

D¯ (x) = sigmoid(C(x) - Exf QC(xf )) if x is real sigmoid(C(x) - ExrPC(xr)) if x is fake.

(14)

RaD has a more similar interpretation to the standard discriminator than the relativistic discriminator. With RaD, the discriminator estimates the probability that the given real data is more realistic than fake data, on average.

As before, we can generalize this approach to work with any GAN loss function using the following formulation:
LRDaGAN = ExrP f1 C(xr) - Exf QC(xf ) ) + Exf Q [f2 (C(xf ) - ExrPC(xr))] . (15)

LRGaGAN = ExrP g1 C(xr) - Exf QC(xf ) ) + Exf Q [g2 (C(xf ) - ExrPC(xr))] . (16) We call this general approach Relativistic average GAN (RaGAN).

5

Under review as a conference paper at ICLR 2019
5 EXPERIMENTS
Experiments were conducted on the CIFAR-10 dataset (Krizhevsky, 2009) and the CAT dataset (Zhang et al., 2008). Code was written in Pytorch (Paszke et al., 2017) and models were trained using the Adam optimizer (Kingma & Ba, 2014) for 100K generator iterations with seed 1 (which shows that we did not fish for the best seed, instead, we selected the seed a priori). We report the Fréchet Inception Distance (FID) (Heusel et al., 2017), a measure that is generally better correlated with data quality than the Inception Distance (Salimans et al., 2016) (Borji, 2018); lower FID means that the generated images are of better quality.
For the models architectures, we used the standard CNN described by Miyato et al. (2018) on CIFAR10 and a relatively standard DCGAN architecture (Radford et al., 2015) on CAT (see Appendix). We also provide the source code required to replicate all analyses presented in this paper (See our repository: [Anonymous until peer review is finished]).
5.1 CIFAR-10
In these analyses, we compared standard GAN (SGAN), least-squares GAN (LSGAN), Wassertein GAN improved (WGAN-GP), Hinge-loss GAN (HingeGAN) (Miyato et al., 2018), Relativistic SGAN (RSGAN), Relativistic average SGAN (RaSGAN), Relativistic average LSGAN (RaLSGAN), and Relativistic average HingeGAN (RaHingeGAN) using the standard CNN architecture on stable setups (See Appendix for details on the loss functions used). Additionally, we tested RSGAN and RaSGAN with the same gradient-penalty as WGAN-GP (named RSGAN-GP and RaSGAN-GP respectively).
We used the following two known stable setups: (DCGAN setup) lr = .0002, nD = 1, 1 = .50 and 2 = .999 (Radford et al., 2015), and (WGAN-GP setup) lr = .0001, nD = 5, 1 = .50 and 2 = .9 (Gulrajani et al., 2017), where lr is the learning rate, nD is the number of discriminator updates per generator update, and 1, 2 are the ADAM momentum parameters. For optimal stability, we used batch norm (Ioffe & Szegedy, 2015) in G and spectral norm (Miyato et al., 2018) in D.
Results are presented in Table 1. We observe that RSGAN and RaSGAN generally performed better than SGAN. Similarly, RaHingeGAN performed better than HingeGAN. RaLSGAN performed on par with LSGAN, albeit sightly worse. WGAN-GP performed poorly in the DCGAN setup, but very well in the WGAN-GP setup. RasGAN-GP performed poorly; however, RSGAN-GP performed better than all other loss functions using only one discriminator update per generator update. Importantly, the resulting FID of 25.60 is on par with the lowest FID obtained for this architecture using spectral normalization, as reported by Miyato et al. (2018) (25.5). Overall, these results show that using a relativistic discriminator generally improve data generation quality and that RSGAN works very well in conjunction with gradient penalty to obtain state-of-the-art results.
5.2 CAT
CAT is a dataset containing around 10k pictures of cats with annotations. We cropped the pictures to the faces of the cats using those annotations. After removing outliers (hidden faces, blurriness, etc.), the CAT dataset contained 9304 images  64x64, 6645 images  128x128, and 2011 images  256x256. The CAT dataset is particularly challenging due to its small sample size and high-resolution images; this makes it perfect for testing the stability of different GAN loss functions.
We trained different GAN loss functions on 64x64, 128x128, 256x256 images. For 256x256 images, we compared RaGANs to known stable approaches: SpectralSGAN (SGAN with spectral normalization in D) and WGAN-GP. Although some approaches were able to train on 256x256 images, they did so with significant mode collapse. To alleviate this problem, for 256x256 images, we packed the discriminator (Lin et al., 2017) (i.e., D took a concatenated pair of images instead of a single image). We looked at the mimimum, maximum, mean and standard deviation (SD) of the FID at 20k, 30k, ..., 100k generator iterations; results are presented in Table 2.
Overall, we observe lower minimum FID, maximum FID, mean and standard deviation (sd) for RGANs and RaGANs than their non-relativistic counterparts (SGAN, LSGAN, RaLSGAN).
6

Under review as a conference paper at ICLR 2019

Table 1: Fréchet Inception Distance (FID) at exactly 100k generator iterations on the CIFAR-10 dataset using stable setups with different GAN loss functions. We used spectral norm in D and batch norm in G. All models were trained using the same a priori selected seed (seed=1).

lr = .0002 lr = .0001

 = (.50, .999)  = (.50, .9)

Loss

nD = 1

nD = 5

SGAN RSGAN RaSGAN

40.64 36.61 31.98

41.32 55.29 37.92

LSGAN RaLSGAN

29.53 30.92

187.01 219.39

HingeGAN RaHingeGAN

49.53 39.12

80.85 37.72

WGAN-GP RSGAN-GP RaSGAN-GP

83.89 25.60 331.86

27.81 28.13

Table 2: Minimum (min), maximum (max), mean, and standard deviation (SD) of the Fréchet Inception Distance (FID) calculated at 20k, 30k . . . , 100k generator iterations on the CAT dataset with different GAN loss functions. The hyperparameters used were lr = .0002,  = (.50, .999), nD = 1, and batch norm (BN) in D and G. All models were trained using the same a priori selected seed (seed=1).
Loss Min Max Mean SD

SGAN RSGAN RaSGAN

64x64 images (N=9304) 16.56 310.56 52.54 19.03 42.05 32.16 15.38 33.11 20.53

96.81 7.01 5.68

LSGAN RaLSGAN

20.27 224.97 73.62 61.02 11.97 19.29 15.61 2.55

HingeGAN 17.60 50.94 32.23 14.44 RaHingeGAN 14.62 27.31 20.29 3.96

RSGAN-GP 16.41 22.34 18.20 1.82 RaSGAN-GP 17.32 22 19.58 1.81

128x128 images (N=6645) SGAN 1 - - -
RaSGAN 21.05 39.65 28.53

6.52

LSGAN RaLSGAN

19.03 51.36 30.28 10.16 15.85 40.26 22.36 7.53

256x256 images (N=2011)

SGAN1

---

RaSGAN 32.11 102.76 56.64

SpectralSGAN 54.08 90.43 64.92

21.03 12.00

LSGAN1 RaLSGAN

---35.21 299.52 70.44 86.01

WGAN-GP 155.46 437.48 341.91 101.11

1 Didn't converge, became stuck in the first few iterations.

7

Under review as a conference paper at ICLR 2019
In 64x64 resolution, both SGAN and LSGAN generated images with low FID, but they did so in a very unstable matter. For example, SGAN went from a FID of 17.50 at 30k iterations, to 310.56 at 40k iterations, and back to 27.72 at 50k iterations. Similarly, LSGAN went from a FID of 20.27 at 20k iterations, to 224.97 at 30k iterations, and back to 51.98 at 40k iterations. On the other hand, RaGANs were much more stable (lower max and SD) while also resulting in lower minimum FID. Using gradient-penalty did not improve data quality; however, it reduced the SD lower than without gradient penalty, thus increasing stability further.
SGAN was unable to converge on 128x128 or bigger images and LSGAN was unable to converge on 256x256 images. Meanwhile, RaGANs were able to generate plausible images with low FID in all resolutions. Although SpectralSGAN and WGAN-GP were able to generate 256x256 images of cats, the samples they generated were of poor quality (high FID). Thus, in this very difficult setting, relativism provided a greater improvement in quality than gradient penalty or spectral normalization.
6 CONCLUSION AND FUTURE WORK
In this paper, we proposed the relativistic discriminator as a way to fix and improve on standard GAN. We further generalized this approach to any GAN loss and introduced a generally more stable variant called RaD. Our results suggest that relativism significantly improve data quality and stability of GANs at no computational cost. Furthermore, using a relativistic discriminator with other tools of the trade (spectral norm, gradient penalty, etc.) may lead to better state-of-the-art.
Future research is needed to fully understand the mathematical implications of adding relativism to GANs. Furthermore, our experiments were limited to certain loss functions using only one seed, due to computational constraints. More experiments are required to determine which relativistic GAN loss function is best over a wide-range of datasets and hyperparameters. We greatly encourage researchers and machine learning enthusiasts with greater computing power to experiment further with our approach.
REFERENCES
Martin Arjovsky and Léon Bottou. Towards principled methods for training generative adversarial networks. arXiv preprint arXiv:1701.04862, 2017.
Martin Arjovsky, Soumith Chintala, and Léon Bottou. Wasserstein generative adversarial networks. In International Conference on Machine Learning, pp. 214­223, 2017.
Ali Borji. Pros and cons of gan evaluation measures. arXiv preprint arXiv:1802.03446, 2018.
William Fedus, Mihaela Rosca, Balaji Lakshminarayanan, Andrew M Dai, Shakir Mohamed, and Ian Goodfellow. Many paths to equilibrium: Gans do not need to decrease adivergence at every step. arXiv preprint arXiv:1710.08446, 2017.
Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair, Aaron Courville, and Yoshua Bengio. Generative adversarial nets. In Z. Ghahramani, M. Welling, C. Cortes, N. D. Lawrence, and K. Q. Weinberger (eds.), Advances in Neural Information Processing Systems 27, pp. 2672­2680. Curran Associates, Inc., 2014. URL http://papers.nips.cc/paper/5423-generative-adversarial-nets.pdf.
Ishaan Gulrajani, Faruk Ahmed, Martin Arjovsky, Vincent Dumoulin, and Aaron C Courville. Improved training of wasserstein gans. In I. Guyon, U. V. Luxburg, S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, and R. Garnett (eds.), Advances in Neural Information Processing Systems 30, pp. 5767­5777. Curran Associates, Inc., 2017. URL http://papers.nips.cc/ paper/7159-improved-training-of-wasserstein-gans.pdf.
Martin Heusel, Hubert Ramsauer, Thomas Unterthiner, Bernhard Nessler, Günter Klambauer, and Sepp Hochreiter. Gans trained by a two time-scale update rule converge to a nash equilibrium. arXiv preprint arXiv:1706.08500, 2017.
Yongjun Hong, Uiwon Hwang, Jaeyoon Yoo, and Sungroh Yoon. How generative adversarial nets and its variants work: An overview of gan. arXiv preprint arXiv:1711.05914, 2017.
8

Under review as a conference paper at ICLR 2019
Sergey Ioffe and Christian Szegedy. Batch normalization: Accelerating deep network training by reducing internal covariate shift. arXiv preprint arXiv:1502.03167, 2015.
Alexia Jolicoeur-Martineau. Gans beyond divergence minimization. arXiv preprint arXiv:1809.02145, 2018.
Diederik P Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint arXiv:1412.6980, 2014.
Alex Krizhevsky. Learning multiple layers of features from tiny images. 2009. Zinan Lin, Ashish Khetan, Giulia Fanti, and Sewoong Oh. Pacgan: The power of two samples in
generative adversarial networks. arXiv preprint arXiv:1712.04086, 2017. Mario Lucic, Karol Kurach, Marcin Michalski, Sylvain Gelly, and Olivier Bousquet. Are gans created
equal? a large-scale study. arXiv preprint arXiv:1711.10337, 2017. Xudong Mao, Qing Li, Haoran Xie, Raymond YK Lau, Zhen Wang, and Stephen Paul Smolley. Least
squares generative adversarial networks. In 2017 IEEE International Conference on Computer Vision (ICCV), pp. 2813­2821. IEEE, 2017. Takeru Miyato, Toshiki Kataoka, Masanori Koyama, and Yuichi Yoshida. Spectral normalization for generative adversarial networks. arXiv preprint arXiv:1802.05957, 2018. Alfred Müller. Integral probability metrics and their generating classes of functions. Advances in Applied Probability, 29(2):429­443, 1997. Sebastian Nowozin, Botond Cseke, and Ryota Tomioka. f-gan: Training generative neural samplers using variational divergence minimization. In D. D. Lee, M. Sugiyama, U. V. Luxburg, I. Guyon, and R. Garnett (eds.), Advances in Neural Information Processing Systems 29, pp. 271­279. Curran Associates, Inc., 2016. URL http://papers.nips.cc/paper/6066-f-gan-training-generativeneural-samplers-using-variational-divergence-minimization.pdf. Adam Paszke, Sam Gross, Soumith Chintala, Gregory Chanan, Edward Yang, Zachary DeVito, Zeming Lin, Alban Desmaison, Luca Antiga, and Adam Lerer. Automatic differentiation in pytorch. 2017. Alec Radford, Luke Metz, and Soumith Chintala. Unsupervised representation learning with deep convolutional generative adversarial networks. arXiv preprint arXiv:1511.06434, 2015. Tim Salimans, Ian Goodfellow, Wojciech Zaremba, Vicki Cheung, Alec Radford, Xi Chen, and Xi Chen. Improved techniques for training gans. In D. D. Lee, M. Sugiyama, U. V. Luxburg, I. Guyon, and R. Garnett (eds.), Advances in Neural Information Processing Systems 29, pp. 2234­2242. Curran Associates, Inc., 2016. URL http://papers.nips.cc/paper/6125improved-techniques-for-training-gans.pdf. Weiwei Zhang, Jian Sun, and Xiaoou Tang. Cat head detection-how to effectively exploit shape and texture features. In European Conference on Computer Vision, pp. 802­816. Springer, 2008.
9

Under review as a conference paper at ICLR 2019
APPENDICES
A INTUITIVE AND MEMEFUL VISUAL REPRESENTATION OF RAGANS

Table 3: An illustrative example of the discriminator's output in standard GAN as traditionally defined (P (xr is real) = sigmoid(C(xr))) versus the Relativistic average Discriminator (RaD)
(P (xr is real|C(xf )) = sigmoid(C(xr) - C(xf ))). Breads represent real images, while dogs represent fake images.

Scenario

Absolute probability

Relative probability

(Standard GAN) (Relativistic average Standard GAN)

Real image looks real and
fake images look fake

C(xr) = 8 P (xr is bread) = 1

C(xf ) = -5 P (xr is bread|C(xf )) = 1

Real image looks real but
fake images look similarly real on average

C(xr) = 8 P (xr is bread) = 1

C(xf ) = 7 P (xr is bread|C(xf )) = .73

Real image looks fake but
fake images look more fake on average

C(xr) = -3 P (xr is bread) = .05

C(xf ) = -5 P (xr is bread|C(xf )) = .88

10

Under review as a conference paper at ICLR 2019

B GRADIENT STEP B.1 SGAN

wLGDAN = -wExrP [log D(xr)] - wExf Q [log(1 - D(xf ))]

eC (xr ) = -wExrP log eC(xr) + 1

eC(xf )

- wExf Q

log

1- eC(xf ) + 1

= -wExrP C(xr) - log eC(xr) + 1 - wExf Q log(1) - log eC(xf ) + 1

= -ExrP [wC(xr)] + ExrP

eC (xr ) eC(xr) +

1

w

C

(xr )

+ Exf Q

eC(xf ) eC(xf ) +

1

w

C (xf

)

= -ExrP [wC(xr)] + ExrP [D(xr)wC(xr)] + Exf Q [D(xf )wC(xf )] = -ExrP [(1 - D(xr))wC(xr)] + Exf Q [D(xf )wC(xf )]

LGGAN = -EzPz [log D(G(z))] eC(G(z))
= -EzPz log eC(G(z)) + 1

= -EzPz C(G(z)) - log eC(G(z)) + 1

= -EzPz xC(G(z))JG(z) -

eC(G(z)) eC(G(z)) + 1

= -EzPz [(1 - D(G(z)))xC(G(z))JG(z)]

x C (G(z ))J G(z )

B.2 IPM-BASED GANS

wLIDP M = -wExrP[C(xr)] + wExf Q [C(xf )] = -ExrP[wC(xr)] + Exf Q [wC(xf )]

LIGP M = -EzPz [C(G(z))] = -EzPz [xC(G(z))JG(z)]

C SIMPLIFIED FORM OF RELATIVISTIC SATURATING AND NON-SATURATING GANS

The formulation of RGANs can be simplified when we have the following two properties: (1) f2(-y) = f1(y) and (2) the generator assumes a non-saturating loss (g1(y) = f2(y) and g2(y) = f1(y)). These two properties are observed in standard GAN, LSGAN using symmetric labels (e.g., -1 and 1), IPM-based GANs, etc. With these two properties, RGANs with non-saturating loss can be
formulated simply as:

LRDGAN = E(xr,xf )(P,Q) [f1(C(xr) - C(xf ))]

(17)

and

LGRGAN = E(xr,xf )(P,Q) [f1(C(xf ) - C(xr))] .

(18)

Assuming f2(-y) = f1(y), we have that
LDRGAN = E(xr,xf )(P,Q) [f1(C(xr) - C(xf ))] + E(xr,xf )(P,Q) [f2(C(xf ) - C(xr))] = E(xr,xf )(P,Q) [f1(C(xr) - C(xf ))] + E(xr,xf )(P,Q) [f1(C(xr) - C(xf ))] = 2E(xr,xf )(P,Q) [f1(C(xr) - C(xf ))] .

11

Under review as a conference paper at ICLR 2019

Table 4: Fréchet Inception Distance (FID) at exactly 100k generator iterations on the CIFAR-10 dataset using instable setups with different GAN loss functions. Unless otherwise specified, we used lr = .0002,  = (.50, .999), nD = 1, and batch norm (BN) in D and G. All models were trained using the same a priori selected seed (seed=1).

Loss lr = .001  = (.9, .9) No BN Tanh

SGAN RSGAN RaSGAN

154.20 50.95 55.55

35.29 45.12 43.46

35.54 37.11 41.96

59.17 77.21 54.42

LSGAN RaLSGAN

52.27 33.33

225.94 48.92

38.54 147.87 34.66 53.07

HingeGAN 43.28 RaHingeGAN 51.05

33.47 42.78

34.21 58.51 43.75 50.69

WGAN-GP 61.97

104.95 85.27 59.94

If g1(y) = -f1(y) and g2(y) = -f2(y) (saturating GAN), we have that
LRGGAN-S = E(xr,xf )(P,Q) [g1(C(xr) - C(xf ))] + E(xr,xf )(P,Q) [g2(C(xf ) - C(xr))] = -E(xr,xf )(P,Q) [f1(C(xr) - C(xf ))] - E(xr,xf )(P,Q) [f2(C(xf ) - C(xr))] = -E(xr,xf )(P,Q) [f1(C(xr) - C(xf ))] - E(xr,xf )(P,Q) [f1(C(xr) - C(xf ))] = -2E(xr,xf )(P,Q) [f1(C(xr) - C(xf ))] .
If g1(y) = f2(y) and g2(y) = f1(y) (non-saturating GAN), we have that
LGRGAN-NS = E(xr,xf )(P,Q) [g1(C(xr) - C(xf ))] + E(xr,xf )(P,Q) [g2(C(xf ) - C(xr))] = E(xr,xf )(P,Q) [f2(C(xr) - C(xf ))] + E(xr,xf )(P,Q) [f1(C(xf ) - C(xr))] = E(xr,xf )(P,Q) [f1(C(xf ) - C(xr))] + E(xr,xf )(P,Q) [f1(C(xf ) - C(xr))] = 2E(xr,xf )(P,Q) [f1(C(xf ) - C(xr))] .
D CIFAR-10 HARD/UNSTABLE EXPERIMENTS
In these analyses, we compared SGAN, LSGAN, WGAN-GP, RSGAN, RaSGAN, RaLSGAN, and RaHingeGAN with the standard CNN architecture on unstable setups in CIFAR-10. Unless otherwise specified, we used lr = .0002, 1 = .5, 2 = .999, nD = 1, and batch norm (Ioffe & Szegedy, 2015) in G and D. We tested the following four unstable setups: (1) lr = .001, (2) 1 = .9, 2 = .9, (3) no batch norm in G or D, and (4) all activation functions replaced with Tanh in both G and D (except for the output activation function of D).
Results are presented in Table 4. We observe that RaLSGAN performed better than LSGAN in all setups. RaHingeGAN performed slightly worse than HingeGAN in most setups. RSGAN and RaSGAN performed better than SGAN in two out of four setups, although differences were small. WGAN-GP generally performed poorly which we suspect is due to the single discriminator update per generator update. Overall, this provide good support for the improved stability of using the relative discriminator with LSGAN, but not with HingeGAN and SGAN. Although results are worse for the relativistic discriminator in some settings, differences are minimal and probably reflect natural variations.
It is surprising to observe low FID for SGAN without batch normalization considering its well-known difficulty with this setting (Arjovsky et al., 2017). Given these results, we suspected that CIFAR-10 may be too easy to fully observe the stabilizing effects of using the relative discriminator. Therefore, in the manuscript, we focused on the more difficult CAT dataset with high resolution pictures.
12

Under review as a conference paper at ICLR 2019

E LOSS FUNCTIONS USED IN EXPERIMENTS

E.1 SGAN (NON-SATURATING) LDSGAN = -ExrP [log (sigmoid(C(xr)))] - Exf Q [log (1 - sigmoid(C(xf )))]

(19)

LGSGAN = -Exf Q [log (sigmoid(C(xf )))]

(20)

E.2 RSGAN

LRDSGAN = -E(xr,xf )(P,Q) [log(sigmoid(C(xr) - C(xf )))]

(21)

LGRSGAN = -E(xr,xf )(P,Q) [log(sigmoid(C(xf ) - C(xr)))]

(22)

E.3 RASGAN LRDaSGAN = -ExrP log D~ (xr)

- Exf Q log 1 - D~ (xf )

(23)

LGRaSGAN = -Exf Q log D~ (xf )
D~ (xr) = sigmoid C(xr) - Exf QC(xf ) D~ (xf ) = sigmoid (C(xf ) - ExrPC(xr))

- ExrP log 1 - D~ (xr)

(24)

E.4 LSGAN

LLDSGAN = ExrP (C(xr) - 0)2 + Exf Q (C(xf ) - 1)2

(25)

LGLSGAN = Exf Q (C(xf ) - 0)2

(26)

E.5 RALSGAN
LDRaLSGAN = ExrP (C(xr) - Exf QC(xf ) - 1)2 + Exf Q (C(xf ) - ExrPC(xr) + 1)2 (27)

LGRaLSGAN = Exf P (C(xf ) - ExrPC(xr) - 1)2 + ExrP (C(xr) - Exf QC(xf ) + 1)2 (28)

E.6 HINGEGAN LDHingeGAN = ExrP [max(0, 1 - C(xr))] + Exf Q [max(0, 1 + C(xf ))]
LHG ingeGAN = -Exf Q [C(xf )]
E.7 RAHINGEGAN LHDingeGAN = ExrP max(0, 1 - D~ (xr)) + Exf Q max(0, 1 + D~ (xf ))
LHGingeGAN = Exf P max(0, 1 - D~ (xf )) + ExrQ max(0, 1 + D~ (xr)) D~ (xr) = C(xr) - Exf QC(xf ) D~ (xf ) = C(xf ) - ExrPC(xr)
E.8 WGAN-GP LWD GAN-GP = -ExrP [C(xr)] + Exf Q [C(xf )] + Ex^Px^ (||x^C(x^) ||2 - 1)2
LWG GAN-GP = -Exf Q [C(xf )] Px^ is the distribution of x^ = xr + (1 - )xf , where xr  P, xf  Q,  U [0, 1].

(29) (30) (31) (32)
(33) (34)

13

Under review as a conference paper at ICLR 2019

E.9 RSGAN-GP

LRDSGAN = -E(xr,xf )(P,Q) [log(sigmoid(C(xr) - C(xf )))] + Ex^Px^ (||x^C(x^) ||2 - 1)2 (35)

LRGSGAN = -E(xr,xf )(P,Q) [log(sigmoid(C(xf ) - C(xr)))] Px^ is the distribution of x^ = xr + (1 - )xf , where xr  P, xf  Q,  U [0, 1]. E.10 RASGAN-GP

(36)

LDRaSGAN = -ExrP log D~ (xr) -Exf Q log 1 - D~ (xf ) +Ex^Px^ (||x^C(x^) ||2 - 1)2 (37)

LGRaSGAN = -Exf Q log D~ (xf ) - ExrP log 1 - D~ (xr)
D~ (xr) = sigmoid C(xr) - Exf QC(xf ) D~ (xf ) = sigmoid (C(xf ) - ExrPC(xr)) Px^ is the distribution of x^ = xr + (1 - )xf , where xr  P, xf  Q,  U [0, 1].
F ALGORITHMS

(38)

Algorithm 1 Training algorithm for non-saturating RGANs with symmetric loss functions

Require: The number of D iterations nD (nD = 1 unless one seeks to train D to optimality), batch
size m, and functions f which determine the objective function of the discriminator (f is f1 from equation 10 assuming that f2(-y) = f1(y), which is true for many GANs).

while  has not converged do

for t = 1, . . . , nD do

Sample {x(i)}mi=1  P

Sample {z(i)}mi=1  Pz

Update

w

using

SGD

by

ascending

with

w

1 m

end for

m i=1

f (Cw(x(i)) - Cw(G(z(i))))

Sample {x(i)}mi=1  P

Sample {z(i)}mi=1  Pz

Update



using

SGD

by

ascending

with



1 m

end while

m i=1

f (Cw(G(z(i))) - Cw(x(i)))

14

Under review as a conference paper at ICLR 2019

Algorithm 2 Training algorithm for non-saturating RaGANs

Require: The number of D iterations nD (nD = 1 unless one seek to train D to optimality), batch

size m, and functions f1 and f2 which determine the objective function of the discriminator (see

equation 10).

while  has not converged do

for t = 1, . . . , nD do

Sample {x(i)}im=1  P

Sample {z(i)}im=1  Pz

Let

Cw (xr )

=

1 m

m i=1

Cw

(x(i))

Let

Cw(xf )

=

1 m

m i=1

Cw

(G

(z(i)

))

Update w using SGD by ascending with

w

1 m

m i=1

f1(Cw(x(i)) - Cw(xf )) + f2(Cw(G(z(i))) - Cw(xr))

end for

Sample {x(i)}im=1  P

Sample {z(i)}im=1  Pz

Let

Cw (xr )

=

1 m

m i=1

Cw

(x(i))

Let

Cw(xf )

=

1 m

m i=1

Cw (G (z (i) ))

Update  using SGD by ascending with



1 m

m i=1

f1(Cw(G(z(i))) - Cw(xr)) + f2(Cw(x(i)) - Cw(xf ))

end while

G ARCHITECTURES

G.1 STANDARD CNN

Generator z  R128  N (0, I) linear, 128 -> 512*4*4 Reshape, 512*4*4 -> 512 x 4 x 4 ConvTranspose2d 4x4, stride 2, pad 1, 512->256
BN and ReLU ConvTranspose2d 4x4, stride 2, pad 1, 256->128
BN and ReLU ConvTranspose2d 4x4, stride 2, pad 1, 128->64
BN and ReLU ConvTranspose2d 3x3, stride 1, pad 1, 64->3
Tanh

Discriminator x  R3x32x32 Conv2d 3x3, stride 1, pad 1, 3->64 LeakyReLU 0.1 Conv2d 4x4, stride 2, pad 1, 64->64 LeakyReLU 0.1 Conv2d 3x3, stride 1, pad 1, 64->128 LeakyReLU 0.1 Conv2d 4x4, stride 2, pad 1, 128->128 LeakyReLU 0.1 Conv2d 3x3, stride 1, pad 1, 128->256 LeakyReLU 0.1 Conv2d 4x4, stride 2, pad 1, 256->256 LeakyReLU 0.1 Conv2d 3x3, stride 1, pad 1, 256->512 Reshape, 512 x 4 x 4 -> 512*4*4 linear, 512*4*4 -> 1

15

Under review as a conference paper at ICLR 2019 G.2 DCGAN 64X64

Generator z  R128  N (0, I) ConvTranspose2d 4x4, stride 1, pad 0, no bias, 128->512
BN and ReLU ConvTranspose2d 4x4, stride 2, pad 1, no bias, 512->256
BN and ReLU ConvTranspose2d 4x4, stride 2, pad 1, no bias, 256->128
BN and ReLU ConvTranspose2d 4x4, stride 2, pad 1, no bias, 128->64
BN and ReLU ConvTranspose2d 4x4, stride 2, pad 1, no bias, 64->3
Tanh

Discriminator x  R3x64x64 Conv2d 4x4, stride 2, pad 1, no bias, 3->64 LeakyReLU 0.2 Conv2d 4x4, stride 2, pad 1, no bias, 64->128 BN and LeakyReLU 0.2 Conv2d 4x4, stride 2, pad 1, no bias, 128->256 BN and LeakyReLU 0.2 Conv2d 4x4, stride 2, pad 1, no bias, 256->512 BN and LeakyReLU 0.2 Conv2d 4x4, stride 2, pad 1, no bias, 512->1

G.3 DCGAN 128X128

Generator z  R128  N (0, I) ConvTranspose2d 4x4, stride 1, pad 0, no bias, 128->1024
BN and ReLU ConvTranspose2d 4x4, stride 2, pad 1, no bias, 1024->512
BN and ReLU ConvTranspose2d 4x4, stride 2, pad 1, no bias, 512->256
BN and ReLU ConvTranspose2d 4x4, stride 2, pad 1, no bias, 256->128
BN and ReLU ConvTranspose2d 4x4, stride 2, pad 1, no bias, 128->64
BN and ReLU ConvTranspose2d 4x4, stride 2, pad 1, no bias, 64->3
Tanh

Discriminator x  R3x128x128 Conv2d 4x4, stride 2, pad 1, no bias, 3->64 LeakyReLU 0.2 Conv2d 4x4, stride 2, pad 1, no bias, 64->128 BN and LeakyReLU 0.2 Conv2d 4x4, stride 2, pad 1, no bias, 128->256 BN and LeakyReLU 0.2 Conv2d 4x4, stride 2, pad 1, no bias, 256->512 BN and LeakyReLU 0.2 Conv2d 4x4, stride 2, pad 1, no bias, 512->1024 BN and LeakyReLU 0.2 Conv2d 4x4, stride 2, pad 1, no bias, 1024->1

16

Under review as a conference paper at ICLR 2019

G.4 DCGAN 256X256

Generator z  R128  N (0, I) ConvTranspose2d 4x4, stride 1, pad 0, no bias, 128->1024
BN and ReLU ConvTranspose2d 4x4, stride 2, pad 1, no bias, 1024->512
BN and ReLU ConvTranspose2d 4x4, stride 2, pad 1, no bias, 512->256
BN and ReLU ConvTranspose2d 4x4, stride 2, pad 1, no bias, 256->128
BN and ReLU ConvTranspose2d 4x4, stride 2, pad 1, no bias, 128->64
BN and ReLU ConvTranspose2d 4x4, stride 2, pad 1, no bias, 64->32
BN and ReLU ConvTranspose2d 4x4, stride 2, pad 1, no bias, 64->3
Tanh

Discriminator (PACGAN2 (Lin et al., 2017)) x1  R3x256x256, x2  R3x256x256 Concatenate [x1, x2]  R6x256x256
Conv2d 4x4, stride 2, pad 1, no bias, 6->32 LeakyReLU 0.2
Conv2d 4x4, stride 2, pad 1, no bias, 32->64 LeakyReLU 0.2
Conv2d 4x4, stride 2, pad 1, no bias, 64->128 BN and LeakyReLU 0.2
Conv2d 4x4, stride 2, pad 1, no bias, 128->256 BN and LeakyReLU 0.2
Conv2d 4x4, stride 2, pad 1, no bias, 256->512 BN and LeakyReLU 0.2
Conv2d 4x4, stride 2, pad 1, no bias, 512->1024 BN and LeakyReLU 0.2
Conv2d 4x4, stride 2, pad 1, no bias, 1024->1

H SAMPLES
This shows a selection of cats from certain models. Images shown are from the lowest FID registered at every 10k generator iterations. Given space constraint, with higher resolutions cats, we show some of the nicer looking cats for each approach, there are evidently some worse looking cats 1.

1See [Anonymous link until peer review is finished] for all cats of the mini-batch. 17

Under review as a conference paper at ICLR 2019 Figure 2: 64x64 cats with RaLSGAN (FID = 11.97) 18

Under review as a conference paper at ICLR 2019
Figure 3: 128x128 cats with RaLSGAN (FID = 15.85) 19

Under review as a conference paper at ICLR 2019
Figure 4: 256x256 cats with GAN (5k iterations)
Figure 5: 256x256 cats with LSGAN (5k iterations) 20

Under review as a conference paper at ICLR 2019
Figure 6: 256x256 cats with RaSGAN (FID = 32.11) 21

Under review as a conference paper at ICLR 2019
Figure 7: 256x256 cats with RaLSGAN (FID = 35.21) 22

Under review as a conference paper at ICLR 2019
Figure 8: 256x256 cats with SpectralSGAN (FID = 54.73) 23

Under review as a conference paper at ICLR 2019
Figure 9: 256x256 cats with WGAN-GP (FID > 100) 24

